<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>彤哥哥的博客</title>
  
  <subtitle>为梦想而战</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ltyeamin.github.io/"/>
  <updated>2019-10-12T14:52:48.158Z</updated>
  <id>http://ltyeamin.github.io/</id>
  
  <author>
    <name>YeaMin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跨平台办公利器-uTools</title>
    <link href="http://ltyeamin.github.io/2019/10/12/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%8A%9E%E5%85%AC%E5%88%A9%E5%99%A8-uTools/"/>
    <id>http://ltyeamin.github.io/2019/10/12/跨平台办公利器-uTools/</id>
    <published>2019-10-12T14:40:10.000Z</published>
    <updated>2019-10-12T14:52:48.158Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>之前习惯了Mac Pro 的Spotlight模式进行检索应用和文件，在前段日子中，我成功的找到了一款Windows上类似的软件Everything+Wox，仍在使用Windows的朋友有兴趣可以看我阅读这边<a href="http://blog.yeamin.top/2019/06/03/Windows%E6%90%9C%E7%B4%A2%E5%88%A9%E5%99%A8/" target="_blank" rel="noopener">文章</a>进行操作体验。</p><p>言归正传，我在家使用的电脑系统是Deepin Linux,曾经也想找到这种款速检索工具，但是找了很长时间却没有找到。</p><p>今天我偶尔在深度应用商店发现一款名叫utools的软件，类似于Spotlight模式。</p><p>于是我打开官网，官网是这样介绍的：</p><blockquote><p>你的生产力工具集<br>uTools是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。<br>当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。</p></blockquote><p>uTools是跨平台的软件,同时支持Windows、Mac、Linux等平台，不同平台稍微有些差别。Linux平台没有文件检索，这点是很遗憾的，但是笔者相信开发者后续会慢慢完善。</p><h2 id="utools常用体验"><a href="#utools常用体验" class="headerlink" title="utools常用体验"></a>utools常用体验</h2><h3 id="插件中心"><a href="#插件中心" class="headerlink" title="插件中心"></a>插件中心</h3><p><img src="https://www.u.tools/assets/img/section/1.png" alt="插件中心"></p><h3 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h3><p><img src="https://www.u.tools/assets/img/section/2.png" alt="快速启动"></p><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>注意：仅支持Windows和Mac平台，Linux平台下会很快开发</p><p><img src="https://img04.sogoucdn.com/app/a/100520146/93ba9a87acd3d00b1ddc806083330a36" alt="本地搜索"></p><h3 id="自动识别"><a href="#自动识别" class="headerlink" title="自动识别"></a>自动识别</h3><p><img src="https://www.u.tools/assets/img/section/3.png" alt="自动识别"></p><h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><p><img src="https://www.u.tools/assets/img/section/4.png" alt="数据同步"></p><h3 id="Http抓包"><a href="#Http抓包" class="headerlink" title="Http抓包"></a>Http抓包</h3><p><img src="https://img03.sogoucdn.com/app/a/100520146/b4db76c004911fcdb05d2825934071c5" alt="Http抓包"></p><h3 id="剪贴板"><a href="#剪贴板" class="headerlink" title="剪贴板"></a>剪贴板</h3><p><img src="https://img01.sogoucdn.com/app/a/100520146/882d1e41f225c1e9c35eb88eb28d0b1b" alt="剪贴板"></p><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><p><img src="https://img02.sogoucdn.com/app/a/100520146/d00b3c181ed4f0901c2b265b722d1127" alt="图传"></p><h3 id="hosts切换"><a href="#hosts切换" class="headerlink" title="hosts切换"></a>hosts切换</h3><p><img src="https://img04.sogoucdn.com/app/a/100520146/6bdbd0a088941111e78afbcfd89ea43f" alt="hosts切换"></p><h3 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h3><p><img src="https://img04.sogoucdn.com/app/a/100520146/27af86a9f9dc362ba5eda5f2bfda7b0f" alt="翻译"></p><h3 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h3><p><img src="https://img01.sogoucdn.com/app/a/100520146/b78279a088d2ff44f24793165514f6e2" alt="计算器"></p><p>内网穿透</p><p><img src="https://img03.sogoucdn.com/app/a/100520146/5867b7c885eaae6c7f2ea0c041ea33a8" alt="内网穿透"></p><h2 id="相关站点"><a href="#相关站点" class="headerlink" title="相关站点"></a>相关站点</h2><ul><li>官网地址：<a href="https://www.u.tools/" target="_blank" rel="noopener">https://www.u.tools/</a></li><li>官网下载地址：<a href="https://www.u.tools/download.html" target="_blank" rel="noopener">https://www.u.tools/download.html</a></li><li>使用文档地址:  <a href="https://www.u.tools/docs/guide/about-uTools.html" target="_blank" rel="noopener">https://www.u.tools/docs/guide/about-uTools.html</a></li><li>讨论社区:  <a href="https://yuanliao.info/" target="_blank" rel="noopener">https://yuanliao.info/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="实用工具及技巧" scheme="http://ltyeamin.github.io/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>【Python爬虫】使用Requests库爬取猫眼电影TOP100数据</title>
    <link href="http://ltyeamin.github.io/2019/10/12/%E3%80%90Python%E7%88%AC%E8%99%AB%E3%80%91%E4%BD%BF%E7%94%A8Requests%E5%BA%93%E7%88%AC%E5%8F%96%E7%8C%AB%E7%9C%BC%E7%94%B5%E5%BD%B1TOP100%E6%95%B0%E6%8D%AE/"/>
    <id>http://ltyeamin.github.io/2019/10/12/【Python爬虫】使用Requests库爬取猫眼电影TOP100数据/</id>
    <published>2019-10-12T12:23:11.000Z</published>
    <updated>2019-10-12T13:33:44.861Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="爬虫分析"><a href="#爬虫分析" class="headerlink" title="爬虫分析"></a>爬虫分析</h2><h3 id="爬虫需求"><a href="#爬虫需求" class="headerlink" title="爬虫需求"></a>爬虫需求</h3><p>描述: 爬取猫眼电影TOP100的电影名称、时间、评分、海报图片等信息</p><p>站点:  <a href="https://maoyan.com/board/4" target="_blank" rel="noopener">https://maoyan.com/board/4</a></p><p>分析: 打开站点即是猫眼电影TOP100的第一页,点击下一页，我们观察地址栏URL后边追加了?offset=10的参数，显然offset参数代表偏移量，offset=10表示第一页，offset=20表示第二页，由此可推，若偏移量未n，则电影序号就是n+1到n+10，每页显示10个。因此，想要获取TOP100，要分开请求10次，而10次的offset参数值分别设置为0、10、20…90即可，这样获取不同的页面之后，再通过任意一个的解析器提取相关的数据即可完成。</p><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><h3 id="利用正则进行解析"><a href="#利用正则进行解析" class="headerlink" title="利用正则进行解析"></a>利用正则进行解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin python3.6</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@File    : __init__.py.py</span></span><br><span class="line"><span class="string">@Description : 利用requests库和lxml解析库爬取猫眼电影TOP100数据</span></span><br><span class="line"><span class="string">@Author  : tong.li</span></span><br><span class="line"><span class="string">@Email   : lt_alex@163.com</span></span><br><span class="line"><span class="string">@Blog    : http://blog.yeamin.top</span></span><br><span class="line"><span class="string">@Time    : 2019/10/12 下午8:31</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 设置请求头</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span> : <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            text = response.text</span><br><span class="line">            <span class="comment"># 获取电影排名、海报、名称、主演、发布时间、评分</span></span><br><span class="line">            regx = re.compile(<span class="string">'&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src="(.*?)".*?name.*?a.*?&gt;(.*?)&lt;/a&gt;'</span></span><br><span class="line">                              <span class="string">'.*?star.*?&gt;.*?：(.*?)\s*&lt;/p&gt;.*?releasetime.*?&gt;.*?：(.*?)&lt;/p&gt;.*?integer.*?&gt;(.*?)&lt;/i&gt;'</span></span><br><span class="line">                              <span class="string">'.*?fraction.*?&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;'</span>, re.S)</span><br><span class="line">            items = re.findall(regx, text)</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">                <span class="keyword">yield</span> &#123;</span><br><span class="line">                    <span class="string">'index'</span>: item[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">'name'</span>: item[<span class="number">2</span>],</span><br><span class="line">                    <span class="string">'actor'</span>: item[<span class="number">3</span>],</span><br><span class="line">                    <span class="string">'post_img'</span>: item[<span class="number">1</span>],</span><br><span class="line">                    <span class="string">'time'</span>: item[<span class="number">4</span>],</span><br><span class="line">                    <span class="string">'score'</span>: item[<span class="number">5</span>]+item[<span class="number">6</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">return</span> items</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储:文件/数据库</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store</span><span class="params">(text,filename)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(str(text) + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getData</span><span class="params">(url)</span>:</span></span><br><span class="line">    datas = request_page(url)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">        <span class="comment"># 控制台打印数据</span></span><br><span class="line">        print(data)</span><br><span class="line">        <span class="comment"># 将数据写入txt纯文本文件中</span></span><br><span class="line">        store(data,<span class="string">'result.txt'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 猫眼电影TOP100榜单</span></span><br><span class="line">    url = <span class="string">'https://maoyan.com/board/4?offset='</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        getData(url + str(i * <span class="number">10</span>))</span><br><span class="line">        <span class="comment"># 猫眼电影有反爬虫限制,爬的太多会有IP或验证码限制,等待0.5毫秒再次请求</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h3 id="利用xlml及Xpath解析"><a href="#利用xlml及Xpath解析" class="headerlink" title="利用xlml及Xpath解析"></a>利用xlml及Xpath解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin python3.6</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@File    : __init__.py.py</span></span><br><span class="line"><span class="string">@Description : 利用requests库和lxml解析库爬取猫眼电影TOP100数据</span></span><br><span class="line"><span class="string">@Author  : tong.li</span></span><br><span class="line"><span class="string">@Email   : lt_alex@163.com</span></span><br><span class="line"><span class="string">@Blog    : http://blog.yeamin.top</span></span><br><span class="line"><span class="string">@Time    : 2019/10/12 下午8:31</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 设置请求头</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            text = response.text</span><br><span class="line">            <span class="keyword">return</span> text</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dealData</span><span class="params">(items)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'index'</span>: item[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'name'</span>: item[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'actor'</span>: item[<span class="number">2</span>].strip(),</span><br><span class="line">            <span class="string">'time'</span>: item[<span class="number">3</span>][<span class="number">4</span>:],</span><br><span class="line">            <span class="string">'score'</span>: item[<span class="number">4</span>] + item[<span class="number">5</span>],</span><br><span class="line">            <span class="string">'post_img'</span>: item[<span class="number">6</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> items</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="comment"># 猫眼电影TOP100榜单</span></span><br><span class="line">        url = <span class="string">'https://maoyan.com/board/4?offset='</span>+ str(i * <span class="number">10</span>)</span><br><span class="line">        html = etree.HTML(request_page(url))</span><br><span class="line">        indexs = html.xpath(<span class="string">'//*[@id="app"]/div/div/div[1]/dl/dd/i/text()'</span>)</span><br><span class="line">        name = html.xpath(<span class="string">'//*[@id="app"]/div/div/div[1]/dl/dd/div/div/div[1]/p[1]/a/text()'</span>)</span><br><span class="line">        actor = html.xpath(<span class="string">'//*[@id="app"]/div/div/div[1]/dl/dd/div/div/div[1]/p[2]/text()'</span>)</span><br><span class="line">        times = html.xpath(<span class="string">'//*[@id="app"]/div/div/div[1]/dl/dd/div/div/div[1]/p[3]/text()'</span>)</span><br><span class="line">        score1 = html.xpath(<span class="string">'//*[@id="app"]/div/div/div[1]/dl/dd/div/div/div[2]/p/i[1]/text()'</span>)</span><br><span class="line">        score2 = html.xpath(<span class="string">'//*[@id="app"]/div/div/div[1]/dl/dd/div/div/div[2]/p/i[2]/text()'</span>)</span><br><span class="line">        <span class="comment"># 取图片地址的时候发现问题,打开浏览器F12控制台,在Element看到的img标签图片地址属性名为src,</span></span><br><span class="line">        <span class="comment"># 但是在Source下看到的属性名是data-src,原因可能是浏览器对JavaScript代码进行了渲染</span></span><br><span class="line">        images = html.xpath(<span class="string">'//*[@class="board-img"]/@data-src'</span>)</span><br><span class="line">        datas = zip(indexs,name,actor,times,score1,score2,images)</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> dealData(datas):</span><br><span class="line">            print(data)</span><br><span class="line">        <span class="comment"># 猫眼电影有反爬虫限制,爬的太多会有IP或验证码限制,等待0.5毫秒再次请求</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h2 id="爬取结果"><a href="#爬取结果" class="headerlink" title="爬取结果"></a>爬取结果</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">&#123;'index': '1', 'name': '霸王别姬', 'actor': '主演：张国荣,张丰毅,巩俐', 'time': '：1993-01-01', 'score': '9.5', 'post_img': 'https://p1.meituan.net/movie/20803f59291c47e1e116c11963ce019e68711.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '2', 'name': '肖申克的救赎', 'actor': '主演：蒂姆·罗宾斯,摩根·弗里曼,鲍勃·冈顿', 'time': '：1994-09-10(加拿大)', 'score': '9.5', 'post_img': 'https://p0.meituan.net/movie/283292171619cdfd5b240c8fd093f1eb255670.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '3', 'name': '罗马假日', 'actor': '主演：格利高里·派克,奥黛丽·赫本,埃迪·艾伯特', 'time': '：1953-09-02(美国)', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/289f98ceaa8a0ae737d3dc01cd05ab052213631.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '4', 'name': '这个杀手不太冷', 'actor': '主演：让·雷诺,加里·奥德曼,娜塔莉·波特曼', 'time': '：1994-09-14(法国)', 'score': '9.5', 'post_img': 'https://p1.meituan.net/movie/6bea9af4524dfbd0b668eaa7e187c3df767253.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '5', 'name': '泰坦尼克号', 'actor': '主演：莱昂纳多·迪卡普里奥,凯特·温丝莱特,比利·赞恩', 'time': '：1998-04-03', 'score': '9.5', 'post_img': 'https://p1.meituan.net/movie/b607fba7513e7f15eab170aac1e1400d878112.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '6', 'name': '唐伯虎点秋香', 'actor': '主演：周星驰,巩俐,郑佩佩', 'time': '：1993-07-01(中国香港)', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/da64660f82b98cdc1b8a3804e69609e041108.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '7', 'name': '魂断蓝桥', 'actor': '主演：费雯·丽,罗伯特·泰勒,露塞尔·沃特森', 'time': '：1940-05-17(美国)', 'score': '9.2', 'post_img': 'https://p0.meituan.net/movie/46c29a8b8d8424bdda7715e6fd779c66235684.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '8', 'name': '乱世佳人', 'actor': '主演：费雯·丽,克拉克·盖博,奥利维娅·德哈维兰', 'time': '：1939-12-15(美国)', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/223c3e186db3ab4ea3bb14508c709400427933.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '9', 'name': '天空之城', 'actor': '主演：寺田农,鹫尾真知子,龟山助清', 'time': '：1992-05-01', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/ba1ed511668402605ed369350ab779d6319397.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '10', 'name': '辛德勒的名单', 'actor': '主演：连姆·尼森,拉尔夫·费因斯,本·金斯利', 'time': '：1993-12-15(美国)', 'score': '9.2', 'post_img': 'https://p0.meituan.net/movie/b0d986a8bf89278afbb19f6abaef70f31206570.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '11', 'name': '喜剧之王', 'actor': '主演：周星驰,莫文蔚,张柏芝', 'time': '：1999-02-13(中国香港)', 'score': '9.1', 'post_img': 'https://p1.meituan.net/movie/18e3191039d5e71562477659301f04aa61905.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '12', 'name': '音乐之声', 'actor': '主演：朱莉·安德鲁斯,克里斯托弗·普卢默,埃琳诺·帕克', 'time': '：1965-03-02(美国)', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/6bc004d57358ee6875faa5e9a1239140128550.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '13', 'name': '大闹天宫', 'actor': '主演：邱岳峰,毕克,富润生', 'time': '：1965-12-31', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/14a7b337e8063e3ce05a5993ed80176b74208.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '14', 'name': '春光乍泄', 'actor': '主演：张国荣,梁朝伟,张震', 'time': '：1997-05-30(中国香港)', 'score': '9.2', 'post_img': 'https://p0.meituan.net/movie/ae7245920d95c03765fe1615f3a1fe3865785.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '15', 'name': '剪刀手爱德华', 'actor': '主演：约翰尼·德普,薇诺娜·瑞德,黛安·韦斯特', 'time': '：1990-12-06(美国)', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/6a964e9cee699267053bd6a4bf6f2671195394.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '16', 'name': '海上钢琴师', 'actor': '主演：蒂姆·罗斯,普路特·泰勒·文斯,比尔·努恩', 'time': '：1998-10-28(意大利)', 'score': '9.2', 'post_img': 'https://p0.meituan.net/movie/2bbaa395c825920fac397706369746e4300686.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '17', 'name': '美丽人生', 'actor': '主演：罗伯托·贝尼尼,尼可莱塔·布拉斯基,乔治·坎塔里尼', 'time': '：1997-12-20(意大利)', 'score': '9.3', 'post_img': 'https://p0.meituan.net/movie/43d259ecbcd53e8bbe902632772281d6327525.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '18', 'name': '黑客帝国', 'actor': '主演：基努·里维斯,凯瑞-安·莫斯,劳伦斯·菲什伯恩', 'time': '：2000-01-14', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/ad974d3527879f00be2eec29135118163728582.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '19', 'name': '哈利·波特与魔法石', 'actor': '主演：丹尼尔·雷德克里夫,鲁伯特·格林特,艾玛·沃特森', 'time': '：2002-01-26', 'score': '9.1', 'post_img': 'https://p1.meituan.net/movie/aacb9ed2a6601bfe515ef0970add1715623792.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '20', 'name': '指环王3：王者无敌', 'actor': '主演：伊莱贾·伍德,伊恩·麦克莱恩,丽芙·泰勒', 'time': '：2004-03-15', 'score': '9.2', 'post_img': 'https://p0.meituan.net/movie/932bdfbef5be3543e6b136246aeb99b8123736.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '21', 'name': '蝙蝠侠：黑暗骑士', 'actor': '主演：克里斯蒂安·贝尔,希斯·莱杰,阿伦·伊克哈特', 'time': '：2008-07-18(美国)', 'score': '9.3', 'post_img': 'https://p0.meituan.net/movie/09658109acfea0e248a63932337d8e6a4268980.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '22', 'name': '无间道', 'actor': '主演：刘德华,梁朝伟,黄秋生', 'time': '：2003-09-05', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/606de8f394d40dbcbb9b87943fec71a2130408.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '23', 'name': '楚门的世界', 'actor': '主演：金·凯瑞,劳拉·琳妮,诺亚·艾默里奇', 'time': '：1998-06-01(美国)', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/8959888ee0c399b0fe53a714bc8a5a17460048.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '24', 'name': '加勒比海盗', 'actor': '主演：约翰尼·德普,凯拉·奈特莉,奥兰多·布鲁姆', 'time': '：2003-11-21', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/b05b94b28eca53f325ae8d807fcd4ce01798036.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '25', 'name': '射雕英雄传之东成西就', 'actor': '主演：张国荣,梁朝伟,张学友', 'time': '：1993-02-05(中国香港)', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/53b6f0b66882a53b08896c92076515a8236400.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '26', 'name': '教父2', 'actor': '主演：阿尔·帕西诺,罗伯特·德尼罗,黛安·基顿', 'time': '：1974-12-12(美国)', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/bb1dee5e0b25889a2410211c1d5010ae190824.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '27', 'name': '机器人总动员', 'actor': '主演：本·贝尔特,艾丽莎·奈特,杰夫·格尔林', 'time': '：2008-06-27(美国)', 'score': '9.3', 'post_img': 'https://p0.meituan.net/movie/267dd2483f0fb57081474c00fbea38451415571.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '28', 'name': '指环王1：护戒使者', 'actor': '主演：伊莱贾·伍德,伊恩·麦克莱恩,丽芙·泰勒', 'time': '：2002-04-04', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/dd08154878aac7c8c649fe3eeb8ccd0a2498277.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '29', 'name': '指环王2：双塔奇兵', 'actor': '主演：伊莱贾·伍德,伊恩·麦克莱恩,丽芙·泰勒', 'time': '：2003-04-25', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/02bb9fd161c05bad6089133098efcdb5546589.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '30', 'name': '狮子王', 'actor': '主演：马修·布罗德里克,尼基塔·卡兰姆,詹姆斯·厄尔·琼斯', 'time': '：1995-07-15', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/27b76fe6cf3903f3d74963f70786001e1438406.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '31', 'name': '活着', 'actor': '主演：葛优,巩俐,牛犇', 'time': '：1994-05-18(法国)', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/4c41068ef7608c1d4fbfbe6016e589f7204391.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '32', 'name': '拯救大兵瑞恩', 'actor': '主演：汤姆·汉克斯,马特·达蒙,汤姆·塞兹摩尔', 'time': '：1998-11-13', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/a2a287c77415dc1f85b04d288f7d63ab1089754.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '33', 'name': '盗梦空间', 'actor': '主演：莱昂纳多·迪卡普里奥,渡边谦,约瑟夫·高登-莱维特', 'time': '：2010-09-01', 'score': '9.2', 'post_img': 'https://p1.meituan.net/movie/2f344a9f9575edbcae9f0abe0578bc90339773.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '34', 'name': '哈尔的移动城堡', 'actor': '主演：倍赏千惠子,木村拓哉,美轮明宏', 'time': '：2004-11-20(日本)', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/0127b451d5b8f0679c6f81c8ed414bb2432442.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '35', 'name': '忠犬八公的故事', 'actor': '主演：Forest,理查·基尔,琼·艾伦', 'time': '：2010-03-12(英国)', 'score': '9.3', 'post_img': 'https://p0.meituan.net/movie/7787c10ad5e95b03cf83ef9473500d8e282796.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '36', 'name': '疯狂原始人', 'actor': '主演：尼古拉斯·凯奇,艾玛·斯通,瑞安·雷诺兹', 'time': '：2013-04-20', 'score': '9.5', 'post_img': 'https://p1.meituan.net/movie/bc022b86345c643ca21d759166f77a553679589.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '37', 'name': '搏击俱乐部', 'actor': '主演：爱德华·哈里森·诺顿,布拉德·皮特,海伦娜·伯翰·卡特', 'time': '：1999-10-15(美国)', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/b3defc07dfaa1b6f5b74852ce38a3f8f242792.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '38', 'name': '东邪西毒', 'actor': '主演：张国荣,梁朝伟,刘嘉玲', 'time': '：1994-09-17', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/7e471a9171a410ebc9413b2f1de67afc130067.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '39', 'name': '幽灵公主', 'actor': '主演：松田洋治,石田百合子,田中裕子', 'time': '：1998-05-01', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/a08f65e6cb50fab32df5da69ff116f593095363.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '40', 'name': '阿凡达', 'actor': '主演：萨姆·沃辛顿,佐伊·索尔达娜,米歇尔·罗德里格兹', 'time': '：2010-01-04', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/91f575ec93f019f428d1f33e3ceca7c5115495.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '41', 'name': '风之谷', 'actor': '主演：岛本须美,永井一郎,坂本千夏', 'time': '：1992', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/4f9638ba234c3fb673f23a09968db875371576.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '42', 'name': '十二怒汉', 'actor': '主演：亨利·方达,李·科布,马丁·鲍尔萨姆', 'time': '：1957-04-13(美国)', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/df15efd261060d3094a73ef679888d4f238149.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '43', 'name': 'V字仇杀队', 'actor': '主演：娜塔莉·波特曼,雨果·维文,斯蒂芬·瑞', 'time': '：2006-03-17(美国)', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/06ec3c1c647942b1e40bca84036014e9490863.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '44', 'name': '当幸福来敲门', 'actor': '主演：威尔·史密斯,贾登·史密斯,坦迪·牛顿', 'time': '：2008-01-17', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/5896de3c1474277730e321c9b1db04a9205644.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '45', 'name': '速度与激情5', 'actor': '主演：范·迪塞尔,保罗·沃克,道恩·强森', 'time': '：2011-05-12', 'score': '9.2', 'post_img': 'https://p0.meituan.net/movie/845ce32778a1b3f258de089f91a3979b5766154.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '46', 'name': '驯龙高手', 'actor': '主演：杰伊·巴鲁切尔,杰拉德·巴特勒,亚美莉卡·费雷拉', 'time': '：2010-05-14', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/b0d97e4158b47d653d7a81d66f7dd3092146907.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '47', 'name': '放牛班的春天', 'actor': '主演：热拉尔·朱尼奥,让-巴蒂斯特·莫尼耶,玛丽·布奈尔', 'time': '：2004-10-16', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/70de97ebb6b5251ecb7c3f6d7a782a7f189340.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '48', 'name': '勇敢的心', 'actor': '主演：梅尔·吉布森,苏菲·玛索,帕特里克·麦高汉', 'time': '：1995-05-24(美国)', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/f8e9d5a90224746d15dfdbd53d4fae3d209420.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '49', 'name': '神偷奶爸', 'actor': '主演：史蒂夫·卡瑞尔,杰森·席格尔,拉塞尔·布兰德', 'time': '：2010-07-09(美国)', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/85c2bfba6025bfbfb53291ae5924c215308805.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '50', 'name': '闻香识女人', 'actor': '主演：阿尔·帕西诺,克里斯·奥唐纳,加布里埃尔·安瓦尔', 'time': '：1992-12-23(美国)', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/8d7b0b902afd4ec1a3dd7a9c6149463c187734.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '51', 'name': '飞屋环游记', 'actor': '主演：爱德华·阿斯纳,乔丹·长井,鲍勃·彼德森', 'time': '：2009-08-04', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/47dd790e19dad72b50580641de5608c5199014.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '52', 'name': '怦然心动', 'actor': '主演：玛德琳·卡罗尔,卡兰·麦克奥利菲,艾丹·奎因', 'time': '：2010-08-06(美国)', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/15f1ac49b6d1ff7b71207672993ed6901536456.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '53', 'name': '断背山', 'actor': '主演：希斯·莱杰,杰克·吉伦哈尔,米歇尔·威廉姆斯', 'time': '：2006-01-13(美国)', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/e71affe126eeb4f8bfcc738cbddeebc8288766.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '54', 'name': '三傻大闹宝莱坞', 'actor': '主演：阿米尔·汗,黄渤,卡琳娜·卡普', 'time': '：2011-12-08', 'score': '9.1', 'post_img': 'https://p1.meituan.net/movie/ca4a128a5a54d5b5e35ceba622636c831810197.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '55', 'name': '黑客帝国3：矩阵革命', 'actor': '主演：基努·里维斯,雨果·维文,凯瑞-安·莫斯', 'time': '：2003-11-05', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/2e383b5f5f306f10f9f26d9f1c28cf1d825537.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '56', 'name': '末代皇帝', 'actor': '主演：尊龙,陈冲,彼得·奥图尔', 'time': '：1987-10-23', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/21b9211eb1094af360842472018db634286646.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '57', 'name': '少年派的奇幻漂流', 'actor': '主演：苏拉·沙玛,伊尔凡·可汗,塔布', 'time': '：2012-11-22', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/34998e31c6d07475f1add6b8b16fd21d192579.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '58', 'name': '鬼子来了', 'actor': '主演：姜文,姜宏波,陈强', 'time': '：2000-05-12(法国戛纳)', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/0b507aa44c4dfbbcc91949b69b1b39a168922.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '59', 'name': '大话西游之月光宝盒', 'actor': '主演：周星驰,莫文蔚,吴孟达', 'time': '：2014-10-24', 'score': '9.6', 'post_img': 'https://p0.meituan.net/movie/92eb862c42c49f8e41e459c369c4512b226610.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '60', 'name': '致命魔术', 'actor': '主演：休·杰克曼,克里斯蒂安·贝尔,迈克尔·凯恩', 'time': '：2006-10-20(美国)', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/75c0d3eb584be030a01f2e26741a8f41251454.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '61', 'name': '蝙蝠侠：黑暗骑士崛起', 'actor': '主演：克里斯蒂安·贝尔,迈克尔·凯恩,加里·奥德曼', 'time': '：2012-08-27', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/96bb58f3e9d213fb0438987d16d27561379209.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '62', 'name': '美丽心灵', 'actor': '主演：罗素·克洛,詹妮弗·康纳利,艾德·哈里斯', 'time': '：2001-12-21(美国)', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/7b7d1f8aa36d7a15463ce6942708a1a7265296.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '63', 'name': '哈利·波特与死亡圣器（下）', 'actor': '主演：丹尼尔·雷德克里夫,鲁伯特·格林特,艾玛·沃特森', 'time': '：2011-08-04', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/bb0eca029cd25329776a4549b3fbe262924727.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '64', 'name': '无敌破坏王', 'actor': '主演：约翰·C·赖利,萨拉·西尔弗曼,简·林奇', 'time': '：2012-11-06', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/fcc17667b8343131101eeb4c67d90bf9150883.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '65', 'name': '倩女幽魂', 'actor': '主演：张国荣,王祖贤,午马', 'time': '：2011-04-30', 'score': '9.2', 'post_img': 'https://p1.meituan.net/movie/96d98200d2afb4b87ff189f9c15b6545568339.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '66', 'name': '夜访吸血鬼', 'actor': '主演：汤姆·克鲁斯,布拉德·皮特,克尔斯滕·邓斯特', 'time': '：1994-11-11(美国)', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/7ec873ba943f13e3c63789d899bd0e23256871.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '67', 'name': '钢琴家', 'actor': '主演：艾德里安·布洛迪,艾米莉娅·福克斯,米哈乌·热布罗夫斯基', 'time': '：2002-09-25(法国)', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/484171372de45945e8bbbcc97db57e09136701.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '68', 'name': '本杰明·巴顿奇事', 'actor': '主演：布拉德·皮特,凯特·布兰切特,塔拉吉·P·汉森', 'time': '：2008-12-25(美国)', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/2526f77c650bf7cf3d5ee2dccdeac332244951.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '69', 'name': '甜蜜蜜', 'actor': '主演：黎明,张曼玉,曾志伟', 'time': '：2015-02-13', 'score': '9.2', 'post_img': 'https://p1.meituan.net/movie/0b0d45b58946078dd24d4945dd6be3b51329411.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '70', 'name': '初恋这件小事', 'actor': '主演：马里奥·毛瑞尔,平采娜·乐维瑟派布恩,阿查拉那·阿瑞亚卫考', 'time': '：2012-06-05', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/7ed07b8ea8c0e0d0c7b685d20e3ec64e232004.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '71', 'name': '熔炉', 'actor': '主演：孔刘,郑有美,金智英', 'time': '：2011-09-22(韩国)', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/2a0783b4fd95566568f24adfad2181bb5392280.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '72', 'name': '触不可及', 'actor': '主演：弗朗索瓦·克鲁塞,奥玛·希,安娜·勒尼', 'time': '：2011-11-02(法国)', 'score': '9.1', 'post_img': 'https://p1.meituan.net/movie/1e700e53e4fe29dd5942381bb353c8532239179.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '73', 'name': '新龙门客栈', 'actor': '主演：张曼玉,梁家辉,甄子丹', 'time': '：2012-02-24', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/7833126c8c21a11571bb52fbdece0acb811449.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '74', 'name': '素媛', 'actor': '主演：李来,薛耿求,严志媛', 'time': '：2013-10-02(韩国)', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/19653e8af59cf473cd40f9ccc0658d93692304.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '75', 'name': '小鞋子', 'actor': '主演：默罕默德·阿米尔·纳吉,Kamal Mirkarimi,Behzad Rafi', 'time': '：1999-01-22(美国)', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/135c612860fae899df2220149664d97a173555.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '76', 'name': '大话西游之大圣娶亲', 'actor': '主演：周星驰,朱茵,莫文蔚', 'time': '：2014-10-24', 'score': '8.8', 'post_img': 'https://p1.meituan.net/moviemachine/508056769092059fe43a611b949f27d14863831.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '77', 'name': '萤火之森', 'actor': '主演：内山昂辉,佐仓绫音,后藤弘树', 'time': '：2011-09-17(日本)', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/5420be40e3b755ffe04779b9b199e935256906.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '78', 'name': '教父', 'actor': '主演：马龙·白兰度,阿尔·帕西诺,詹姆斯·肯恩', 'time': '：2015-04-18', 'score': '9.3', 'post_img': 'https://p0.meituan.net/movie/1199dc6273680f175fd9b06c9c36d08a219658.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '79', 'name': '穿条纹睡衣的男孩', 'actor': '主演：阿沙·巴特菲尔德,维拉·法梅加,大卫·休里斯', 'time': '：2008-09-12(英国)', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/d5970e36c8868a4b746c80f3b3f8a404174615.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '80', 'name': '时空恋旅人', 'actor': '主演：瑞秋·麦克亚当斯,多姆纳尔·格里森,比尔·奈伊', 'time': '：2013-09-04(英国)', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/4abc8c932cfacfc0089e2883765d02d1295222.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '81', 'name': '窃听风暴', 'actor': '主演：乌尔里希·穆埃,塞巴斯蒂安·科赫,马蒂娜·格德克', 'time': '：2006-03-23(德国)', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/3985eaf3858bea0f2a3d966bf7ee2103178217.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '82', 'name': '7号房的礼物', 'actor': '主演：柳承龙,郑镇荣,朴信惠', 'time': '：2013-01-23(韩国)', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/6a6e74b2c289f9fa4433dd2dc04a7741331638.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '83', 'name': '恐怖直播', 'actor': '主演：河正宇,李璟荣,李大为', 'time': '：2013-07-31(韩国)', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/b5ff0216e689b3fcc065590c48cd5105255305.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '84', 'name': '海豚湾', 'actor': '主演：里克·奥巴瑞,路易·西霍尤斯,哈迪·琼斯', 'time': '：2009-07-31(美国)', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/7373dbba07b50ce6f24336edb96b2ea4271536.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '85', 'name': '忠犬八公物语', 'actor': '主演：仲代达矢,春川真澄,井川比佐志', 'time': '：1987-08-01(日本)', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/c835b3588d0061ed3b992388a0a96f15160913.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '86', 'name': '上帝之城', 'actor': '主演：亚历桑德雷·罗德里格斯,艾莉丝·布拉加,莱安德鲁·菲尔米诺', 'time': '：2002-08-30(巴西)', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/b553d13f30100db731ab6cf45668e52d94703.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '87', 'name': '美国往事', 'actor': '主演：罗伯特·德尼罗,詹姆斯·伍兹,伊丽莎白·麦戈文', 'time': '：2015-04-23', 'score': '9.1', 'post_img': 'https://p1.meituan.net/movie/92198a6fc8c3f5d13aa1bdf203572c0f99438.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '88', 'name': '完美的世界', 'actor': '主演：凯文·科斯特纳,克林特·伊斯特伍德,T·J·劳瑟', 'time': '：1993-11-24(美国)', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/30310858fdab34c7a17cfd7ec8ad8bfc112201.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '89', 'name': '七武士', 'actor': '主演：三船敏郎,志村乔,千秋实', 'time': '：1954-04-26(日本)', 'score': '9.1', 'post_img': 'https://p1.meituan.net/movie/4ffca83fd972f71e291f8ea8d78a4b58594878.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '90', 'name': '一一', 'actor': '主演：吴念真,金燕玲,李凯莉', 'time': '：2000-09-20(法国)', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/2c0a5fedf4b43d142121b91c6ccabe1b59051.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '91', 'name': '英雄本色', 'actor': '主演：狄龙,张国荣,周润发', 'time': '：2017-11-17', 'score': '9.2', 'post_img': 'https://p0.meituan.net/movie/3e5f5f3aa4b7e5576521e26c2c7c894d253975.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '92', 'name': '阿飞正传', 'actor': '主演：张国荣,张曼玉,刘德华', 'time': '：2018-06-25', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/885fc379c614a2b4175587b95ac98eb95045650.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '93', 'name': '爱·回家', 'actor': '主演：俞承豪,金艺芬,童孝熙', 'time': '：2002-04-05(韩国)', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/36a893c53a13f9bb934071b86ae3b5c492427.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '94', 'name': '海洋', 'actor': '主演：雅克·贝汉,姜文,兰斯洛特·佩林', 'time': '：2011-08-12', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/0018b57299d0d4540330a31244c880a9112971.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '95', 'name': '我爱你', 'actor': '主演：宋在浩,李顺才,尹秀晶', 'time': '：2011-02-17(韩国)', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/ed50b58bf636d207c56989872a91f4cf305138.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '96', 'name': '黄金三镖客', 'actor': '主演：克林特·伊斯特伍德,李·范·克里夫,埃里·瓦拉赫', 'time': '：1966-12-23(意大利)', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/cd18ed2c5cda9e71e17e5e6ef61ced172912303.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '97', 'name': '迁徙的鸟', 'actor': '主演：雅克·贝汉,Philippe Labro', 'time': '：2001-12-12(法国)', 'score': '9.1', 'post_img': 'https://p1.meituan.net/movie/a1634f4e49c8517ae0a3e4adcac6b0dc43994.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '98', 'name': '千与千寻', 'actor': '主演：柊瑠美,周冬雨,入野自由', 'time': '：2019-06-21', 'score': '9.3', 'post_img': 'https://p0.meituan.net/movie/30b20139e68c46d02e0893277d633b701292458.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '99', 'name': '天堂电影院', 'actor': '主演：菲利浦·诺瓦雷,赛尔乔·卡斯特利托,蒂兹亚娜·罗达托', 'time': '：2019-06-15', 'score': '9.2', 'post_img': 'https://p0.meituan.net/movie/76fc92cfa6c8f2959431b8aa604ef7ae126414.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '100', 'name': '龙猫', 'actor': '主演：秦岚,糸井重里,岛本须美', 'time': '：2018-12-14', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/c304c687e287c7c2f9e22cf78257872d277201.jpg@160w_220h_1e_1c'&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实还可以利用其他解析库进行解析，比如Beautiful Soup 4和PyQuery库,这两个库相比正则和Xpath解析轻巧简单，但是相比之下性能会有所牺牲。</p><p> Beautiful Soup 4 解析库对XMl文档的宽容度不好，在当下的互联网环境下，网站结构开发、升级和维护变的很复杂，对于一些不规范的网站而言，解析会由问题，而lxml解决了该问题。另外， Beautiful Soup 4 解析时候会将所有的XMl节点加载到内存中形成DOM树，性能相比正则下降了很多。</p><p>PyQuery解析库，其实语法结构其实就是由JavaScript的JQuery库演变而来的，该库CSS选择器支持性特别好，熟练使用JQuery的朋友也必定会使用该会。</p><p>因为我本人不喜欢用这个Beautiful Soup 4 库，所以不打算深入研究，另外,PyQuery和JQuery操作类似，我在本文也不做累述。若有读者对该库感兴趣可自行研究。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="backend" scheme="http://ltyeamin.github.io/categories/backend/"/>
    
    
      <category term="Python" scheme="http://ltyeamin.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Nginx设置黑白名单</title>
    <link href="http://ltyeamin.github.io/2019/09/02/Nginx%E8%AE%BE%E7%BD%AE%E9%BB%91%E7%99%BD%E5%90%8D%E5%8D%95/"/>
    <id>http://ltyeamin.github.io/2019/09/02/Nginx设置黑白名单/</id>
    <published>2019-09-02T10:15:00.000Z</published>
    <updated>2019-10-12T13:41:30.905Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在日常运维工作中，会碰到这样的需求，对于一些http请求只对某些ip开发，其他的ip的客户端都不能访问。</p><p>在测试之前我列一下本次测试的终端IP。</p><p>宿主机Deepin Linux ： 192.168.1.106</p><p>虚拟机Windows 10 :   192.168.1.107</p><p>移动Android终端机 MIUI10: 192.168.1.100</p><p>Nginx是在Deepin部署的，现在我们启动Nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>1启动后，在宿主机随便访问一个请求(这里是我之前<a href="http://blog.yeamin.top/2018/06/18/%E5%B1%80%E5%9F%9F%E7%BD%91%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E4%B8%8E%E4%B8%8B%E8%BD%BD%E6%9C%8D%E5%8A%A1%E6%96%B0%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener">文章配置</a>的静态图片资源的转发)，比如<a href="http://127.0.0.1或http://192.168.1.106" target="_blank" rel="noopener">http://127.0.0.1或http://192.168.1.106</a></p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180618001/nginx.png" alt="图片列表"></p><p>此外，我们用Android手机和Windows 10虚拟机同样访问<a href="http://192.168.1.106也能访问到，手机和宿主机是同一个路由器，而虚拟机网络是桥接模式。所以是在同一局域网都能够互通。" target="_blank" rel="noopener">http://192.168.1.106也能访问到，手机和宿主机是同一个路由器，而虚拟机网络是桥接模式。所以是在同一局域网都能够互通。</a></p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190902001/Android.jpg" alt="Android显示效果"></p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190902001/Windows10.png" alt="Windows 10 虚拟机效果显示"></p><p>我们让手机无法访问，让虚拟机可以通过。</p><h2 id="利用allow、deny参数进行访问限制"><a href="#利用allow、deny参数进行访问限制" class="headerlink" title="利用allow、deny参数进行访问限制"></a>利用allow、deny参数进行访问限制</h2><ol><li><p>更改nginx.conf。</p> <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">deny</span> <span class="number">192.168.1.100</span>;  <span class="comment">#禁止IP为192.168.1.100访问</span></span><br><span class="line">    <span class="attribute">allow</span> all; <span class="comment"># 除过上述黑名单的限制外，允许其他IP访问</span></span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;             <span class="comment">#开启索引功能  </span></span><br><span class="line">    <span class="attribute">autoindex_exact_size</span> <span class="literal">off</span>; <span class="comment"># 关闭计算文件确切大小（单位bytes），只显示大概大小（单位kb、mb、gb） </span></span><br><span class="line">    <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;   <span class="comment"># 显示本机时间而非 GMT 时间  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>重新加载配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>黑名单限制效果。</p></li></ol><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190902001/deny.jpg" alt="Android限制访问效果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="Nginx" scheme="http://ltyeamin.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Deepin Linux安装Docker</title>
    <link href="http://ltyeamin.github.io/2019/09/01/Deepin%20Linux%E5%AE%89%E8%A3%85Docker/"/>
    <id>http://ltyeamin.github.io/2019/09/01/Deepin Linux安装Docker/</id>
    <published>2019-09-01T04:45:00.000Z</published>
    <updated>2019-09-13T02:55:05.743Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="普通安装"><a href="#普通安装" class="headerlink" title="普通安装"></a>普通安装</h2><p>一般的Linux(Debian、Unbantu)发行版可以执行以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure><p>但是在Deepin执行这命令会安装失败。</p><p>查阅资料可以找到docker支持的Linux发行版。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">x86_64-centos-7</span><br><span class="line">x86_64-fedora-28</span><br><span class="line">x86_64-fedora-29</span><br><span class="line">x86_64-debian-jessie</span><br><span class="line">x86_64-debian-stretch</span><br><span class="line">x86_64-debian-buster</span><br><span class="line">x86_64-ubuntu-trusty</span><br><span class="line">x86_64-ubuntu-xenial</span><br><span class="line">x86_64-ubuntu-bionic</span><br><span class="line">x86_64-ubuntu-cosmic</span><br><span class="line">s390x-ubuntu-xenial</span><br><span class="line">s390x-ubuntu-bionic</span><br><span class="line">s390x-ubuntu-cosmic</span><br><span class="line">ppc64le-ubuntu-xenial</span><br><span class="line">ppc64le-ubuntu-bionic</span><br><span class="line">ppc64le-ubuntu-cosmic</span><br><span class="line">aarch64-ubuntu-xenial</span><br><span class="line">aarch64-ubuntu-bionic</span><br><span class="line">aarch64-ubuntu-cosmic</span><br><span class="line">aarch64-debian-jessie</span><br><span class="line">aarch64-debian-stretch</span><br><span class="line">aarch64-debian-buster</span><br><span class="line">aarch64-fedora-28</span><br><span class="line">aarch64-fedora-29</span><br><span class="line">aarch64-centos-7</span><br><span class="line">armv6l-raspbian-jessie</span><br><span class="line">armv7l-raspbian-jessie</span><br><span class="line">armv6l-raspbian-stretch</span><br><span class="line">armv7l-raspbian-stretch</span><br><span class="line">armv7l-debian-jessie</span><br><span class="line">armv7l-debian-stretch</span><br><span class="line">armv7l-debian-buster</span><br><span class="line">armv7l-ubuntu-trusty</span><br><span class="line">armv7l-ubuntu-xenial</span><br><span class="line">armv7l-ubuntu-bionic</span><br><span class="line">armv7l-ubuntu-cosmic</span><br></pre></td></tr></table></figure><p>查看了我的系统的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">litong@LT:~$ cat /etc/issue</span><br><span class="line">Deepin GNU/Linux 15.10.2 \n \l</span><br><span class="line">litong@LT:~$ cat /etc/debian_version </span><br><span class="line">9.0</span><br><span class="line">litong@LT:~$ uname -r</span><br><span class="line">4.15.0-29deepin-generic</span><br></pre></td></tr></table></figure><p>这里我的系统是Deepin 15.10.2，而我的Deepin Linux是基于Debian 9.0，即上述的版本x86_64-debian-stretch进行的深度开发，我系统Debian 9.0是sid版的，并不是release版本，所以不是docker官方认证的stable版本，故不支持Deepin Linux。</p><h2 id="Deepin上安装Docker"><a href="#Deepin上安装Docker" class="headerlink" title="Deepin上安装Docker"></a>Deepin上安装Docker</h2><ol><li><p>若以前安装过旧版本则先卸载旧版本，如没有安装过，则跳过；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker.io docker-engine</span><br></pre></td></tr></table></figure></li><li><p>安装docker-ce与密钥管理与下载相关依赖工具；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl python-software-properties software-properties-common</span><br></pre></td></tr></table></figure></li><li><p>下载并安装密匙并验证秘钥，若成功则返回OK；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>如果不成功（docker官方在墙外，需科学上网），则使用国内镜像源将上述命令换成 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/debian/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure></li><li><p>验证秘钥是否安装成功；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">litong@LT:~$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">[sudo] litong 的密码：</span><br><span class="line">pub   rsa4096 2017-02-22 [SCEA]</span><br><span class="line">      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88</span><br><span class="line">uid           [ 未知 ] Docker Release (CE deb) &lt;docker@docker.com&gt;</span><br><span class="line">sub   rsa4096 2017-02-22 [S]</span><br></pre></td></tr></table></figure></li><li><p>安装docker-ce组件；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure></li><li><p>测试是否安装成功；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">litong@LT:~$ docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.2</span><br><span class="line"> API version:       1.40</span><br><span class="line"> Go version:        go1.12.8</span><br><span class="line"> Git commit:        6a30dfca03</span><br><span class="line"> Built:             Thu Aug 29 05:29:49 2019</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          19.03.2</span><br><span class="line">  API version:      1.40 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.12.8</span><br><span class="line">  Git commit:       6a30dfca03</span><br><span class="line">  Built:            Thu Aug 29 05:28:23 2019</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.2.6</span><br><span class="line">  GitCommit:        894b81a4b802e4eb2a91d1ce216b8817763c29fb</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc8</span><br><span class="line">  GitCommit:        425e105d5a03fabd737a126ad93d62a9eeede87f</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.18.0</span><br><span class="line">  GitCommit:        fec3683</span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>普通用户运行docker</p><p>安装docker完成后，普通用户执行docker命令时候，有可能会出现错误提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Got permission denied <span class="keyword">while</span> trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.26/images/json: dial unix /var/run/docker.sock: connect: permission denied</span><br></pre></td></tr></table></figure><p>通过查阅资料，在docker mannual找到解决思路：</p><blockquote><p>Manage Docker as a non-root user<br>The docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root and other users can only access it using sudo. The docker daemon always runs as the root user.<br>If you don’t want to use sudo when you use the docker command, create a Unix group called docker and add users to it. When the docker daemon starts, it makes the ownership of the Unix socket read/writable by the docker group.</p></blockquote><p>大概翻译了一下，意思是：Docker进程使用Unix Socket而不是TCP端口。而默认情况下，Unix socket属于root用户，需要root权限才能访问。</p><p>解决方案：</p><p>docker守护进程启动的时候，会默认赋予名字为docker的用户组读写Unix socket的权限，因此只要创建docker用户组，并将当前用户加入到docker用户组中，那么当前用户就有权限访问Unix socket了，进而也就可以执行docker相关命令。</p><ol><li><p>添加docker用户组，若已由docker组则跳过；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br></pre></td></tr></table></figure></li><li><p>将登陆用户加入到docker用户组中；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -a <span class="variable">$USER</span> docker</span><br></pre></td></tr></table></figure></li><li><p>更新用户组；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newgrp docker</span><br></pre></td></tr></table></figure></li><li><p>测试docker命令是否可以使用sudo正常使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="8"><li><p>使用阿里云docker镜像加速</p><ol><li><p>进入<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/repositories" target="_blank" rel="noopener">阿里云控制台</a>，选择容器镜像服务，左边菜单最下方的镜像中心-镜像加速器；</p></li><li><p>根据阿里云操作文档选择不同系统的镜像加速命令；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"替换你的加速器地址"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="Docker" scheme="http://ltyeamin.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>百度网盘破速解决</title>
    <link href="http://ltyeamin.github.io/2019/08/11/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%A0%B4%E9%80%9F%E8%A7%A3%E5%86%B3/"/>
    <id>http://ltyeamin.github.io/2019/08/11/百度网盘破速解决/</id>
    <published>2019-08-11T14:22:13.000Z</published>
    <updated>2019-10-12T12:52:36.256Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天在家下载一个别人给我的百度网盘资料，资料大小差不多2个G,但是打开浏览器发现有一件是非常烦躁的事情:小文件可以直接在浏览器端进行下载,但是大文件必须下载百度网盘客户端进行下载.</p><p>没办法,我只好去应用商店去下载百度网盘客户端,在深度应用商店还好找到了<a href="https://dstore-appstore.deepin.cn/china/category/internet/baidunetdisk" target="_blank" rel="noopener">百度网盘</a>的客户端(国产Deepin系统第三方软件源还是比较给力)。紧接着我就在客户端端登录下载,如下图:</p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190811001/web.png" alt="百度网盘客户端"></p><p>用了客户端之后发现,下载速度特别慢,于是在网上找到一些解决方案:浏览器插件+第三方网络下载工具(Motrix/Aria2)进行下载.我这里采用Motrix方式,Aria2的方式读者可自行研究安装与使用。</p><h2 id="安装与设置"><a href="#安装与设置" class="headerlink" title="安装与设置"></a>安装与设置</h2><ol><li>安装浏览器插件<ol><li>Motrix:在Chrome浏览器应用商店搜索百度网盘助手并下载安装。</li><li>Aria2: 在Chrome浏览器应用商店搜索YAAW for Chrome并下载安装。</li></ol></li><li>网络下载工具安装<ol><li>Motrix: <a href="https://motrix.app/" target="_blank" rel="noopener">下载地址</a></li><li>Aria2:<a href="https://aria2.github.io/" target="_blank" rel="noopener">下载地址</a></li></ol></li></ol><h2 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h2><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190811001/01.png" alt="百度网盘Web网页"></p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190811001/motrix.png" alt="Motrix下载"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由上可知,百度云网盘确实做了网速限制。虽然通过第三方下载工具提升了一些下载速度,但是下载还是有点慢，这个其实可以理解的，因为当下的网络是长城宽带，慢也是正常的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="实用工具及技巧" scheme="http://ltyeamin.github.io/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>魔都上海</title>
    <link href="http://ltyeamin.github.io/2019/06/09/%E9%AD%94%E9%83%BD%E4%B8%8A%E6%B5%B7/"/>
    <id>http://ltyeamin.github.io/2019/06/09/魔都上海/</id>
    <published>2019-06-09T04:57:10.000Z</published>
    <updated>2019-10-12T12:52:35.733Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="上海宣传片"><a href="#上海宣传片" class="headerlink" title="上海宣传片"></a>上海宣传片</h2><p><link class="dplayer-css" rel="stylesheet" href="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.css"></p><script src="https://www.zhyong.cn/assets/js/DPlayer.min.js"></script><div id="dplayer0"></div><br><br><br><div id="dplayer1"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script><script>const dp0 = new DPlayer({    container: document.getElementById('dplayer0'),    screenshot: true,    video: {        url: 'http://pz9h1gr1x.bkt.clouddn.com/videos/lvyou/shanghai2.mp4'    },    subtitle: {        url: 'webvtt.vtt'    },    danmaku: {        id: 'demo',        api: 'https://api.prprpr.me/dplayer/'    }});const dp1 = new DPlayer({    container: document.getElementById('dplayer1'),    screenshot: true,    video: {        url: 'http://pz9h1gr1x.bkt.clouddn.com/videos/lvyou/shanghai1.mp4'    },    subtitle: {        url: 'webvtt.vtt'    },    danmaku: {        id: 'demo',        api: 'https://api.prprpr.me/dplayer/'    }});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="others" scheme="http://ltyeamin.github.io/categories/others/"/>
    
    
      <category term="自媒体" scheme="http://ltyeamin.github.io/tags/%E8%87%AA%E5%AA%92%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>Samba服务器搭建</title>
    <link href="http://ltyeamin.github.io/2019/06/08/Samba%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <id>http://ltyeamin.github.io/2019/06/08/Samba服务器搭建/</id>
    <published>2019-06-08T07:17:23.000Z</published>
    <updated>2019-10-12T12:52:35.868Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><br><br>    <iframe src="http://pz9h1gr1x.bkt.clouddn.com/pdfs/doc/20190608001/samba%E6%95%99%E7%A8%8B.pdf" style="width:100%;height:1050px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen> </iframe> <div style="margin-bottom:5px"><br><br></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="Samba" scheme="http://ltyeamin.github.io/tags/Samba/"/>
    
  </entry>
  
  <entry>
    <title>记录一次Maven中配置文件尾回车换行引发的问题</title>
    <link href="http://ltyeamin.github.io/2019/06/04/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Maven%E4%B8%AD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B0%BE%E5%9B%9E%E8%BD%A6%E6%8D%A2%E8%A1%8C%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://ltyeamin.github.io/2019/06/04/记录一次Maven中配置文件尾回车换行引发的问题/</id>
    <published>2019-06-04T14:22:13.000Z</published>
    <updated>2019-10-12T12:52:39.775Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>今天打开IDEA加载项目时，发现一个很诡异的问题：项目依赖及代码没任何问题，Maven依赖检测红色波浪线依旧存在。虽说项目依旧能跑起来不影响开发，但是maven命令操作用不了。</p><p>遇到问题后，我大吃一惊。昨天看项目还好好的，今天就报出某个项目一个依赖包找不到。可实际上。该依赖包在本地库是存在的。于是，我删掉了依赖包，重新远程仓库下载。</p><p>私服和中央仓库切换好几次，重新下载的依赖包都是完整没问题的。同样Maven的Clean或Install搭配使用多次，这让我更加郁闷，寻找着解决方案。</p><h2 id="问题排查与解决"><a href="#问题排查与解决" class="headerlink" title="问题排查与解决"></a>问题排查与解决</h2><h3 id="解决一"><a href="#解决一" class="headerlink" title="解决一"></a>解决一</h3><p>在项目中的pom.xml文件里把红色波浪线的依赖线注释掉，然后重新加载之后，就不会出现。</p><p>然后撤销注释，然后加载就OK了，网上上说这是IDEA开发工具的BUG，这谁晓得，先这样干吧。</p><h3 id="解决二"><a href="#解决二" class="headerlink" title="解决二"></a>解决二</h3><p>解决一虽然解决了依赖找不到红色波浪线问题，但还是预留一些问题，那就是Maven的基本命令操作用不了。比如我使用了mvn clean进行操作，控制台则报出一段日志:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\applications\develop\JDK8\bin\java.exe -Dmaven.multiModuleProjectDirectory=E:\work\code\cashloan-api -Dmaven.home=D:\applications\develop\apache-maven-3.6.1 -Dclassworlds.conf=D:\applications\develop\apache-maven-3.6.1\bin\m2.conf <span class="string">"-javaagent:D:\applications\develop\IntelliJ IDEA 2019.1.3\lib\idea_rt.jar=57134:D:\applications\develop\IntelliJ IDEA 2019.1.3\bin"</span> -Dfile.encoding=UTF-8 -classpath D:\applications\develop\apache-maven-3.6.1\boot\plexus-classworlds-2.6.0.jar org.codehaus.classworlds.Launcher -Didea.version2019.1.3 -s D:\applications\develop\apache-maven-3.6.1\conf\settings.xml -Dmaven.repo.local=D:\applications\develop\apache-maven-3.6.1\repo install</span><br><span class="line">[ERROR] Error executing Maven.</span><br><span class="line">[ERROR] 2 problems were encountered <span class="keyword">while</span> building the effective settings</span><br><span class="line">[FATAL] Non-parseable settings D:\applications\develop\apache-maven-3.6.1\conf\settings.xml: <span class="keyword">in</span> epilog non whitespace content is not allowed but got j (position: END_TAG seen ...&lt;/settings&gt;\n\nj... @300:2)  @ D:\applications\develop\apache-maven-3.6.1\conf\settings.xml, line 300, column 2</span><br><span class="line">[FATAL] Non-parseable settings D:\applications\develop\apache-maven-3.6.1\conf\settings.xml: <span class="keyword">in</span> epilog non whitespace content is not allowed but got j (position: END_TAG seen ...&lt;/settings&gt;\n\nj... @300:2)  @ D:\applications\develop\apache-maven-3.6.1\conf\settings.xml, line 300, column 2</span><br></pre></td></tr></table></figure><p>通过日志我觉得Maven的配置文件settings.xml有问题，第300行第2列有疑惑。</p><p>我打开settings.xmls文件，没有300行，查看好像并没有什么问题，但是仔细阅读日志END_TAG seen …\n\nj… @300:2，这个让我有所启示，猜测是换行的问题。</p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190604001/logs.png" alt="clean后的报错日志"></p><p>What？xml文件尾不能有回车换行，我不信这个邪，我就去试试。</p><p>试了以后，才知道真的是这个问题。该死，想了一下，自己今天早上改动过配置文件，可能在保存之前敲了回车，真是该死！！！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有坑不重要，重要的是如何去填坑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="backend" scheme="http://ltyeamin.github.io/categories/backend/"/>
    
    
      <category term="Maven" scheme="http://ltyeamin.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Windows搜索利器</title>
    <link href="http://ltyeamin.github.io/2019/06/03/Windows%E6%90%9C%E7%B4%A2%E5%88%A9%E5%99%A8/"/>
    <id>http://ltyeamin.github.io/2019/06/03/Windows搜索利器/</id>
    <published>2019-06-03T14:22:13.000Z</published>
    <updated>2019-10-12T12:52:40.591Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>前几周忙于换工作，博客没有太多的更新。今天刚好入职新公司的第一天，办公电脑是台式DELL+Intel i5七代(四核四线程，主频3.1HZ，睿频3.6HZ)+8G DDR4。笔者前公司办公环境是Mac Pro + Mac OS X 10，家里日常环境是联想Lenovo+Deepin Linux。可以说已经一年多没接触Windows系统了，现在使用起来多少有些不习惯，主要是各个操作系统操作理念不同。</p><p>我几乎每天都在使用计算机进行工作和个人生活，那么我可能会在计算机上拥有大量文件，照片，文件夹，文档和其他数据。如果找到一个特定的文件是非常痛苦的。幸运的是，Mac中的Spotlight模式可让我在Mac上搜索几乎任何内容，从而轻松找到您需要的任何内容。如下图：</p><p><img src="https://support.apple.com/library/content/dam/edam/applecare/images/zh_CN/macos/highsierra/macos-high-sierra-spotlight-search-results-weather.jpg" alt="Spotlight"></p><p>正是因为习惯了在Mac OS X通过Spotlight模式进行搜索应用、文件，所以今天装机的时候找了一下Windows的替代方案。</p><h2 id="文件搜索神器-Everything"><a href="#文件搜索神器-Everything" class="headerlink" title="文件搜索神器-Everything"></a>文件搜索神器-Everything</h2><h3 id="基本简介"><a href="#基本简介" class="headerlink" title="基本简介"></a>基本简介</h3><p>基于名称快速定位文件和文件夹。</p><ul><li>轻量安装文件</li><li>干净简洁的用户界面</li><li>快速文件索引</li><li>快速搜索</li><li>最小资源使用</li><li>便于文件分享</li><li>实时更新</li><li><a href="https://www.voidtools.com/zh-cn/faq" target="_blank" rel="noopener">更多…</a></li></ul><p><a href="https://www.voidtools.com/zh-cn/" target="_blank" rel="noopener">中文官网</a></p><p><a href="https://www.voidtools.com/Everything-1.4.1.935.x64.zip" target="_blank" rel="noopener">下载地址</a></p><p><a href="https://www.voidtools.com/zh-cn/support/everything/" target="_blank" rel="noopener">中文文档</a></p><h3 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h3><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190603001/everything.png" alt="Everything搜索文件夹或文件"></p><h2 id="Spotlight快速检索替代方案-Wox"><a href="#Spotlight快速检索替代方案-Wox" class="headerlink" title="Spotlight快速检索替代方案-Wox"></a>Spotlight快速检索替代方案-Wox</h2><h3 id="基本简介-1"><a href="#基本简介-1" class="headerlink" title="基本简介"></a>基本简介</h3><p>Wox是一款国产开源免费的软件快捷启动工具，它可以快速搜索并打开你电脑上的程序、文件、查词翻译、网站查找等其他操作，同时还支持插件安装。</p><p>Tips: 如果你需要用到文件的快速搜索、打开功能，需要预先安装<a href="https://www.voidtools.com/Everything-1.4.1.935.x64.zip" target="_blank" rel="noopener">Everything</a>。</p><p><a href="http://www.wox.one/" target="_blank" rel="noopener">官网</a></p><p><a href="https://github.com/Wox-launcher/Wox/releases" target="_blank" rel="noopener">下载地址</a></p><p><a href="http://doc.wox.one/zh/" target="_blank" rel="noopener">中文文档</a></p><p><a href="https://github.com/Wox-launcher/Wox" target="_blank" rel="noopener">Github地址</a></p><h3 id="使用体验-1"><a href="#使用体验-1" class="headerlink" title="使用体验"></a>使用体验</h3><h4 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h4><p>快捷键启动按下【<strong>Alt+Space</strong>】即可，可以在setting里设置。我设置的快捷键设置为【<strong>Ctrl+Space</strong>】,和Mac快捷键保持一致。</p><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>刚刚使用Wox的用户，常常会找不到Wox的设置页面。目前，用户有两种方式打开设置界面：</p><ul><li>通过<code>setting</code>命令（<strong>推荐</strong>）。如下图所示，直接输入<code>setting</code>然后选择第一项；<img src="http://doc.wox.one/zh/basic/images/how_to_open_setting1.png" alt="命令设置"></li><li>通过右键托盘图标。</li></ul><p>在setting里，可以设置主题、窗口设置、快捷键设置、搜索设置、插件设置，读者可根据自身需求进行相应的设置即可。</p><h4 id="应用搜索"><a href="#应用搜索" class="headerlink" title="应用搜索"></a>应用搜索</h4><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190603001/app.png" alt="应用搜索"></p><h4 id="浏览器搜索"><a href="#浏览器搜索" class="headerlink" title="浏览器搜索"></a>浏览器搜索</h4><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190603001/google.png" alt="Google Search"></p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190603001/bd.png" alt="Baidu Search"></p><h4 id="命令终端执行"><a href="#命令终端执行" class="headerlink" title="命令终端执行"></a>命令终端执行</h4><p>替换Windows的命令终端，替换Windows键+R键。</p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190603001/cmd.png" alt="cmd"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="实用工具及技巧" scheme="http://ltyeamin.github.io/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud-Feign使用时获取apollo配置失败问题</title>
    <link href="http://ltyeamin.github.io/2019/05/28/Spring%20Cloud-Feign%E4%BD%BF%E7%94%A8%E6%97%B6%E8%8E%B7%E5%8F%96apollo%E9%85%8D%E7%BD%AE%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
    <id>http://ltyeamin.github.io/2019/05/28/Spring Cloud-Feign使用时获取apollo配置失败问题/</id>
    <published>2019-05-28T01:27:55.000Z</published>
    <updated>2019-05-29T14:03:53.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>今天发现一个很诡异的事情，就是本地写死的FeignClient的url属性配置进行feign调用没问题，但是把配置迁移到Ctrip Apollo配置中心feign调用就有问题。</p><h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(url = <span class="string">"$&#123;api.service.baseUrl&#125;"</span>,name = <span class="string">"sms-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SmsClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信验证码,4位数字,5分钟有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"xxxx/xxxxx"</span>)</span><br><span class="line">   <span class="function">ApiResult&lt;String&gt; <span class="title">sendSmsVerifyCode</span><span class="params">(String xxx, Integer xxx)</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验短信验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"xxxx/xxxxx"</span>)</span><br><span class="line">    <span class="function">ApiResult&lt;String&gt; <span class="title">checkSmsVerifyCode</span><span class="params">(String xxx, Integer codeType,  String xxx)</span> </span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="报错日志"><a href="#报错日志" class="headerlink" title="报错日志"></a>报错日志</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">feign.RetryableException: $&#123;api.service.baseUrl&#125; executing POST http:<span class="comment">//$&#123;api.service.baseUrl&#125;/xxx/xxx?xxx=18800009999&amp;xxx=8</span></span><br><span class="line">at feign.FeignException.errorExecuting(FeignException.java:<span class="number">65</span>)</span><br><span class="line">at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:<span class="number">105</span>)</span><br><span class="line">at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:<span class="number">77</span>)</span><br><span class="line">at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:<span class="number">102</span>)</span><br><span class="line">at com.sun.proxy.$Proxy148.sendSmsVerifyCode(Unknown Source)</span><br><span class="line">at com.yimi.darwin.biz.open.copartner.service.impl.SmsServiceImpl.sendVerifyCode(SmsServiceImpl.java:<span class="number">33</span>)</span><br><span class="line">at com.yimi.darwin.biz.open.copartner.controller.SmsController.sendVerifyCode(SmsController.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:<span class="number">209</span>)</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:<span class="number">136</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:<span class="number">102</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:<span class="number">891</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:<span class="number">797</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:<span class="number">87</span>)</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:<span class="number">991</span>)</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:<span class="number">925</span>)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:<span class="number">974</span>)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:<span class="number">877</span>)</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">665</span>)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:<span class="number">851</span>)</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">750</span>)</span><br><span class="line">at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:<span class="number">74</span>)</span><br><span class="line">at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:<span class="number">129</span>)</span><br><span class="line">at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:<span class="number">90</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>)</span><br><span class="line">at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:<span class="number">61</span>)</span><br><span class="line">at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:<span class="number">131</span>)</span><br><span class="line">at com.yimi.tools.filter.RequestAndResponseLoggingFilter.doFilterWrapped(RequestAndResponseLoggingFilter.java:<span class="number">55</span>)</span><br><span class="line">at com.yimi.tools.filter.RequestAndResponseLoggingFilter.doFilterInternal(RequestAndResponseLoggingFilter.java:<span class="number">47</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>)</span><br><span class="line">at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:<span class="number">61</span>)</span><br><span class="line">at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:<span class="number">131</span>)</span><br><span class="line">at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:<span class="number">99</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>)</span><br><span class="line">at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:<span class="number">61</span>)</span><br><span class="line">at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:<span class="number">131</span>)</span><br><span class="line">at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:<span class="number">109</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>)</span><br><span class="line">at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:<span class="number">61</span>)</span><br><span class="line">at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:<span class="number">131</span>)</span><br><span class="line">at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:<span class="number">93</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>)</span><br><span class="line">at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:<span class="number">61</span>)</span><br><span class="line">at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:<span class="number">131</span>)</span><br><span class="line">at org.springframework.cloud.sleuth.instrument.web.ExceptionLoggingFilter.doFilter(ExceptionLoggingFilter.java:<span class="number">48</span>)</span><br><span class="line">at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:<span class="number">61</span>)</span><br><span class="line">at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:<span class="number">131</span>)</span><br><span class="line">at brave.servlet.TracingFilter.doFilter(TracingFilter.java:<span class="number">86</span>)</span><br><span class="line">at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:<span class="number">61</span>)</span><br><span class="line">at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:<span class="number">131</span>)</span><br><span class="line">at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:<span class="number">155</span>)</span><br><span class="line">at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:<span class="number">123</span>)</span><br><span class="line">at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:<span class="number">108</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>)</span><br><span class="line">at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:<span class="number">61</span>)</span><br><span class="line">at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:<span class="number">131</span>)</span><br><span class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:<span class="number">200</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>)</span><br><span class="line">at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:<span class="number">61</span>)</span><br><span class="line">at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:<span class="number">131</span>)</span><br><span class="line">at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:<span class="number">84</span>)</span><br><span class="line">at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:<span class="number">62</span>)</span><br><span class="line">at io.undertow.servlet.handlers.ServletChain$<span class="number">1</span>.handleRequest(ServletChain.java:<span class="number">65</span>)</span><br><span class="line">at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:<span class="number">36</span>)</span><br><span class="line">at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:<span class="number">132</span>)</span><br><span class="line">at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:<span class="number">57</span>)</span><br><span class="line">at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:<span class="number">43</span>)</span><br><span class="line">at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:<span class="number">46</span>)</span><br><span class="line">at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:<span class="number">64</span>)</span><br><span class="line">at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:<span class="number">60</span>)</span><br><span class="line">at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:<span class="number">77</span>)</span><br><span class="line">at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:<span class="number">43</span>)</span><br><span class="line">at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:<span class="number">43</span>)</span><br><span class="line">at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:<span class="number">43</span>)</span><br><span class="line">at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:<span class="number">292</span>)</span><br><span class="line">at io.undertow.servlet.handlers.ServletInitialHandler.access$<span class="number">100</span>(ServletInitialHandler.java:<span class="number">81</span>)</span><br><span class="line">at io.undertow.servlet.handlers.ServletInitialHandler$<span class="number">2</span>.call(ServletInitialHandler.java:<span class="number">138</span>)</span><br><span class="line">at io.undertow.servlet.handlers.ServletInitialHandler$<span class="number">2</span>.call(ServletInitialHandler.java:<span class="number">135</span>)</span><br><span class="line">at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$<span class="number">1</span>.call(ServletRequestContextThreadSetupAction.java:<span class="number">48</span>)</span><br><span class="line">at io.undertow.servlet.core.ContextClassLoaderSetupAction$<span class="number">1</span>.call(ContextClassLoaderSetupAction.java:<span class="number">43</span>)</span><br><span class="line">at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:<span class="number">272</span>)</span><br><span class="line">at io.undertow.servlet.handlers.ServletInitialHandler.access$<span class="number">000</span>(ServletInitialHandler.java:<span class="number">81</span>)</span><br><span class="line">at io.undertow.servlet.handlers.ServletInitialHandler$<span class="number">1</span>.handleRequest(ServletInitialHandler.java:<span class="number">104</span>)</span><br><span class="line">at io.undertow.server.Connectors.executeRootHandler(Connectors.java:<span class="number">336</span>)</span><br><span class="line">at io.undertow.server.HttpServerExchange$<span class="number">1</span>.run(HttpServerExchange.java:<span class="number">830</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line">Caused by: java.net.UnknownHostException: $&#123;api.service.baseUrl&#125;</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:<span class="number">184</span>)</span><br><span class="line">at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:<span class="number">392</span>)</span><br><span class="line">at java.net.Socket.connect(Socket.java:<span class="number">589</span>)</span><br><span class="line">at sun.net.NetworkClient.doConnect(NetworkClient.java:<span class="number">175</span>)</span><br><span class="line">at sun.net.www.http.HttpClient.openServer(HttpClient.java:<span class="number">463</span>)</span><br><span class="line">at sun.net.www.http.HttpClient.openServer(HttpClient.java:<span class="number">558</span>)</span><br><span class="line">at sun.net.www.http.HttpClient.&lt;init&gt;(HttpClient.java:<span class="number">242</span>)</span><br><span class="line">at sun.net.www.http.HttpClient.New(HttpClient.java:<span class="number">339</span>)</span><br><span class="line">at sun.net.www.http.HttpClient.New(HttpClient.java:<span class="number">357</span>)</span><br><span class="line">at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:<span class="number">1220</span>)</span><br><span class="line">at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:<span class="number">1156</span>)</span><br><span class="line">at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:<span class="number">1050</span>)</span><br><span class="line">at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:<span class="number">984</span>)</span><br><span class="line">at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:<span class="number">1564</span>)</span><br><span class="line">at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:<span class="number">1492</span>)</span><br><span class="line">at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:<span class="number">480</span>)</span><br><span class="line">at feign.Client$Default.convertResponse(Client.java:<span class="number">150</span>)</span><br><span class="line">at feign.Client$Default.execute(Client.java:<span class="number">72</span>)</span><br><span class="line">at org.springframework.cloud.sleuth.instrument.web.client.feign.TracingFeignClient.execute(TracingFeignClient.java:<span class="number">91</span>)</span><br><span class="line">at org.springframework.cloud.sleuth.instrument.web.client.feign.LazyTracingFeignClient.execute(LazyTracingFeignClient.java:<span class="number">55</span>)</span><br><span class="line">at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:<span class="number">98</span>)</span><br><span class="line">... <span class="number">89</span> common frames omitted</span><br></pre></td></tr></table></figure><h2 id="问题分析与解决"><a href="#问题分析与解决" class="headerlink" title="问题分析与解决"></a>问题分析与解决</h2><p>我们从报错日志发现，api.service.baseUrl这个配置注入失败。</p><p>我为了验证，专门写一个测试接口，查看配置到底有没有加载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;api.service.baseUrl&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/url"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过调用localhost:8301/url，接口响应了结果：<a href="https://xxx.com/" target="_blank" rel="noopener">https://xxx.com/</a>,</p><p>此时，我们发现，项目中api.service.baseUrl却能拿到值，说明整个项目配置是OK的。</p><p>紧接着我们去apollo官方的github上找答案，也是在官方<a href="https://github.com/ctripcorp/apollo/issues?page=1&amp;q=is%3Aissue+is%3Aopen" target="_blank" rel="noopener">issue</a>和<a href="https://github.com/ctripcorp/apollo/wiki/Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97#3213-spring-boot%E9%9B%86%E6%88%90%E6%96%B9%E5%BC%8F%E6%8E%A8%E8%8D%90" target="_blank" rel="noopener">wiki</a>找到答案的。</p><p>当项目启动时候，会扫描@FeignClient注解，扫描的过程中，会注入url的值。但此时apollo配置是在Feign扫描后加载的，其实解决方案就是让apollo先于feign的扫描加载，即apollo配置饥饿加载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># will inject &apos;application&apos; namespace in bootstrap phase</span><br><span class="line">apollo.bootstrap.enabled = true</span><br><span class="line"># put apollo initialization before logging system initialization</span><br><span class="line">apollo.bootstrap.eagerLoad.enabled=true</span><br></pre></td></tr></table></figure><blockquote><p>Spring Boot除了支持上述两种集成方式以外，还支持通过application.properties/bootstrap.properties来配置，该方式能使配置在更早的阶段注入，比如使用@ConditionalOnProperty的场景或者是有一些spring-boot-starter在启动阶段就需要读取配置做一些事情（如dubbo-spring-boot-project），所以对于Spring Boot环境建议通过以下方式来接入Apollo(需要0.10.0及以上版本）。<br> 从1.2.0版本开始，如果希望把日志相关的配置（如logging.level.root=info或logback-spring.xml中的参数）也放在Apollo管理，那么可以额外配置apollo.bootstrap.eagerLoad.enabled=true来使Apollo的加载顺序放到日志系统加载之前，不过这会导致Apollo的启动过程无法通过日志的方式输出(因为执行Apollo加载的时候，日志系统压根没有准备好呢！所以在Apollo代码中使用Slf4j的日志输出便没有任何内容)，更多信息可以参考PR 1614。参考配置示例如下：<br> # will inject ‘application’ namespace in bootstrap phase<br> apollo.bootstrap.enabled = true<br> # put apollo initialization before logging system initialization<br> apollo.bootstrap.eagerLoad.enabled=true</p></blockquote><p>值得注意的是，如果您的apollo client依赖版本是1.1.0及以下的，加了以上的配置，发现是没有用的。我们可以尝试手动去加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ctrip.framework.apollo.ConfigService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientUrlConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.initSet(<span class="string">"此处写你需要提前初始化的key"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSet</span><span class="params">(String... keys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            String val = ConfigService.getAppConfig().getProperty(key, <span class="keyword">null</span>);</span><br><span class="line">            System.setProperty(key, val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>SpringApplication.run()</code> 之前加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">new</span> ClientUrlConfig().init();</span><br><span class="line">       SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手动加载后，我们就可以正常使用 ${api.service.baseUrl}进行加载以及Feign调用了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="backend" scheme="http://ltyeamin.github.io/categories/backend/"/>
    
    
      <category term="Spring Cloud" scheme="http://ltyeamin.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>聊聊Java锁的那些事</title>
    <link href="http://ltyeamin.github.io/2019/04/02/%E8%81%8A%E8%81%8AJava%E9%94%81%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://ltyeamin.github.io/2019/04/02/聊聊Java锁的那些事/</id>
    <published>2019-04-02T13:12:49.000Z</published>
    <updated>2019-05-29T14:03:52.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>昨天我们学习了HashMap相关的源码，本来打算今天写ConcurrentHashMap源码分析，但是ConcurrentHashMap涉及到一些锁的概念，所以我觉得越是底层的东西，越是要好好研究一番，今天趁此机会好好的系统学习一下。</p><p>那么今天就来聊聊Java锁的那些事情。Java为我们提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率。本文旨在对锁相关源码（本文中的源码来自JDK 8和Netty 3.10.6）、使用场景进行举例，为读者介绍主流锁的知识点，以及不同的锁的适用场景。</p><p>Java中往往是按照是否含有某一特性来定义锁，我们通过特性将锁进行分组归类，再使用对比的方式进行介绍，帮助大家更快捷的理解相关知识。下面给出本文内容的总体分类目录：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/7f749fc8.png" alt="Java主流锁"></p><h2 id="乐观锁-VS-悲观锁"><a href="#乐观锁-VS-悲观锁" class="headerlink" title="乐观锁 VS 悲观锁"></a>乐观锁 VS 悲观锁</h2><p>乐观锁与悲观锁是一种广义上的概念，体现了看待线程同步的不同角度。在Java和数据库中都有此概念对应的实际应用。</p><p>先说概念。对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据(比较悲观)，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁。</p><p>而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。</p><p>乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/c8703cd9.png" alt="悲观锁与乐观锁"></p><p>根据从上面的概念描述我们可以发现：</p><ul><li>悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。</li><li>乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。</li></ul><p>只说概念有些抽象，我们来看下乐观锁和悲观锁的调用方式示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ------------------------- 悲观锁的调用方式 -------------------------</span></span><br><span class="line"><span class="comment">// synchronized</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">synchronized</span> &#123;</span><br><span class="line">     <span class="comment">// 操作同步资源</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ReentrantLock</span></span><br><span class="line"><span class="comment">// 需要保证多个线程使用的是同一个锁</span></span><br><span class="line"><span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(); </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyPublicResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="comment">// 操作同步资源</span></span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ------------------------- 乐观锁的调用方式 -------------------------</span></span><br><span class="line"><span class="comment">// 需要保证多个线程使用的是同一个</span></span><br><span class="line"><span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"><span class="comment">// 执行自增1</span></span><br><span class="line">AtomicInteger atomicInteger.incrementAndGet();</span><br></pre></td></tr></table></figure><p>通过调用方式示例，我们可以发现悲观锁基本都是在显式的锁定之后再操作同步资源，而乐观锁则直接去操作同步资源。那么，为何乐观锁能够做到不锁定同步资源也可以正确的实现线程同步呢？我们通过介绍乐观锁的主要实现方式 “CAS” 的技术原理来为大家解惑。</p><p>CAS全称 Compare And Swap（比较与交换），是一种无锁算法。在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。java.util.concurrent包中的原子类就是通过CAS来实现了乐观锁。</p><p>CAS算法涉及到三个操作数：</p><ul><li>需要读写的内存值 V；</li><li>进行比较的值 A；</li><li>要写入的新值 B。</li></ul><p>当且仅当 V 内存值指向的值等于 A 时，CAS通过原子方式用新值B来更新V的值（“比较+更新”整体是一个原子操作），否则不会执行任何操作。一般情况下，“更新”是一个不断重试的操作。</p><p>之前提到java.util.concurrent包中的原子类，就是通过CAS来实现了乐观锁，那么我们进入原子类AtomicInteger的源码，看一下AtomicInteger的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class AtomicInteger extends Number implements java.io.Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 6214790243416807050L;</span><br><span class="line"></span><br><span class="line">    // setup to use Unsafe.compareAndSwapInt for updates</span><br><span class="line">    private static final Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    private static final long valueOffset;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger.class.getDeclaredField(&quot;value&quot;));</span><br><span class="line">        &#125; catch (Exception ex) &#123; throw new Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private volatile int value;    </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>根据定义我们可以看出各属性的作用：</p><ul><li>unsafe： 获取并操作内存的数据。</li><li>valueOffset： 存储value在AtomicInteger中的偏移量。</li><li>value： 存储AtomicInteger的int值，该属性需要借助volatile关键字保证其在线程间是可见的。</li></ul><p>接下来，我们查看AtomicInteger的自增函数incrementAndGet()的源码时，发现自增函数底层调用的是unsafe.getAndAddInt()。但是由于JDK本身只有Unsafe.class，只通过class文件中的参数名，并不能很好的了解方法的作用，所以我们通过OpenJDK 8 来查看Unsafe的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/ ------------------------- JDK <span class="number">8</span> -------------------------</span><br><span class="line"><span class="comment">// AtomicInteger 自增方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unsafe.class</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> var5;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">      var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">  &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line">  <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------- OpenJDK 8 -------------------------</span></span><br><span class="line"><span class="comment">// Unsafe.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> v;</span><br><span class="line">   <span class="keyword">do</span> &#123;</span><br><span class="line">       v = getIntVolatile(o, offset);</span><br><span class="line">   &#125; <span class="keyword">while</span> (!compareAndSwapInt(o, offset, v, v + delta));</span><br><span class="line">   <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据OpenJDK 8的源码我们可以看出，getAndAddInt()循环获取给定对象o中的偏移量处的值v，然后判断内存值是否等于v。如果相等则将内存值设置为 v + delta，否则返回false，继续循环进行重试，直到设置成功才能退出循环，并且将旧值返回。整个“比较+更新”操作封装在compareAndSwapInt()中，在JNI里是借助于一个CPU指令完成的，属于原子操作，可以保证多个线程都能够看到同一个变量的修改值。</p><p>后续JDK通过CPU的cmpxchg指令，去比较寄存器中的 A 和 内存中的值 V。如果相等，就把要写入的新值 B 存入内存中。如果不相等，就将内存值 V 赋值给寄存器中的值 A。然后通过Java代码中的while循环再次调用cmpxchg指令进行重试，直到设置成功为止。</p><p>CAS虽然很高效，但是它也存在三大问题，这里也简单说一下：</p><ol><li><p>ABA问题。CAS需要在操作值的时候检查内存值是否发生变化，没有发生变化才会更新内存值。但是如果内存值原来是A，后来变成了B，然后又变成了A，那么CAS进行检查时会发现值没有发生变化，但是实际上是有变化的。ABA问题的解决思路就是在变量前面添加版本号，每次变量更新的时候都把版本号加一，这样变化过程就从“A－B－A”变成了“1A－2B－3A”。</p><ul><li>JDK从1.5开始提供了AtomicStampedReference类来解决ABA问题，具体操作封装在compareAndSet()中。compareAndSet()首先检查当前引用和当前标志与预期引用和预期标志是否相等，如果都相等，则以原子方式将引用值和标志的值设置为给定的更新值。</li></ul></li><li><p><strong>循环时间长开销大</strong>。CAS操作如果长时间不成功，会导致其一直自旋，给CPU带来非常大的开销。</p></li><li><p>只能保证一个共享变量的原子操作</p><p>。对一个共享变量执行操作时，CAS能够保证原子操作，但是对多个共享变量操作时，CAS是无法保证操作的原子性的。</p><ul><li>Java从1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，可以把多个变量放在一个对象里来进行CAS操作。</li></ul></li></ol><p>有关于CAS和Unsafe的具体详解，我后续为大家梳理。</p><h2 id="自旋锁-VS-适应性自旋锁"><a href="#自旋锁-VS-适应性自旋锁" class="headerlink" title="自旋锁 VS 适应性自旋锁"></a>自旋锁 VS 适应性自旋锁</h2><p>在介绍自旋锁前，我们需要介绍一些前提知识来帮助大家明白自旋锁的概念。</p><p>阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p><p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p><p>而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/452a3363.png" alt="自旋锁流程"></p><p>自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XX:PreBlockSpin来更改）没有成功获得锁，就应当挂起线程。</p><p>自旋锁的实现原理同样也是CAS，AtomicInteger中调用unsafe进行自增操作的源码中的do-while循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。</p><p>旋锁在JDK1.4.2中引入，使用-XX:+UseSpinning来开启。JDK 6中变为默认开启，并且引入了自适应的自旋锁（适应性自旋锁）。</p><p>自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p><p>在自旋锁中 另有三种常见的锁形式:TicketLock、CLHlock和MCSlock，本文中仅做名词介绍，不做深入讲解，感兴趣的大家可以自行查阅相关资料。</p><h2 id="无锁-VS-偏向锁-VS-轻量级锁-VS-重量级锁"><a href="#无锁-VS-偏向锁-VS-轻量级锁-VS-重量级锁" class="headerlink" title="无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁"></a>无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁</h2><p>这四种锁是指锁的状态，专门针对synchronized的。在介绍这四种锁状态之前还需要介绍一些额外的知识。</p><p>首先为什么Synchronized能实现线程同步？</p><p>在回答这个问题之前我们需要了解两个重要的概念：“Java对象头”、“Monitor”。</p><h3 id="Java对象头"><a href="#Java对象头" class="headerlink" title="Java对象头"></a>Java对象头</h3><p>synchronized是悲观锁，在操作同步资源之前需要给同步资源先加锁，这把锁就是存在Java对象头里的，而Java对象头又是什么呢？</p><p>我们以Hotspot虚拟机为例，Hotspot的对象头主要包括两部分数据：Mark Word（标记字段）、Klass Pointer（类型指针）。</p><p><strong>Mark Word</strong>：默认存储对象的HashCode，分代年龄和锁标志位信息。这些信息都是与对象自身定义无关的数据，所以Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间Mark Word里存储的数据会随着锁标志位的变化而变化。</p><p><strong>Klass Point</strong>：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><h3 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h3><p>Monitor可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。每一个Java对象就有一把看不见的锁，称为内部锁或者Monitor锁。</p><p>Monitor是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联，同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。</p><p>现在话题回到synchronized，synchronized通过Monitor来实现线程同步，Monitor是依赖于底层的操作系统的Mutex Lock（互斥锁）来实现的线程同步。</p><p>如同我们在自旋锁中提到的“阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长”。这种方式就是synchronized最初实现同步的方式，这就是JDK 6之前synchronized效率低的原因。这种依赖于操作系统Mutex Lock所实现的锁我们称之为“重量级锁”，JDK 6中为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”。</p><p>所以目前锁一共有4种状态，级别从低到高依次是：无锁、偏向锁、轻量级锁和重量级锁。锁状态只能升级不能降级。</p><p>通过上面的介绍，我们对synchronized的加锁机制以及相关知识有了一个了解，那么下面我们给出四种锁状态对应的的Mark Word内容，然后再分别讲解四种锁状态的思路以及特点：</p><table><thead><tr><th style="text-align:left">锁状态</th><th style="text-align:left">存储内容</th><th style="text-align:left">存储内容</th></tr></thead><tbody><tr><td style="text-align:left">无锁</td><td style="text-align:left">对象的hashCode、对象分代年龄、是否是偏向锁（0）</td><td style="text-align:left">01</td></tr><tr><td style="text-align:left">偏向锁</td><td style="text-align:left">偏向线程ID、偏向时间戳、对象分代年龄、是否是偏向锁（1）</td><td style="text-align:left">01</td></tr><tr><td style="text-align:left">轻量级锁</td><td style="text-align:left">指向栈中锁记录的指针</td><td style="text-align:left">00</td></tr><tr><td style="text-align:left">重量级锁</td><td style="text-align:left">指向互斥量（重量级锁）的指针</td><td style="text-align:left">10</td></tr></tbody></table><h3 id="无锁"><a href="#无锁" class="headerlink" title="无锁"></a>无锁</h3><p>无锁没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。</p><p>无锁的特点就是修改操作在循环内进行，线程会不断的尝试修改共享资源。如果没有冲突就修改成功并退出，否则就会继续循环尝试。如果有多个线程修改同一个值，必定会有一个线程能修改成功，而其他修改失败的线程会不断重试直到修改成功。上面我们介绍的CAS原理及应用即是无锁的实现。无锁无法全面代替有锁，但无锁在某些场合下的性能是非常高的。</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。</p><p>在大多数情况下，锁总是由同一线程多次获得，不存在多线程竞争，所以出现了偏向锁。其目标就是在只有一个线程执行同步代码块时能够提高性能。</p><p>当一个线程访问同步代码块并获取锁时，会在Mark Word里存储锁偏向的线程ID。在线程进入和退出同步块时不再通过CAS操作来加锁和解锁，而是检测Mark Word里是否存储着指向当前线程的偏向锁。引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令即可。</p><p>偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动释放偏向锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态。撤销偏向锁后恢复到无锁（标志位为“01”）或轻量级锁（标志位为“00”）的状态。</p><p>偏向锁在JDK 6及以后的JVM里是默认启用的。可以通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking=false，关闭之后程序默认会进入轻量级锁状态。</p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>是指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。</p><p>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，然后拷贝对象头中的Mark Word复制到锁记录中。</p><p>拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，并将Lock Record里的owner指针指向对象的Mark Word。</p><p>如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，表示此对象处于轻量级锁定状态。</p><p>如果轻量级锁的更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行，否则说明多个线程竞争锁。</p><p>若当前只有一个等待线程，则该线程通过自旋进行等待。但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁升级为重量级锁。</p><h3 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h3><p>升级为重量级锁时，锁标志的状态值变为“10”，此时Mark Word中存储的是指向重量级锁的指针，此时等待锁的线程都会进入阻塞状态。</p><p>整体的锁状态升级流程如下：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/8afdf6f2.png" alt="锁状态的转换"></p><p>综上，偏向锁通过对比Mark Word解决加锁问题，避免执行CAS操作。而轻量级锁是通过用CAS操作和自旋来解决加锁问题，避免线程阻塞和唤醒而影响性能。重量级锁是将除了拥有锁的线程以外的线程都阻塞。</p><h2 id="公平锁-VS-非公平锁"><a href="#公平锁-VS-非公平锁" class="headerlink" title="公平锁 VS 非公平锁"></a>公平锁 VS 非公平锁</h2><p>公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。</p><p>非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</p><p>直接用语言描述可能有点抽象，这里笔者用从别处看到的一个例子来讲述一下公平锁和非公平锁。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/a23d746a.png" alt="公平锁例子"></p><p>如上图所示，假设有一口水井，有管理员看守，管理员有一把锁，只有拿到锁的人才能够打水，打完水要把锁还给管理员。每个过来打水的人都要管理员的允许并拿到锁之后才能去打水，如果前面有人正在打水，那么这个想要打水的人就必须排队。管理员会查看下一个要去打水的人是不是队伍里排最前面的人，如果是的话，才会给你锁让你去打水；如果你不是排第一的人，就必须去队尾排队，这就是公平锁。</p><p>但是对于非公平锁，管理员对打水的人没有要求。即使等待队伍里有排队等待的人，但如果在上一个人刚打完水把锁还给管理员而且管理员还没有允许等待队伍里下一个人去打水时，刚好来了一个插队的人，这个插队的人是可以直接从管理员那里拿到锁去打水，不需要排队，原本排队等待的人只能继续等待。如下图所示：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/4499559e.png" alt="非公平锁例子"></p><p>接下来我们通过ReentrantLock的源码来讲解公平锁和非公平锁。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/6edea205.png" alt="ReentrantLock源码"></p><p>根据代码可知，ReentrantLock里面有一个内部类Sync，Sync继承AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在Sync中实现的。它有公平锁FairSync和非公平锁NonfairSync两个子类。ReentrantLock默认使用非公平锁，也可以通过构造器来显示的指定使用公平锁。</p><p>下面我们来看一下公平锁与非公平锁的加锁方法的源码:</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/bc6fe583.png" alt="公平锁与非公平锁源码"></p><p>通过上图中的源代码对比，我们可以明显的看出公平锁与非公平锁的lock()方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件：hasQueuedPredecessors()。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/bd0036bb.png" alt="hasQueuedPredecessors方法源码"></p><p>再进入hasQueuedPredecessors()，可以看到该方法主要做一件事情：主要是判断当前线程是否位于同步队列中的第一个。如果是则返回true，否则返回false。</p><p>综上，公平锁就是通过同步队列来实现多个线程按照申请锁的顺序来获取锁，从而实现公平的特性。非公平锁加锁时不考虑排队等待问题，直接尝试获取锁，所以存在后申请却先获得锁的情况。</p><h2 id="可重入锁-VS-非可重入锁"><a href="#可重入锁-VS-非可重入锁" class="headerlink" title="可重入锁 VS 非可重入锁"></a>可重入锁 VS 非可重入锁</h2><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。下面用示例代码来进行分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法1执行..."</span>);</span><br><span class="line">        doOthers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doOthers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法2执行..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，类中的两个方法都是被内置锁synchronized修饰的，doSomething()方法中调用doOthers()方法。因为内置锁是可重入的，所以同一个线程在调用doOthers()时可以直接获得当前对象的锁，进入doOthers()进行操作。</p><p>如果是一个不可重入锁，那么当前线程在调用doOthers()之前需要将执行doSomething()时获取当前对象的锁释放掉，实际上该对象锁已被当前线程所持有，且无法释放。所以此时会出现死锁。</p><p>而为什么可重入锁就可以在嵌套调用时可以自动获得锁呢？我们通过图示和源码来分别解析一下。</p><p>还是打水的例子，有多个人在排队打水，此时管理员允许锁和同一个人的多个水桶绑定。这个人用多个水桶打水时，第一个水桶和锁绑定并打完水之后，第二个水桶也可以直接和锁绑定并开始打水，所有的水桶都打完水之后打水人才会将锁还给管理员。这个人的所有打水流程都能够成功执行，后续等待的人也能够打到水。这就是可重入锁。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/58fc5bc9.png" alt="可重入锁例子"></p><p>但如果是非可重入锁的话，此时管理员只允许锁和同一个人的一个水桶绑定。第一个水桶和锁绑定打完水之后并不会释放锁，导致第二个水桶不能和锁绑定也无法打水。当前线程出现死锁，整个等待队列中的所有线程都无法被唤醒。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/ea597a0c.png" alt="非可重入锁例子"></p><p>之前我们说过ReentrantLock和synchronized都是重入锁，那么我们通过重入锁ReentrantLock以及非可重入锁NonReentrantLock的源码来对比分析一下为什么非可重入锁在重复调用同步资源时会出现死锁。</p><p>首先ReentrantLock和NonReentrantLock都继承父类AQS，其父类AQS中维护了一个同步状态status来计数重入次数，status初始值为0。</p><p>当线程尝试获取锁时，可重入锁先尝试获取并更新status值，如果status == 0表示没有其他线程在执行同步代码，则把status置为1，当前线程开始执行。如果status != 0，则判断当前线程是否是获取到这个锁的线程，如果是的话执行status+1，且当前线程可以再次获取锁。而非可重入锁是直接去获取并尝试更新当前status的值，如果status != 0的话会导致其获取锁失败，当前线程阻塞。</p><p>释放锁时，可重入锁同样先获取当前status的值，在当前线程是持有锁的线程的前提下。如果status-1 == 0，则表示当前线程所有重复获取锁的操作都已经执行完毕，然后该线程才会真正释放锁。而非可重入锁则是在确定当前线程是持有锁的线程之后，直接将status置为0，将锁释放。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/32536e7a.png" alt="重入锁与非重入锁实现原理"></p><h3 id="独享锁-VS-共享锁"><a href="#独享锁-VS-共享锁" class="headerlink" title="独享锁 VS 共享锁"></a>独享锁 VS 共享锁</h3><p>独享锁和共享锁同样是一种概念。我们先介绍一下具体的概念，然后通过ReentrantLock和ReentrantReadWriteLock的源码来介绍独享锁和共享锁。</p><p>独享锁也叫排他锁，是指该锁一次只能被一个线程所持有。如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。JDK中的synchronized和JUC中Lock的实现类就是互斥锁。</p><p>共享锁是指该锁可被多个线程所持有。如果线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。</p><p>独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享。</p><p>下图为ReentrantReadWriteLock的部分源码：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/762a042b.png" alt="ReentrantReadWriteLock源码"></p><p>我们看到ReentrantReadWriteLock有两把锁：ReadLock和WriteLock，由词知意，一个读锁一个写锁，合称“读写锁”。再进一步观察可以发现ReadLock和WriteLock是靠内部类Sync实现的锁。Sync是AQS的一个子类，这种结构在CountDownLatch、ReentrantLock、Semaphore里面也都存在。</p><p>在ReentrantReadWriteLock里面，读锁和写锁的锁主体都是Sync，但读锁和写锁的加锁方式不一样。读锁是共享锁，写锁是独享锁。读锁的共享锁可保证并发读非常高效，而读写、写读、写写的过程互斥，因为读锁和写锁是分离的。所以ReentrantReadWriteLock的并发性相比一般的互斥锁有了很大提升。</p><p>那读锁和写锁的具体加锁方式有什么区别呢？在了解源码之前我们需要回顾一下其他知识。 在最开始提及AQS的时候我们也提到了state字段（int类型，32位），该字段用来描述有多少线程获持有锁。</p><p>在独享锁中这个值通常是0或者1（如果是重入锁的话state值就是重入的次数），在共享锁中state就是持有锁的数量。但是在ReentrantReadWriteLock中有读、写两把锁，所以需要在一个整型变量state上分别描述读锁和写锁的数量（或者也可以叫状态）。于是将state变量“按位切割”切分成了两个部分，高16位表示读锁状态（读锁个数），低16位表示写锁状态（写锁个数）。如下图所示：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/8793e00a.png" alt="独享锁的位数结构"></p><p>了解了概念之后我们再来看代码，先看写锁的加锁源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">Thread current = Thread.currentThread();</span><br><span class="line"><span class="keyword">int</span> c = getState(); <span class="comment">// 取到当前锁的个数</span></span><br><span class="line"><span class="keyword">int</span> w = exclusiveCount(c); <span class="comment">// 取写锁的个数w</span></span><br><span class="line"><span class="keyword">if</span> (c != <span class="number">0</span>) &#123; <span class="comment">// 如果已经有线程持有了锁(c!=0)</span></span><br><span class="line">    <span class="comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span></span><br><span class="line"><span class="keyword">if</span> (w == <span class="number">0</span> || current != getExclusiveOwnerThread()) <span class="comment">// 如果写线程数（w）为0（换言之存在读锁） 或者持有锁的线程不是当前线程就返回失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)    <span class="comment">// 如果写入锁的数量大于最大数（65535，2的16次方-1）就抛出一个Error。</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line"><span class="comment">// Reentrant acquire</span></span><br><span class="line">    setState(c + acquires);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (writerShouldBlock() || !compareAndSetState(c, c + acquires)) <span class="comment">// 如果当且写线程数为0，并且当前线程需要阻塞那么就返回失败；或者如果通过CAS增加写线程数失败也返回失败。</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">setExclusiveOwnerThread(current); <span class="comment">// 如果c=0，w=0或者c&gt;0，w&gt;0（重入），则设置当前线程或锁的拥有者</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这段代码首先取到当前锁的个数c，然后再通过c来获取写锁的个数w。因为写锁是低16位，所以取低16位的最大值与当前的c做与运算（ int w = exclusiveCount©; ），高16位和0与运算后是0，剩下的就是低位运算的值，同时也是持有写锁的线程数目。</li><li>在取到写锁线程的数目后，首先判断是否已经有线程持有了锁。如果已经有线程持有了锁(c!=0)，则查看当前写锁线程的数目，如果写线程数为0（即此时存在读锁）或者持有锁的线程不是当前线程就返回失败（涉及到公平锁和非公平锁的实现）。</li><li>如果写入锁的数量大于最大数（65535，2的16次方-1）就抛出一个Error。</li><li>如果当且写线程数为0（那么读线程也应该为0，因为上面已经处理c!=0的情况），并且当前线程需要阻塞那么就返回失败；如果通过CAS增加写线程数失败也返回失败。</li><li>如果c=0,w=0或者c&gt;0,w&gt;0（重入），则设置当前线程或锁的拥有者，返回成功！</li></ul><p>tryAcquire()除了重入条件（当前线程为获取了写锁的线程）之外，增加了一个读锁是否存在的判断。如果存在读锁，则写锁不能被获取，原因在于：必须确保写锁的操作对读锁可见，如果允许读锁在已被获取的情况下对写锁的获取，那么正在运行的其他读线程就无法感知到当前写线程的操作。</p><p>因此，只有等待其他读线程都释放了读锁，写锁才能被当前线程获取，而写锁一旦被获取，则其他读写线程的后续访问均被阻塞。写锁的释放与ReentrantLock的释放过程基本类似，每次释放均减少写状态，当写状态为0时表示写锁已被释放，然后等待的读写线程才能够继续访问读写锁，同时前次写线程的修改对后续的读写线程可见。</p><p>接着是读锁的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">    Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span> &amp;&amp;</span><br><span class="line">        getExclusiveOwnerThread() != current)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;                                   <span class="comment">// 如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态</span></span><br><span class="line">    <span class="keyword">int</span> r = sharedCount(c);</span><br><span class="line">    <span class="keyword">if</span> (!readerShouldBlock() &amp;&amp;</span><br><span class="line">        r &lt; MAX_COUNT &amp;&amp;</span><br><span class="line">        compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">            firstReader = current;</span><br><span class="line">            firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">            firstReaderHoldCount++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            HoldCounter rh = cachedHoldCounter;</span><br><span class="line">            <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                cachedHoldCounter = rh = readHolds.get();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                readHolds.set(rh);</span><br><span class="line">            rh.count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fullTryAcquireShared(current);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在tryAcquireShared(int unused)方法中，如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态。如果当前线程获取了写锁或者写锁未被获取，则当前线程（线程安全，依靠CAS保证）增加读状态，成功获取读锁。读锁的每次释放（线程安全的，可能有多个读线程同时释放读锁）均减少读状态，减少的值是“1&lt;&lt;16”。所以读写锁才能实现读读的过程共享，而读写、写读、写写的过程互斥。</p><p>此时，我们再回头看一下互斥锁ReentrantLock中公平锁和非公平锁的加锁源码：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/8b7878ec.png" alt="ReentrantLock公平锁和非公平锁加锁源码"></p><p>我们发现在ReentrantLock虽然有公平锁和非公平锁两种，但是它们添加的都是独享锁。根据源码所示，当某一个线程调用lock方法获取锁时，如果同步资源没有被其他线程锁住，那么当前线程在使用CAS更新state成功后就会成功抢占该资源。而如果公共资源被占用且不是被当前线程占用，那么就会加锁失败。所以可以确定ReentrantLock无论读操作还是写操作，添加的锁都是都是独享锁。</p><h2 id="闭锁-VS-死锁-VS-活锁"><a href="#闭锁-VS-死锁-VS-活锁" class="headerlink" title="闭锁 VS 死锁 VS 活锁"></a>闭锁 VS 死锁 VS 活锁</h2><h3 id="闭锁"><a href="#闭锁" class="headerlink" title="闭锁"></a>闭锁</h3><p>闭锁是一种同步工具类，可以延迟线程的进度直到其到达终止状态。闭锁的作用相当于一扇门：在闭锁到达结束状态之前，这扇门一直是关闭的，并且没有任何线程能通过，当到达结束状态时，这扇门会打开允许所有的线程通过。当闭锁到达结束状态后，将不会再改变状态，因此这扇门将永远保持打开状态。闭锁可以用来确保某些活动指导其他活动都完成后才继续执行。CountDownLatch就是一种灵活的闭锁实现。</p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待（锁嵌套）的现象，若无外力作用，他们都将无法推进下去。这是一个严重的问题，因为死锁会让你的程序挂起无法完成任务，死锁的发生必须满足一下4个条件：</p><ul><li>互斥条件：一个资源每次只能被一个进程使用。</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺。</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li></ul><p>避免死锁最简单的方法就是阻止循环等待条件，将系统中所有的资源设置标志位、排序，规定所有的进程申请资源必须以一定的顺序做操作来避免死锁。</p><h3 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h3><p>LiveLock是一种形式活跃性问题，该问题尽管不会阻塞线程，但也不能继续执行，因为线程将不断重复执行相同的操作，而且总会失败。活锁通常发送在处理事务消息的应用程序中：如果不能成功地处理某个消息，那么消息处理机制将回滚整个事务，并将它重新放到队列的开头：如果不能成功地处理某个消息，那么消息处理机制将回滚整个事务，并将它重新放到队列的开头。如果消息处理器在处理某种特定类型的消息时存在错误并导致它失败，那么每当这个消息从队列中取出并传递到存在错误的处理器时，都会发生事务回滚。由于这条消息又被放回到队列开头，因此处理器将被反复调用，并返回相同的结果。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文Java中常用的锁以及常见的锁的概念进行了基本介绍，并从源码以及实际应用的角度进行了对比分析。限于篇幅以及个人水平，没有在本篇文章中对所有内容进行深层次的讲解。后续我本人将会对Java的锁进行依次讲解。</p><p>其实Java本身已经对锁本身进行了良好的封装，降低了我们在平时工作中的使用难度。但是我们也需要熟悉锁的底层原理，不同场景下选择最适合的锁。而且源码中的思路都是非常好的思路，也是值得大家去学习和借鉴的。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>《深入理解Java虚拟机（第2版）》周志明著</li><li>《Java并发编程的艺术》方腾飞等著</li><li><a href="https://juejin.im/post/5a73cbbff265da4e807783f5" target="_blank" rel="noopener">Java CAS 原理剖析</a></li><li><a href="https://blog.csdn.net/u013256816/article/details/51204385" target="_blank" rel="noopener">Java中的锁</a></li><li><a href="https://zhuanlan.zhihu.com/p/29866981" target="_blank" rel="noopener">Java synchronized原理总结</a></li><li><a href="https://juejin.im/post/5b42c2546fb9a04f8751eabc" target="_blank" rel="noopener">Java并发—关键字synchronized解析</a></li><li><a href="http://www.infoq.com/cn/articles/java-se-16-synchronized" target="_blank" rel="noopener">聊聊并发（二）—Java SE1.6中的Synchronized</a></li><li><a href="https://blog.csdn.net/qq_19431333/article/details/70568478" target="_blank" rel="noopener">深入理解读写锁—ReadWriteLock源码分析</a></li><li><a href="https://www.cnblogs.com/twoheads/p/9635309.html" target="_blank" rel="noopener">【JUC】JDK1.8源码分析之ReentrantReadWriteLock</a></li><li><a href="https://my.oschina.net/adan1/blog/158107" target="_blank" rel="noopener">Java多线程（十）之ReentrantReadWriteLock深入分析</a></li><li><a href="https://mrdear.cn/2018/06/23/java/java--readwritelock" target="_blank" rel="noopener">Java–读写锁的实现原理</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="backend" scheme="http://ltyeamin.github.io/categories/backend/"/>
    
    
      <category term="JVM及并发编程" scheme="http://ltyeamin.github.io/tags/JVM%E5%8F%8A%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>深入分析HashMap源码</title>
    <link href="http://ltyeamin.github.io/2019/04/01/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90HashMap%E6%BA%90%E7%A0%81/"/>
    <id>http://ltyeamin.github.io/2019/04/01/深入分析HashMap源码/</id>
    <published>2019-04-01T12:47:22.000Z</published>
    <updated>2019-05-29T14:03:52.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Map这种Key-Value格式的数据结构在日常开发中是非常的常见，大部分的高级编程语言都有Map类型，Map类型常用于在内存中存取数据。</p><p>在Java中，HashMap是Java程序员使用频率最高的用于映射(键值对)处理的数据类型。随着JDK（Java Developmet Kit）版本的更新，JDK1.8对HashMap底层的实现进行了优化，例如引入红黑树的数据结构和扩容的优化等。本文深入探讨JDK1.8的HashMap的结构实现和功能原理。</p><p>Java为数据结构中的映射定义了一个接口java.util.Map，此接口主要有四个常用的实现类，分别是HashMap、Hashtable、LinkedHashMap和TreeMap，类继承关系如下图所示：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/f7fe16a2.png" alt="Java中Map继承体系"></p><p>下面针对各个实现类的特点做一些说明：</p><ul><li>HashMap：它根据键的hashCode值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，但遍历顺序却是不确定的。 HashMap最多只允许一条记录的键为null，允许多条记录的值为null。HashMap非线程安全，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致。如果需要满足线程安全，可以用 Collections的synchronizedMap方法使HashMap具有线程安全的能力，或者使用ConcurrentHashMap。</li><li>Hashtable：Hashtable是遗留类，很多映射的常用功能与HashMap类似，不同的是它承自Dictionary类，并且是线程安全的，任一时间只有一个线程能写Hashtable，并发性不如ConcurrentHashMap，因为ConcurrentHashMap引入了分段锁（JDK8还有优化）。Hashtable不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换。</li><li>LinkedHashMap：LinkedHashMap是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。</li><li>TreeMap：TreeMap实现SortedMap接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。如果使用排序的映射，建议使用TreeMap。在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，否则会在运行时抛出java.lang.ClassCastException类型的异常。</li></ul><p>对于上述四种Map类型的类，要求映射中的key是不可变对象。不可变对象是该对象在创建后它的哈希值不会被改变。如果对象的哈希值发生变化，Map对象很可能就定位不到映射的位置了。</p><p>通过上面的比较，我们知道了HashMap是Java的Map家族中一个普通成员，鉴于它可以满足大多数场景的使用条件，所以是使用频度最高的一个。下文我们主要结合源码，从存储结构、常用方法分析、扩容以及安全性等方面深入讲解HashMap的工作原理。</p><p>搞清楚HashMap，首先需要知道HashMap是什么，即它的存储结构-字段；其次弄明白它能干什么，即它的功能实现-方法。众所周知 HashMap 底层是基于<strong>数组+链表</strong>组成的，下面我们针对这两个方面详细展开讲解。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>在JDK1.7之前的HashMap的结构中，其实存在一个很明显的缺陷就是:</p><p>当 Hash 冲突严重时，在桶上形成的链表会变的越来越长，这样在查询时的效率就会越来越低；时间复杂度为 <code>O(N)</code>。</p><p>JDK8重点优化了这个查询效率，在原先的数组+链表上再增加红黑树。当链表大小达到一定的阈值(HashMap是8)时，会自动转换为红黑树的数据结构。修改为红黑树之后查询效率即时间复杂度直接提高到了 <code>O(logn)</code>。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/e4a19398.png" alt="数据结构1"></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 默认位桶数组初始容量,必须是2的幂,这里默认是16</span></span><br><span class="line"><span class="comment"> * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 位桶数组大小的最大值。构造参数的大小必须是2的几次幂并且小于等于1&lt;&lt;30</span></span><br><span class="line"><span class="comment"> * The maximum capacity, used if a higher value is implicitly specified</span></span><br><span class="line"><span class="comment"> * by either of the constructors with arguments.</span></span><br><span class="line"><span class="comment"> * MUST be a power of two &lt;= 1&lt;&lt;30.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认负载因子是0.75，可以在构造参数里设置</span></span><br><span class="line"><span class="comment"> * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个桶中的bin的存储方式由链表转换为红黑树的阈值，当链表大小超过TREEIFY_THRESHOLD的时候转换为红黑树</span></span><br><span class="line"><span class="comment"> * The bin count threshold for using a tree rather than list for a</span></span><br><span class="line"><span class="comment"> * bin.  Bins are converted to trees when adding an element to a</span></span><br><span class="line"><span class="comment"> * bin with at least this many nodes. The value must be greater</span></span><br><span class="line"><span class="comment"> * than 2 and should be at least 8 to mesh with assumptions in</span></span><br><span class="line"><span class="comment"> * tree removal about conversion back to plain bins upon</span></span><br><span class="line"><span class="comment"> * shrinkage.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 红黑数转换为链表(收缩机制)，当执行resize操作时,桶中bin的数量少于UNTREEIFY_THRESHOLD时6时，此时收</span></span><br><span class="line"><span class="comment"> * 缩为普通链表，提高查询效率</span></span><br><span class="line"><span class="comment"> * The bin count threshold for untreeifying a (split) bin during a</span></span><br><span class="line"><span class="comment"> * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span></span><br><span class="line"><span class="comment"> * most 6 to mesh with shrinkage detection under removal.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当桶中bin被树化时最小的hash表容量.(若没有达到这个阈值,即hash表容量小于MIN_TREEIFY_CAPACITY</span></span><br><span class="line"><span class="comment"> * 当桶中bin数量太多时会执行resize扩容操作).这个MIN_TREEIFY_CAPACITY的值至少TREEIFY_THRESHOLD </span></span><br><span class="line"><span class="comment"> * 的4倍。</span></span><br><span class="line"><span class="comment"> * The smallest table capacity for which bins may be treeified.</span></span><br><span class="line"><span class="comment"> * (Otherwise the table is resized if too many nodes in a bin.)</span></span><br><span class="line"><span class="comment"> * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts</span></span><br><span class="line"><span class="comment"> * between resizing and treeification thresholds.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 位桶数组，即Hash表，其大小总是2的几次幂，JDK1.7类型是Entry&lt;K,V&gt;[],JDK8优化成Node&lt;K,V&gt;[]</span></span><br><span class="line"><span class="comment"> * The table, initialized on first use, and resized as</span></span><br><span class="line"><span class="comment"> * necessary. When allocated, length is always a power of two.</span></span><br><span class="line"><span class="comment"> * (We also tolerate length zero in some operations to allow</span></span><br><span class="line"><span class="comment"> * bootstrapping mechanics that are currently not needed.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存的entrySet，即键值对映射对象，这里使用了AbstractMap的keyset()和values()</span></span><br><span class="line"><span class="comment"> * Holds cached entrySet(). Note that AbstractMap fields are used</span></span><br><span class="line"><span class="comment"> * for keySet() and values().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  当前map中包含的key-value数，即map的大小</span></span><br><span class="line"><span class="comment"> * The number of key-value mappings contained in this map.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * HashMap的修改次数，在迭代器初始化过程中会将这个值赋给迭代器的expectedModCount，</span></span><br><span class="line"><span class="comment"> * 比如迭代器迭代时候我们手动删除元素时，modCount会增加这个值。在迭代过程中，判断modCount和</span></span><br><span class="line"><span class="comment"> * expectedModCount是否相等，不相等则抛出ConcurrentModificationException异常，这就是所谓的</span></span><br><span class="line"><span class="comment"> * Fail-Fast机制。同样，ArrayList,LinkedList也有这个字段。</span></span><br><span class="line"><span class="comment"> * 具体详情请参照HashMap源码下的抽象迭代类HashIterator，</span></span><br><span class="line"><span class="comment"> * The number of times this HashMap has been structurally modified</span></span><br><span class="line"><span class="comment"> * Structural modifications are those that change the number of mappings in</span></span><br><span class="line"><span class="comment"> * the HashMap or otherwise modify its internal structure (e.g.,</span></span><br><span class="line"><span class="comment"> * rehash).  This field is used to make iterators on Collection-views of</span></span><br><span class="line"><span class="comment"> * the HashMap fail-fast.  (See ConcurrentModificationException).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要根据threshold的阈值来判断map是否要扩容，即threshold = capacity * load factor， </span></span><br><span class="line"><span class="comment"> * 第一次扩容为16 * 0.75 = 12 ， 当map的数组容量为12的时，此时需要继续扩容。</span></span><br><span class="line"><span class="comment"> * The next size value at which to resize (capacity * load factor).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// (The javadoc description is true upon serialization.</span></span><br><span class="line"><span class="comment">// Additionally, if the table array has not been allocated, this</span></span><br><span class="line"><span class="comment">// field holds the initial array capacity, or zero signifying</span></span><br><span class="line"><span class="comment">// DEFAULT_INITIAL_CAPACITY.)</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hash table的默认负载因子，默认是DEFAULT_LOAD_FACTOR，即0.75</span></span><br><span class="line"><span class="comment"> * The load factor for the hash table.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure><h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="Node位桶节点"><a href="#Node位桶节点" class="headerlink" title="Node位桶节点"></a>Node位桶节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基本的hash桶节点，即数组存放的元素类型，实现了Map.Entry&lt;K,V&gt;接口。</span></span><br><span class="line"><span class="comment"> * JDK1.7的结构是Map.Entry&lt;K, V&gt;的子类HashEntry&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> * Basic hash bin node, used for most entries.  (See below for</span></span><br><span class="line"><span class="comment"> * TreeNode subclass, and in LinkedHashMap for its Entry subclass.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// key的哈希值，用来定位数组索引位置</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="comment">// map的key，不可不变对象，一旦设置新Key，不可更改key的值，HashMap中可存null值</span></span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="comment">// map的value，也可以存放null值。key相同则覆盖value,</span></span><br><span class="line">    V value;</span><br><span class="line">    <span class="comment">// 链表的下一个node</span></span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取key</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    <span class="comment">// 获取value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">    <span class="comment">// 重写toString</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 重写hashCode，node的hashCode为key的hashCode与value的hashCode的异或结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置新的value，返回旧的value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        V oldValue = value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一般重写了hashCode方法，equals也会重写。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 引用都是一个，则判断是同一个对象，直接返回true</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 判断是否是Map.Entry同一类型，若类型不同，则返回false</span></span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">            <span class="comment">// 若是 Map.Entry类型，进行向下转型。</span></span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">            <span class="comment">// 如果两个对象的key和value同时都相等，则认为是相等，返回true</span></span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                Objects.equals(value, e.getValue()))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TreeNode红黑树"><a href="#TreeNode红黑树" class="headerlink" title="TreeNode红黑树"></a>TreeNode红黑树</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 红黑树节点，继承LinkedHashMap.Entry&lt;K,V&gt;</span></span><br><span class="line"><span class="comment"> * Entry for Tree bins. Extends LinkedHashMap.Entry (which in turn</span></span><br><span class="line"><span class="comment"> * extends Node) so can be used as extension of either regular or</span></span><br><span class="line"><span class="comment"> * linked node.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">    TreeNode&lt;K,V&gt; left;</span><br><span class="line">    TreeNode&lt;K,V&gt; right;</span><br><span class="line">    TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">    <span class="keyword">boolean</span> red;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns root of tree containing this node.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">root</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (TreeNode&lt;K,V&gt; r = <span class="keyword">this</span>, p;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((p = r.parent) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            r = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 把红黑树的根节点设为  其所在的数组槽 的第一个元素</span></span><br><span class="line"><span class="comment">   * 首先明确：TreeNode既是一个红黑树结构，也是一个双链表结构</span></span><br><span class="line"><span class="comment">   * 这个方法里做的事情，就是保证树的根节点一定也要成为链表的首节点</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> &lt;K,V&gt; <span class="function"><span class="keyword">void</span> <span class="title">moveRootToFront</span><span class="params">(Node&lt;K,V&gt;[] tab, TreeNode&lt;K,V&gt; root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; tab != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span>) &#123; <span class="comment">// 根节点不为空 并且 HashMap的元素数组不为空</span></span><br><span class="line">        <span class="keyword">int</span> index = (n - <span class="number">1</span>) &amp; root.hash; <span class="comment">// 根据根节点的Hash值 和 HashMap的元素数组长度  取得根节点在数组中的位置</span></span><br><span class="line">        TreeNode&lt;K,V&gt; first = (TreeNode&lt;K,V&gt;)tab[index]; <span class="comment">// 首先取得该位置上的第一个节点对象</span></span><br><span class="line">        <span class="keyword">if</span> (root != first) &#123; <span class="comment">// 如果该节点对象 与 根节点对象 不同</span></span><br><span class="line">            Node&lt;K,V&gt; rn; <span class="comment">// 定义根节点的后一个节点</span></span><br><span class="line">            tab[index] = root; <span class="comment">// 把元素数组index位置的元素替换为根节点对象</span></span><br><span class="line">            TreeNode&lt;K,V&gt; rp = root.prev; <span class="comment">// 获取根节点对象的前一个节点</span></span><br><span class="line">            <span class="keyword">if</span> ((rn = root.next) != <span class="keyword">null</span>) <span class="comment">// 如果后节点不为空 </span></span><br><span class="line">                ((TreeNode&lt;K,V&gt;)rn).prev = rp; <span class="comment">// root后节点的前节点  指向到 root的前节点，相当于把root从链表中摘除</span></span><br><span class="line">            <span class="keyword">if</span> (rp != <span class="keyword">null</span>) <span class="comment">// 如果root的前节点不为空</span></span><br><span class="line">                rp.next = rn; <span class="comment">// root前节点的后节点 指向到 root的后节点</span></span><br><span class="line">            <span class="keyword">if</span> (first != <span class="keyword">null</span>) <span class="comment">// 如果数组该位置上原来的元素不为空</span></span><br><span class="line">                first.prev = root; <span class="comment">// 这个原有的元素的 前节点 指向到 root，相当于root目前位于链表首位</span></span><br><span class="line">            root.next = first; <span class="comment">// 原来的第一个节点现在作为root的下一个节点，变成了第二个节点</span></span><br><span class="line">            root.prev = <span class="keyword">null</span>; <span class="comment">// 首节点没有前节点</span></span><br><span class="line">          &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 这一步是防御性的编程</span></span><br><span class="line"><span class="comment">         * 校验TreeNode对象是否满足红黑树和双链表的特性</span></span><br><span class="line"><span class="comment">         * 如果这个方法校验不通过：可能是因为用户编程失误，破坏了结构（例如：并发场景下）；也可能是TreeNode</span></span><br><span class="line"><span class="comment">         * 的实现有问题（这个是理论上的以防万一）；</span></span><br><span class="line"><span class="comment">         */</span> </span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">checkInvariants</span><span class="params">(root)</span></span>; </span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数为HashMap的元素数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeify</span><span class="params">(Node&lt;K,V&gt;[] tab)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义树的根节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; root = <span class="keyword">null</span>; </span><br><span class="line">    <span class="comment">// 遍历链表，x指向当前节点、next指向下一个节点</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = <span class="keyword">this</span>, next; x != <span class="keyword">null</span>; x = next) &#123; </span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)x.next; <span class="comment">// 下一个节点</span></span><br><span class="line">        x.left = x.right = <span class="keyword">null</span>; <span class="comment">// 设置当前节点的左右节点为空</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123; <span class="comment">// 如果还没有根节点</span></span><br><span class="line">            x.parent = <span class="keyword">null</span>; <span class="comment">// 当前节点的父节点设为空</span></span><br><span class="line">            x.red = <span class="keyword">false</span>; <span class="comment">// 当前节点的红色属性设为false（把当前节点设为黑色）</span></span><br><span class="line">            root = x; <span class="comment">// 根节点指向到当前节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 如果已经存在根节点了</span></span><br><span class="line">            K k = x.key; <span class="comment">// 取得当前链表节点的key</span></span><br><span class="line">            <span class="keyword">int</span> h = x.hash; <span class="comment">// 取得当前链表节点的hash值</span></span><br><span class="line">            Class&lt;?&gt; kc = <span class="keyword">null</span>; <span class="comment">// 定义key所属的Class</span></span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123; <span class="comment">// 从根节点开始遍历，此遍历没有设置边界，只能从内部跳出</span></span><br><span class="line">                <span class="comment">// GOTO1</span></span><br><span class="line">                <span class="keyword">int</span> dir, ph; <span class="comment">// dir 标识方向（左右）、ph标识当前树节点的hash值</span></span><br><span class="line">                K pk = p.key; <span class="comment">// 当前树节点的key</span></span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h) <span class="comment">// 如果当前树节点hash值 大于 当前链表节点的hash值</span></span><br><span class="line">                    dir = -<span class="number">1</span>; <span class="comment">// 标识当前链表节点会放到当前树节点的左侧</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>; <span class="comment">// 右侧</span></span><br><span class="line"> </span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * 如果两个节点的key的hash值相等，那么还要通过其他方式再进行比较</span></span><br><span class="line"><span class="comment">                 * 如果当前链表节点的key实现了comparable接口，并且当前树节点和链表节点是相同Class的实</span></span><br><span class="line"><span class="comment">                 * 例，那么通过comparable的方式再比较两者。</span></span><br><span class="line"><span class="comment">                 * 如果还是相等，最后再通过tieBreakOrder比较一次</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                            (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                            (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line"> </span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p; <span class="comment">// 保存当前树节点</span></span><br><span class="line"> </span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * 如果dir 小于等于0 ： 当前链表节点一定放置在当前树节点的左侧，但不一定是该树节点的左孩</span></span><br><span class="line"><span class="comment">                 * 子，也可能是左孩子的右孩子 或者 更深层次的节点。如果dir 大于0 ： 当前链表节点一定放置在</span></span><br><span class="line"><span class="comment">                 * 当前树节点的右侧，但不一定是该树节点的右孩子，也可能是右孩子的左孩子 或者 更深层次的节</span></span><br><span class="line"><span class="comment">                 * 点。</span></span><br><span class="line"><span class="comment">                 * </span></span><br><span class="line"><span class="comment">                 * 如果当前树节点不是叶子节点，那么最终会以当前树节点的左孩子或者右孩子为起始节点  再从</span></span><br><span class="line"><span class="comment">                 * GOTO1 处开始 重新寻找自己（当前链表节点）的位置。</span></span><br><span class="line"><span class="comment">                 * 如果当前树节点就是叶子节点，那么根据dir的值，就可以把当前链表节点挂载到当前树节点的左或</span></span><br><span class="line"><span class="comment">                 * 者右侧了。</span></span><br><span class="line"><span class="comment">                 * 挂载之后，还需要重新把树进行平衡。平衡之后，就可以针对下一个链表节点进行处理了。</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    x.parent = xp; <span class="comment">// 当前链表节点 作为 当前树节点的子节点</span></span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x; <span class="comment">// 作为左孩子</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x; <span class="comment">// 作为右孩子</span></span><br><span class="line">                    root = balanceInsertion(root, x); <span class="comment">// 重新平衡</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 把所有的链表节点都遍历完之后，最终构造出来的树可能经历多个平衡操作，根节点目前到底是链表的哪一个节点是不确定的</span></span><br><span class="line">    <span class="comment">// 因为我们要基于树来做查找，所以就应该把 tab[N] 得到的对象一定根节点对象，而目前只是链表的第一个节点对象，所以要做相应的处理。</span></span><br><span class="line">    moveRootToFront(tab, root); </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重要方法"><a href="#重要方法" class="headerlink" title="重要方法"></a>重要方法</h3><h4 id="hash方法"><a href="#hash方法" class="headerlink" title="hash方法"></a>hash方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算key的hash值，</span></span><br><span class="line"><span class="comment"> * key为null则hashCode为0;不为null则将key的hashCode赋值给h，最终的hashCode = h ^ (h &gt;&gt;&gt; 16);</span></span><br><span class="line"><span class="comment"> * 这里我们要讲讲数组索引的计算方式：(n- 1) &amp; hash,n表示table.length</span></span><br><span class="line"><span class="comment"> * 这里通过key.hashCode()计算出key的哈希值，然后将哈希值h右移16位，再与原来的h做异或^运算，这一步是高位运</span></span><br><span class="line"><span class="comment"> * 算。设想一下，如果没有高位运算，那么hash值将是一个int型的32位数。而从2的-31次幂到2的31次幂之间，有将近几</span></span><br><span class="line"><span class="comment"> * 十亿的空间，如果我们的HashMap的table有这么长，内存早就爆了。所以这个散列值不能直接用来最终的取模运算，而</span></span><br><span class="line"><span class="comment"> * 需要先加入高位运算，将高16位和低16位的信息"融合"到一起，也称为"扰动函数"。这样才能保证hash值所有位的数值</span></span><br><span class="line"><span class="comment"> * 特征都保存下来而没有遗漏，从而使映射结果尽可能的松散。最后，根据 n-1 做与操作的取模运算。这里也能看出为什么</span></span><br><span class="line"><span class="comment"> * HashMap要限制table的长度为2的n次幂，因为这样，n-1可以保证二进制展示形式是（以16为例）0000 0000 0000 </span></span><br><span class="line"><span class="comment"> * 0000 0000 0000 0000 1111。在做"与"操作时，就等同于截取hash二进制值得后四位数据作为下标。这里也可以看</span></span><br><span class="line"><span class="comment"> * 出"扰动函数"的重要性了，如果高位不参与运算，那么高16位的hash特征几乎永远得不到展现，发生hash碰撞的几率就</span></span><br><span class="line"><span class="comment"> * 会增大，从而影响性能。</span></span><br><span class="line"><span class="comment"> * Computes key.hashCode() and spreads (XORs) higher bits of hash</span></span><br><span class="line"><span class="comment"> * to lower.  Because the table uses power-of-two masking, sets of</span></span><br><span class="line"><span class="comment"> * hashes that vary only in bits above the current mask will</span></span><br><span class="line"><span class="comment"> * always collide. (Among known examples are sets of Float keys</span></span><br><span class="line"><span class="comment"> * holding consecutive whole numbers in small tables.)  So we</span></span><br><span class="line"><span class="comment"> * apply a transform that spreads the impact of higher bits</span></span><br><span class="line"><span class="comment"> * downward. There is a tradeoff between speed, utility, and</span></span><br><span class="line"><span class="comment"> * quality of bit-spreading. Because many common sets of hashes</span></span><br><span class="line"><span class="comment"> * are already reasonably distributed (so don't benefit from</span></span><br><span class="line"><span class="comment"> * spreading), and because we use trees to handle large sets of</span></span><br><span class="line"><span class="comment"> * collisions in bins, we just XOR some shifted bits in the</span></span><br><span class="line"><span class="comment"> * cheapest possible way to reduce systematic lossage, as well as</span></span><br><span class="line"><span class="comment"> * to incorporate impact of the highest bits that would otherwise</span></span><br><span class="line"><span class="comment"> * never be used in index calculations because of table bounds.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们实际用的put方法，底层调用的是putVal方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don't change existing value</span></span><br><span class="line"><span class="comment"> * (onlyIfAbsent为true时，如果key存在，就不会进行put操作，原有的对应的value不会被覆盖)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * (evict参数用于LinkedHashMap中的尾部操作，这里没有实际意义。)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义变量tab是将要操作的Node数组引用，p表示tab上的某Node节点，n为tab的长度，i为tab的下标。</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 判断当table为null或者tab的长度为0时，即table尚未初始化，此时通过resize()方法得到初始化的table。</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">       <span class="comment">// 这种情况是可能发生的，HashMap的table字段注释中提到：The table, initialized on first use,     and resized as necessary。</span></span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 此处通过(n - 1)&amp; hash计算出的值作为tab的下标i，并另p表示tab[i]，也就是该链表第一个节点的位置。并判断p是否为null。</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// 当p为null时，表明tab[i]上没有任何元素，即不存在Hash冲突，那么接下来就new第一个Node节点，调用newNode方法返回新节点赋值给tab[i]。这里值得注意的是i = (n - 1) &amp; hash相当于对hash对n的取模</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">   <span class="comment">// 下面进入p不为null的情况，有三种情况：p为链表节点；p为红黑树节点；p是链表节点但长度为临界长度TREEIFY_THRESHOLD，再插入任何元素就要变成红黑树了。</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 定义e引用,表示即将插入的Node节点，并且下文可以看出 k = p.key。</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            <span class="comment">// HashMap中判断key相同的条件是key的hash相同（Hash是否冲突），并且符合equals方法。这里判断了p.key是否和插入的key相等，如果相等，则将p的引用赋给e。e会在最后统一进行赋值及返回。</span></span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="comment">// 这一步的判断其实是属于一种特殊情况，上述三个条件都满足，即两者hash值相同且key完全相同，于是插入操作就不需要了，只要把原来的value覆盖就可以了。e会在最后统一进行赋值及返回，这里先不进行覆盖操作。</span></span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">          <span class="comment">// 现在开始了第一种情况，当前桶p是红黑树节点，那么肯定插入后仍然是红黑树节点，就要按照红黑树的方式写入数据。所以我们直接强制转型p后调用TreeNode.putTreeVal方法，返回的引用赋给e。</span></span><br><span class="line">          <span class="comment">// 你可能好奇，这里怎么不遍历tree看看有没有key相同的节点呢？其实，putTreeVal内部进行了遍历，存在相同hash时返回被覆盖的TreeNode，否则返回null。</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">          <span class="comment">// 接下里就是p为链表节点的情形，也就是上述说的另外两类情况：插入后还是链表/插入后转红黑树。另外，上行转型代码也说明了TreeNode是Node的一个子类。</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 我们需要一个计数器来计算当前链表的元素个数，并遍历链表，binCount就是这个计数器。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">              <span class="comment">// 遍历过程中当发现p.next为null时，说明链表到头了，就需要将当前的key、value封装成一个新节点,将新的链表节点直接在p的后面插入即可，即把新节点的引用赋给p.next，插入操作就完成了。注意此时e赋给p。</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 最后一个参数为新节点的next，这里传入null，保证了新节点继续为该链表的末端。</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 插入成功后，要判断是否需要转换为红黑树，因为插入后链表长度加1，而binCount并不包含新节点，所以判断时要将临界阈值减1。binCount大于等于7（其实实际上链表此时的大小为8）时转换为红黑树进行处理</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        <span class="comment">// 当满足上述转换条件时，调用treeifyBin方法，将该链表转换为红黑树。</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="comment">// 当然如果不满足转换条件，那么插入数据后结构也无需变动，所有插入操作也到此结束了，break退出即可。</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">               <span class="comment">// 在遍历链表的过程中，有可能遍历到与插入的key相同的节点，此时只要将这个节点引用赋值给e，最后通过e去把新的value覆盖掉就可以了。</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="comment">// 找到了相同key的节点，那么插入操作也不需要了，直接break退出循环进行最后的value覆盖操作。</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">               <span class="comment">// e是当前遍历的节点p的下一个节点，p = e 就是依次遍历链表的核心语句。每次循环时p都是下一个node节点。</span></span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 下面JDK注释已经很清晰了，针对已经存在key的情况做处理。即我们对e进行处理。</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="comment">//定义oldValue，即原存在的节点e的value值。 </span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="comment">// 方法注释提到，onlyIfAbsent为true时，若存在key相同时不做覆盖处理，这里作为判断条件，可以看出当onlyIfAbsent为默认值false或者oldValue为null时，进行覆盖操作。</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">// 覆盖操作，将原节点e上的value设置为插入的新value。</span></span><br><span class="line">                e.value = value;</span><br><span class="line">            <span class="comment">// 这个函数在hashmap中没有任何操作，是个空函数，它存在主要是为了linkedHashMap的一些后续处理工作。</span></span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="comment">// 返回的是被覆盖的oldValue。我们在使用put方法时很少用他的返回值，甚至忘了它的存在，这里我们知道，他返回的是被覆盖的oldValue。</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 收尾工作，值得一提的是，对key相同而覆盖oldValue的情况，在前面已经return，不会执行这里，所以那一类情况不算数据结构变化，并不改变modCount值。如果走到这里，说明已经新增一个Key-Value的Node节点，modCount要自增</span></span><br><span class="line">    ++modCount;</span><br><span class="line">  <span class="comment">// 同理，覆盖oldValue时显然没有新元素添加，除此之外都新增了一个元素，这里++size并与threshold判断是否达到了扩容标准。</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        <span class="comment">// 当HashMap中存在的node节点大于threshold时，hashmap进行扩容。</span></span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 这里与前面的afterNodeAccess同理，是用于linkedHashMap的尾部操作，HashMap中并无实际意义。</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="comment">// 最终，对于真正进行插入元素(不是覆盖的操作)的情况，put函数一律返回null。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们实际用的get方法，底层调用的是getNode方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">// 根据key及其hash值查询node节点，如果存在，则返回该节点的value值；如果不存在，则返回null。</span></span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.get and related methods.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the node, or null if none 。</span></span><br><span class="line"><span class="comment"> * 如果找到node返回node，没有找到node则返回null</span></span><br><span class="line"><span class="comment"> * 根据key搜索节点的方法。记住判断key相等的条件：hash值相同 并且 符合equals方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义变量tab是将要遍历查找的Node数组引用，first和e表示tab上的找到的Node节点，n为tab的长度，k为Key</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="comment">// 根据输入的hash值，可以直接计算出对应的下标(n - 1) &amp; hash，缩小查询范围，如果存在结果，则必定在table的这个位置上。</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="comment">// 判断第一个存在的节点的key是否和查询的key相等。如果相等，直接返回该节点。</span></span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">// 如果第一个不匹配，则判断它的下一个是红黑树还是链表。遍历该链表/红黑树直到next为null。</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 红黑树就按照树的查找方式返回值。</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="comment">// 当这个table节点上存储的是红黑树结构时，在根节点first上调用getTreeNode方法，在内部遍历红黑树节点，查看是否有匹配的TreeNode。</span></span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">          <span class="comment">// 链表的方式遍历匹配返回值。  </span></span><br><span class="line">          <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">// 当这个table节点上存储的是链表结构时，若两者hash相同且key是否完全相同则直接返回。</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">              <span class="comment">// 如果key不同，一直遍历下去直到链表尽头，直到e.next == null才终止循环。</span></span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有找到则返回null。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="resize方法"><a href="#resize方法" class="headerlink" title="resize方法"></a>resize方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * map扩容机制</span></span><br><span class="line"><span class="comment"> * Initializes or doubles table size.  If null, allocates in</span></span><br><span class="line"><span class="comment"> * accord with initial capacity target held in field threshold.</span></span><br><span class="line"><span class="comment"> * Otherwise, because we are using power-of-two expansion, the</span></span><br><span class="line"><span class="comment"> * elements from each bin must either stay at same index, or move</span></span><br><span class="line"><span class="comment"> * with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">// 当前所有元素所在的数组，称为老的元素数组</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">// 老的元素数组长度</span></span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="comment">// 老的扩容阀值设置</span></span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="comment">// 新数组的容量，新数组的扩容阀值都初始化为0</span></span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 如果老数组长度大于0，说明已经存在元素</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 超过最大值就不再扩充了，即2的30次方时，就只好随你碰撞去吧</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            <span class="comment">// 扩容阀值设置为int最大值（2的31次方 -1 ），因为oldCap再乘2就溢出了。</span></span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="comment">// 超过了最大的容量，不能扩容，直接返回老的元素数组</span></span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 没超过最大值，就扩充为原来的2倍</span></span><br><span class="line"><span class="comment">         * 如果数组元素个数在正常范围内，那么新的数组容量为老的数组容量的2倍（左移1位相当于乘以2）</span></span><br><span class="line"><span class="comment">         * 如果扩容之后的新容量小于最大容量并且老的数组容量大于等于默认初始化容量（16），那么新数组的扩</span></span><br><span class="line"><span class="comment">         * 容阀值设置为老阀值的2倍。（老的数组容量大于16意味着：要么构造函数指定了一个大于16的初始化容量值，</span></span><br><span class="line"><span class="comment">         * 要么已经经历过了至少一次扩容）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 运行到这个else if,说明老数组没有任何元素</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        <span class="comment">// 如果老数组的扩容阀值大于0，那么设置新数组的容量为该阀值,这一步也就意味着构造该map的时候，指定了初始化容量</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        <span class="comment">// 能运行到这里的话，说明是调用无参构造函数创建的该map，并且第一次添加元素</span></span><br><span class="line">        <span class="comment">// 设置新数组容量为16</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        <span class="comment">// 设置新数组扩容阀值为 16 * 0.75 = 12。0.75为负载因子(当元素个数达到容量了4分之3，那么扩容)</span></span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果扩容阀值为0</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 计算新的resize上限</span></span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        <span class="comment">// 计算扩容阀值</span></span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置新数组的扩容阀值</span></span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">    <span class="comment">// 创建新的数组（对于第一次添加元素，那么这个数组就是第一个数组；对于存在oldTab的时候，那么这个数组就是要需要扩容到的新数组）</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    <span class="comment">// 将该map的table属性指向到该新数组newTab</span></span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">// 如果老数组不为空，说明是扩容操作，那么涉及到元素的转移操作</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 遍历老数组把每个bucket都移动到新的buckets中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            <span class="comment">// 数组中的某个元素</span></span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="comment">// 如果当前位置元素不为空，那么需要转移该元素到新数组</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 释放掉老数组对于要转移走的元素的引用（主要为了使得数组可被回收）</span></span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 如果元素没有有下一个节点，说明该元素不存在hash冲突</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="comment">// 把元素存储到新的数组中，存储到数组的哪个位置需要根据hash值和数组长度来进行取模</span></span><br><span class="line">                    <span class="comment">// 【hash值  %   数组长度】 = 【  hash值   &amp; （数组长度-1）】</span></span><br><span class="line">                    <span class="comment">//  这种与运算求模的方式要求  数组长度必须是2的N次方，但是可以通过构造函数随意指定初始化容量呀，如果指定了17,15这种，岂不是出问题了就？没关系，最终会通过tableSizeFor方法将用户指定的转化为大于其并且最相近的2的N次方。 15 -&gt; 16、17-&gt; 32</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * 如果该元素有下一个节点，那么说明该位置上存在一个链表了（hash相同的多个元素以链表的方式存</span></span><br><span class="line"><span class="comment">                 * 储到了老数组的这个位置上了）。例如：数组长度为16，那么hash值为1（1%16=1）的和hash值为</span></span><br><span class="line"><span class="comment">                 * 17（17%16=1）的两个元素都是会存储在数组的第2个位置上（对应数组下标为1），当数组扩容为</span></span><br><span class="line"><span class="comment">                 * 32（1%32=1）时，hash值为1的还应该存储在新数组的第二个位置上，但是hash值为17(17%32=1</span></span><br><span class="line"><span class="comment">                 * 7)的就应该存储在新数组的第18个位置上了。所以，数组扩容后，所有元素都需要重新计算在新数组</span></span><br><span class="line"><span class="comment">                 * 中的位置。</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">// 如果该节点为TreeNode类型</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">// 链表优化重hash的代码块</span></span><br><span class="line">                    <span class="comment">// 按命名来翻译的话，应该叫低位首尾节点</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>; </span><br><span class="line">                    <span class="comment">// 按命名来翻译的话，应该叫高位首尾节点</span></span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">// 以上的低位指的是新数组的 0  到 oldCap-1 、高位指定的是oldCap 到 newCap - 1</span></span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="comment">// 遍历链表</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="comment">// next表示下一个node节点</span></span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">// 原索引</span></span><br><span class="line">                        <span class="comment">// 这一步判断好狠，拿元素的hash值和老数组的长度做与运算</span></span><br><span class="line">                        <span class="comment">// 数组的长度一定是2的N次方(例如16)，如果hash值和该长度做与运算，结果为0，就说明该hash值和数组长度取模后的值一定小于数组长度（例如mod值为1）。</span></span><br><span class="line">                        <span class="comment">// 那么该hash值再和新数组的长度取摸的话mod值也不会放生变化，所以该元素的在新数组的位置和在老数组的位置是相同的，所以该元素可以放置在低位链表中。</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                <span class="comment">// 如果没有尾，说明链表为空，链表为空时，头节点指向该元素。</span></span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                <span class="comment">// 如果有尾，那么链表不为空，把该元素挂到链表的最后。</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            <span class="comment">// 把尾节点设置为当前元素。</span></span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 原索引+oldCap</span></span><br><span class="line">                        <span class="comment">// 如果与运算结果不为0，说明hash值大于老数组长度（例如hash值为17）。</span></span><br><span class="line">                        <span class="comment">// 此时该元素应该放置到新数组的高位位置上。</span></span><br><span class="line">                        <span class="comment">// 例：老数组长度16，那么新数组长度为32，hash为17的应该放置在数组的第17个位置上，也就是下标为16，那么下标为16已经属于高位了，低位是[0-15]，高位是[16-31]。</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                <span class="comment">// 如果没有尾，说明链表为空，链表为空时，头节点指向该元素。</span></span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                <span class="comment">// 如果有尾，那么链表不为空，把该元素挂到链表的最后。</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            <span class="comment">// 把尾节点设置为当前元素。</span></span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 原索引放到bucket里，即低位的元素组成的链表还是放置在原来的位置</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 原索引+oldCap放到bucket里，即高位的元素组成的链表放置的位置只是在原有位置上偏移了老数组的长度个位置。</span></span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">// 例1:hash为17在老数组放置在0下标,在新数组放置在16下标;</span></span><br><span class="line">                        <span class="comment">// 例2:hash为18在老数组放置在1下标,在新数组放置在17下标。</span></span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回新的位桶数组</span></span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="treeifyBin方法"><a href="#treeifyBin方法" class="headerlink" title="treeifyBin方法"></a>treeifyBin方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转换为红黑树的操作</span></span><br><span class="line"><span class="comment"> * 参数tab: 元素数组</span></span><br><span class="line"><span class="comment"> * 参数hash: key的hashCode</span></span><br><span class="line"><span class="comment"> * Replaces all linked nodes in bin at index for given hash unless</span></span><br><span class="line"><span class="comment"> * table is too small, in which case resizes instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果元素数组为空或者数组长度小于 树结构化的最小限制</span></span><br><span class="line"><span class="comment">     * MIN_TREEIFY_CAPACITY 默认值64，对于这个值可以理解为：</span></span><br><span class="line"><span class="comment">     * 如果元素数组长度小于这个值，没有必要去进行结构转换;</span></span><br><span class="line"><span class="comment">     * 当一个数组位置上集中了多个键值对，那是因为这些key的hash值和数组长度取模之后结果相同.(并不是因为这些</span></span><br><span class="line"><span class="comment">     * key的hash值相同).因为hash值相同的概率不高，所以可以通过扩容的方式，来使得最终这些key的hash值在和新</span></span><br><span class="line"><span class="comment">     * 的数组长度取模之后，拆分到多个数组位置上。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        <span class="comment">// 如果数组为null或者小于MIN_TREEIFY_CAPACITY=64则进行扩容操作</span></span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 如果元素数组长度已经大于等于了 MIN_TREEIFY_CAPACITY，那么就有必要进行结构转换了。</span></span><br><span class="line">    <span class="comment">// 根据hash值和数组长度进行取模运算后，得到链表的首节点。</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 定义首、尾节点。</span></span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 将该节点转换为树节点。</span></span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 如果尾节点为空，说明还没有根节点。</span></span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">// 首节点（根节点）指向当前节点</span></span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 尾节点不为空，以下两行代码是一个双向链表结构</span></span><br><span class="line">                <span class="comment">// 当前树节点的 前一个节点指向尾节点</span></span><br><span class="line">                p.prev = tl;</span><br><span class="line">                <span class="comment">// 尾节点的 后一个节点指向当前节点</span></span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 把当前节点设为尾节</span></span><br><span class="line">            tl = p;</span><br><span class="line">        <span class="comment">// 当遍历尾节点为null时候，则结束，否则有节点继续遍历链表</span></span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 到目前为止 也只是把Node对象转换成了TreeNode对象，把单向链表转换成了双向链表</span></span><br><span class="line">        <span class="comment">// 把转换后的双向链表，替换原来位置上的单向链表</span></span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="tableSizeFor方法"><a href="#tableSizeFor方法" class="headerlink" title="tableSizeFor方法"></a>tableSizeFor方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回大于输入参数且最近的2的整数次幂的数，例如输入14，则返回2的4次幂，即16。</span></span><br><span class="line"><span class="comment"> * 如果算出来的n大于等于最大的容量，则取最大的容量。</span></span><br><span class="line"><span class="comment"> * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来分析有关n位操作部分：先来假设n的二进制为01xxx…xxx。接着</p><p>对n右移1位：001xx…xxx，再位或：011xx…xxx</p><p>对n右移2为：00011…xxx，再位或：01111…xxx</p><p>此时前面已经有四个1了，再右移4位且位或可得8个1</p><p>同理，有8个1，右移8位肯定会让后八位也为1。</p><p>综上可得，该算法让最高位的1后面的位全变为1。</p><p>最后再让结果n+1，即得到了2的整数次幂的值了。</p><p>现在回来看看第一条语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>让cap-1再赋值给n的目的是另找到的目标值大于或<strong>等于</strong>原值。例如二进制1000，十进制数值为8。如果不对它减1而直接操作，将得到答案10000，即16。显然不是结果。减1后二进制为111，再进行操作则会得到原来的数值1000，即8。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://tech.meituan.com/2016/06/24/java-hashmap.html" target="_blank" rel="noopener">Java8系列之重新认识HashMap</a></li><li><a href="https://segmentfault.com/a/1190000003617333" target="_blank" rel="noopener">Java7HashMap知识点整理</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="backend" scheme="http://ltyeamin.github.io/categories/backend/"/>
    
    
      <category term="Java" scheme="http://ltyeamin.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>红黑树深入剖析及Java实现</title>
    <link href="http://ltyeamin.github.io/2019/03/29/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%8F%8AJava%E5%AE%9E%E7%8E%B0/"/>
    <id>http://ltyeamin.github.io/2019/03/29/红黑树深入剖析及Java实现/</id>
    <published>2019-03-29T11:00:09.000Z</published>
    <updated>2019-05-29T14:03:52.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>谈到数据结构的树，笔者的印象中还是在大学时期的概念，最早的概念源自于哈夫曼树(最优二叉树)，其他的树结构还有二叉查找树、完全二叉树、平衡二叉树(又分为AVL树、RB红黑树、<a href="https://baike.baidu.com/item/SBT" target="_blank" rel="noopener">SBT</a>、<a href="https://baike.baidu.com/item/伸展树" target="_blank" rel="noopener">伸展树</a>、<a href="https://baike.baidu.com/item/TREAP" target="_blank" rel="noopener">TREAP</a>、<a href="https://baike.baidu.com/item/替罪羊树/13859070" target="_blank" rel="noopener">替罪羊树</a> ）、平衡多叉树（B - Tree 和B+ Tree)等，今天我们来研究一下平衡二叉树的RB红黑树，因为RB红黑树在JAVA中的实现还是蛮多的。</p><p>红黑树是平衡二叉查找树的一种。为了深入理解红黑树，我们先回忆一下大学数据结构中的二叉查找树。</p><h2 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>百度百科定义如下：</p><blockquote><p>二叉排序树（Binary Sort Tree），又称<a href="https://baike.baidu.com/item/二叉查找树/7077965" target="_blank" rel="noopener">二叉查找树</a>（Binary Search Tree），亦称<a href="https://baike.baidu.com/item/二叉搜索树/7077855" target="_blank" rel="noopener">二叉搜索树</a>。</p></blockquote><blockquote><p>二叉排序树或者是一棵空树，或者是具有下列性质的<a href="https://baike.baidu.com/item/二叉树" target="_blank" rel="noopener">二叉树</a>：</p><p>（1）若左子树不空，则左子树上所有结点的值均小于它的<a href="https://baike.baidu.com/item/根结" target="_blank" rel="noopener">根结</a>点的值；</p><p>（2）若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；</p><p>（3）左、右子树也分别为二叉排序树；</p></blockquote><p>二叉查找树（Binary Search Tree，简称BST）是一棵二叉树，它的左子节点的值比父节点的值要小，右节点的值要比父节点的值大。它的高度决定了它的查找效率。</p><p>在理想的情况下，二叉查找树增删查改的时间复杂度为O(logN)（其中N为节点数），最坏的情况下为O(N)。当它的高度为logN+1时，我们就说二叉查找树是平衡的。</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个搜索的Key</span></span><br><span class="line">T  key = a search key</span><br><span class="line"><span class="comment">// 树的节点，当前节点指的是树的根节点</span></span><br><span class="line">Node root = point to the root of a BST</span><br><span class="line"><span class="comment">//循环查找树</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    <span class="comment">// 根节点为空，直接结束，无法继续查询</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果查找到，直接返回当前的节点</span></span><br><span class="line">    <span class="keyword">if</span>(root.value.equals(key))&#123;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有查到则做比较继续查询，如果当前要查找的key与当前节点value做比较，若key小于当前节点的value在左子树查找</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key.compareTo(root.value)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    root = root.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若key大于当前节点的value在右子树查找</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// 将右字数指向的root节点，继续查找</span></span><br><span class="line">    root = root.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 没有查找则返回null</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>从程序中可以看出，当BST查找的时候，先与当前节点进行比较：</p><ul><li>如果相等的话就返回当前节点；</li><li>如果少于当前节点则继续查找当前节点的左节点；</li><li>如果大于当前节点则继续查找当前节点的右节点</li></ul><p>直到当前节点指针为空或者查找到对应的节点，程序查找结束。</p><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新节点</span></span><br><span class="line">Node node = create a <span class="keyword">new</span> node with specify value</span><br><span class="line"><span class="comment">// 树的节点，默认当前节点指的是树的根节点</span></span><br><span class="line">Node root = point the root node of a BST</span><br><span class="line"><span class="comment">// 父节点引用</span></span><br><span class="line">Node parent = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//find the parent node to append the new node</span></span><br><span class="line"><span class="comment">// 在循环中，找待插入节点的父节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">   <span class="comment">// 如果根节点不存在，则直接结束，添加失败。</span></span><br><span class="line">   <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line">   <span class="comment">// 将父节点指向根节点</span></span><br><span class="line">   parent = root;</span><br><span class="line">   <span class="comment">// 如果新节点的value值小于等于root节点value的，添加到左子树，找左子树的父节点</span></span><br><span class="line">   <span class="keyword">if</span>(node.value.compareTo(root.value)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">      root = root.left;  </span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="comment">// 否则，添加到右子树，找右子树的父节点</span></span><br><span class="line">      root = root.right;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果父节点不为null，执行添加操作</span></span><br><span class="line"><span class="keyword">if</span>(parent!=<span class="keyword">null</span>)&#123;</span><br><span class="line">   <span class="comment">// 开始添加操作</span></span><br><span class="line">   <span class="keyword">if</span>(node.value.compareTo(parent.value)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">     <span class="comment">// 添加左子树</span></span><br><span class="line">     <span class="comment">//append to left</span></span><br><span class="line">      parent.left = node;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// append to right</span></span><br><span class="line">      <span class="comment">// 开始添加操作，添加右子树</span></span><br><span class="line">  parent.right = node;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入操作先通过循环查找到待插入的节点的父节点，和查找父节点的逻辑一样，都是比大小，小的往左，大的往右。找到父节点后，对比父节点，小的就插入到父节点的左节点，大就插入到父节点的右节点上。</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 待删除节点，可根据查找代码查找出待删除的节点</span></span><br><span class="line">Node node = delete a <span class="keyword">new</span> node with specify value</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果节点存在，则进行删除</span></span><br><span class="line"><span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">   <span class="comment">// 如果节点有左子树，则继续操作</span></span><br><span class="line">   <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 找到其左子树的最右边的叶子结点leftR，用该叶子结点leftR来替代待删除的节点node.把leftR的左孩子作为leftR的父亲的右孩子。</span></span><br><span class="line">      Node leftR = node.left;</span><br><span class="line">      <span class="comment">// 先前的节点的备份</span></span><br><span class="line">      Node prev = node.left;</span><br><span class="line">      <span class="keyword">while</span>(leftR.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">         prev = leftR;</span><br><span class="line">         leftR = leftR.right;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 将查找到的leftR.value赋值到node.value</span></span><br><span class="line">      node.value = leftR.value;</span><br><span class="line">      <span class="comment">// 若leftR不是node的左子树,node的左子树不变，leftR的左子树作为leftR的父结点的右孩子结点</span></span><br><span class="line">      <span class="keyword">if</span>(prev != leftR) &#123;</span><br><span class="line">          prev.right = leftR.left;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// 若是leftR的左子树，则node的左子树指向leftR的左子树</span></span><br><span class="line">         node.left=leftR.right;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// 如果节点有左子树，直接用node节点的右孩子取代它</span></span><br><span class="line">       node = node.right;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除操作的步骤如下： </p><ul><li>查找到要删除的节点。 </li><li>如果待删除的节点是叶子节点，即PL(左子树)和PR(右子树)均为空树，由于删去叶子结点不破坏整棵树的结构，则直接删除。 </li><li>如果待删除的节点不是叶子节点，则先找到待删除节点的中序遍历的后继节点，用该后继节点的值替换待删除的节点的值，然后删除后继节点。</li></ul><h3 id="存在的弊端"><a href="#存在的弊端" class="headerlink" title="存在的弊端"></a>存在的弊端</h3><p>BST存在的主要问题是，数在插入的时候会导致树倾斜，不同的插入顺序会导致树的高度不一样，而树的高度直接的影响了树的查找效率。理想的高度是logN，最坏的情况是所有的节点都在一条斜线上，这样的树的高度为N。</p><p>介于以上的弊端，我们有其他新的的树结构选择：Size Balanced Tree(SBT)、AVL树、RB红黑树、<a href="https://baike.baidu.com/item/Treap" target="_blank" rel="noopener">Treap</a>(Tree+Heap)。这些均可以使查找树的高度为O(log(n))。</p><h2 id="RB红黑树"><a href="#RB红黑树" class="headerlink" title="RB红黑树"></a>RB红黑树</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p>红黑树（Red Black Tree） 是一种自平衡二叉查找树，又称对称二叉B树，是在<a href="https://baike.baidu.com/item/计算机" target="_blank" rel="noopener">计算机</a>科学中用到的一种<a href="https://baike.baidu.com/item/数据结构/1450" target="_blank" rel="noopener">数据结构</a>，典型的用途是实现<a href="https://baike.baidu.com/item/关联数组/3317025" target="_blank" rel="noopener">关联数组</a>。</p><p>它是在1972年由Rudolf Bayer发明的，当时被称为平衡二叉B树（symmetric binary B-trees）。后来，在1978年被 Leo J. Guibas 和 Robert Sedgewick 修改为如今的“红黑树”。</p><p>红黑树和AVL树类似，都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。</p><p>它虽然是复杂的，但它的最坏情况运行时间也是非常良好的，并且在实践中是高效的： 它可以在O(log n)时间内做查找，插入和删除，这里的n 是树中元素的数目。</p></blockquote><p>基于BST存在的问题，一种新的树——平衡二叉查找树(Balanced BST)产生了。平衡树在插入和删除的时候，会通过旋转操作将高度保持在logN。其中两款具有代表性的平衡树分别为AVL树和红黑树。AVL树由于实现比较复杂，而且插入和删除性能差，在实际环境下的应用不如红黑树。</p><p>红黑树（Red-Black Tree，以下简称RBTree）的实际应用非常广泛，比如Linux内核中的完全公平调度器、高精度计时器、ext3文件系统等等，各种语言的函数库如Java的TreeMap和TreeSet，C++ STL的map、multimap、multiset等。</p><p>RBTree也是函数式语言中最常用的持久数据结构之一，在计算几何中也有重要作用。值得一提的是，Java 8中HashMap的实现也因为用RBTree取代链表，性能有所提升。</p><h3 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h3><p>RBTree的定义如下: </p><ul><li>任何一个节点都有颜色，黑色或者红色；</li><li>根节点是黑色的；</li><li>父子节点之间不能出现两个连续的红节点 ；</li><li>任何一个节点向下遍历到其子孙的叶子节点，所经过的黑节点个数必须相等 ；</li><li>空节点被认为是黑色的。</li></ul><p>数据结构表示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lass  Node&lt;T&gt;&#123;</span><br><span class="line">   <span class="keyword">public</span>  T value;</span><br><span class="line">   <span class="keyword">public</span>   Node&lt;T&gt; parent;</span><br><span class="line">   <span class="keyword">public</span>   <span class="keyword">boolean</span> isRed;</span><br><span class="line">   <span class="keyword">public</span>   Node&lt;T&gt; left;</span><br><span class="line">   <span class="keyword">public</span>   Node&lt;T&gt; right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RBTree在理论上还是一棵BST树，但是它在对BST的插入和删除操作时会维持树的平衡，即保证树的高度在[logN,logN+1]（理论上，极端的情况下可以出现RBTree的高度达到2*logN，但实际上很难遇到）。这样RBTree的查找时间复杂度始终保持在O(logN)从而接近于理想的BST。RBTree的删除和插入操作的时间复杂度也是O(logN)。RBTree的查找操作就是BST的查找操作。</p><h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="旋转操作"><a href="#旋转操作" class="headerlink" title="旋转操作"></a>旋转操作</h4><p>旋转操作(Rotate)的目的是使节点颜色符合定义，让RBTree的高度达到平衡。 Rotate分为left-rotate（左旋）和right-rotate（右旋），区分左旋和右旋的方法是：待旋转的节点从左边上升到父节点就是右旋，待旋转的节点从右边上升到父节点就是左旋。</p><h4 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h4><p>RBTree的查找操作和BST的查找操作是一样的。请参考BST的查找操作代码。</p><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><p>RBTree的插入与BST的插入方式是一致的，只不过是在插入过后，可能会导致树的不平衡，这时就需要对树进行旋转操作和颜色修复（在这里简称插入修复），使得它符合RBTree的定义。</p><p>新插入的节点是红色的，插入修复操作如果遇到父节点的颜色为黑则修复操作结束。也就是说，只有在父节点为红色节点的时候是需要插入修复操作的。</p><p>插入修复操作分为以下的三种情况，而且新插入的节点的父节点都是红色的：</p><ol><li>叔叔节点也为红色。</li><li>叔叔节点为空，且祖父节点、父节点和新节点处于一条斜线上。</li><li>叔叔节点为空，且祖父节点、父节点和新节点不处于一条斜线上。</li></ol><ul><li><p>插入操作示例1</p><p>示例1的操作是将父节点和叔叔节点与祖父节点的颜色互换，这样就符合了RBTRee的定义。即维持了高度的平衡，修复后颜色也符合RBTree定义的第三条和第四条。下图中，操作完成后A节点变成了新的节点。如果A节点的父节点不是黑色的话，则继续做修复操作。</p></li></ul><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/1a130fa3.png" alt="插入修复示例1"></p><ul><li>插入操作示例2</li></ul><p>示例2的操作是将B节点进行右旋操作，并且和父节点A互换颜色。通过该修复操作RBTRee的高度和颜色都符合红黑树的定义。如果B和C节点都是右节点的话，只要将操作变成左旋就可以了。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/d04da718.png" alt="插入修复示例2"></p><ul><li>插入操作示例3</li></ul><p>示例 3的操作是将C节点进行左旋，这样就从示例 3转换成示例 2了，然后针对示例 2进行操作处理就行了。示例 2操作做了一个右旋操作和颜色互换来达到目的。如果树的结构是下图的镜像结构，则只需要将对应的左旋变成右旋，右旋变成左旋即可。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/f1098971.png" alt="插入修复3"></p><p>插入操作的总结:</p><p>插入后的修复操作是一个向root节点回溯的操作，一旦牵涉的节点都符合了红黑树的定义，修复操作结束。之所以会向上回溯是由于示例 1操作会将父节点，叔叔节点和祖父节点进行换颜色，有可能会导致祖父节点不平衡(红黑树定义3)。这个时候需要对祖父节点为起点进行调节（向上回溯）。</p><p>祖父节点调节后如果还是遇到它的祖父颜色问题，操作就会继续向上回溯，直到root节点为止，根据定义root节点永远是黑色的。在向上的追溯的过程中，针对插入的3中情况进行调节。直到符合红黑树的定义为止。直到牵涉的节点都符合了红黑树的定义，修复操作结束。</p><p>如果上面的3中情况如果对应的操作是在右子树上，做对应的镜像操作就是了。</p><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><p>删除操作首先需要做的也是BST的删除操作，删除操作会删除对应的节点，如果是叶子节点就直接删除，如果是非叶子节点，会用对应的中序遍历的后继节点来顶替要删除节点的位置。删除后就需要做删除修复操作，使的树符合红黑树的定义，符合定义的红黑树高度是平衡的。</p><p>删除修复操作在遇到被删除的节点是红色节点或者到达root节点时，修复操作完毕。</p><p>删除修复操作是针对删除黑色节点才有的，当黑色节点被删除后会让整个树不符合RBTree的定义的第四条。需要做的处理是从兄弟节点上借调黑色的节点过来，如果兄弟节点没有黑节点可以借调的话，就只能往上追溯，将每一级的黑节点数减去一个，使得整棵树符合红黑树的定义。</p><p>删除操作的总体思想是从兄弟节点借调黑色节点使树保持局部的平衡，如果局部的平衡达到了，就看整体的树是否是平衡的，如果不平衡就接着向上追溯调整。</p><p>删除修复操作分为四种情况(删除黑节点后)：</p><ol><li>待删除的节点的兄弟节点是红色的节点。</li><li>待删除的节点的兄弟节点是黑色的节点，且兄弟节点的子节点都是黑色的。</li><li>待调整的节点的兄弟节点是黑色的节点，且兄弟节点的左子节点是红色的，右节点是黑色的(兄弟节点在右边)，     如果兄弟节点在左边的话，就是兄弟节点的右子节点是红色的，左节点是黑色的。 </li><li>待调整的节点的兄弟节点是黑色的节点，且右子节点是是红色的(兄弟节点在右边)，如果兄弟节点在左边，则就是对应的就是左节点是红色的。</li></ol><ul><li>删除操作示例1</li></ul><p>由于兄弟节点是红色节点的时候，无法借调黑节点，所以需要将兄弟节点提升到父节点，由于兄弟节点是红色的，根据RBTree的定义，兄弟节点的子节点是黑色的，就可以从它的子节点借调了。</p><p>示例1这样转换之后就会变成后面的示例2，示例3，或者示例4进行处理了。上升操作需要对C做一个左旋操作，如果是镜像结构的树只需要做对应的右旋操作即可。</p><p>之所以要做示例1操作是因为兄弟节点是红色的，无法借到一个黑节点来填补删除的黑节点。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/719ca27d.png" alt="删除情况1"></p><ul><li>删除操作示例2</li></ul><p>示例2的删除操作是由于兄弟节点可以消除一个黑色节点，因为兄弟节点和兄弟节点的子节点都是黑色的，所以可以将兄弟节点变红，这样就可以保证树的局部的颜色符合定义了。这个时候需要将父节点A变成新的节点，继续向上调整，直到整颗树的颜色符合RBTree的定义为止。</p><p>示例2这种情况下之所以要将兄弟节点变红，是因为如果把兄弟节点借调过来，会导致兄弟的结构不符合RBTree的定义，这样的情况下只能是将兄弟节点也变成红色来达到颜色的平衡。当将兄弟节点也变红之后，达到了局部的平衡了，但是对于祖父节点来说是不符合定义4的。这样就需要回溯到父节点，接着进行修复操作。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/3708ae8b.png" alt="删除情况2"></p><ul><li>删除操作示例3</li></ul><p>示例3的删除操作是一个中间步骤，它的目的是将左边的红色节点借调过来，这样就可以转换成示例4状态了，在示例4状态下可以将D，E节点都阶段过来，通过将两个节点变成黑色来保证红黑树的整体平衡。</p><p>之所以说case-3是一个中间状态，是因为根据红黑树的定义来说，下图并不是平衡的，他是通过示例2操作完后向上回溯出现的状态。之所以会出现示例3和后面的示例4的情况，是因为可以通过借用侄子节点的红色，变成黑色来符合红黑树定义4.</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/5bca53c6.png" alt="删除情况3"></p><ul><li>删除操作示例4</li></ul><p>示例4的操作是真正的节点借调操作，通过将兄弟节点以及兄弟节点的右节点借调过来，并将兄弟节点的右子节点变成红色来达到借调两个黑节点的目的，这样的话，整棵树还是符合RBTree的定义的。</p><p>示例4这种情况的发生只有在待删除的节点的兄弟节点为黑，且子节点不全部为黑，才有可能借调到两个节点来做黑节点使用，从而保持整棵树都符合红黑树的定义。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/11aa10b6.png" alt="删除情况4"></p><p>删除操作的总结:</p><p>红黑树的删除操作是最复杂的操作，复杂的地方就在于当删除了黑色节点的时候，如何从兄弟节点去借调节点，以保证树的颜色符合定义。由于红色的兄弟节点是没法借调出黑节点的，这样只能通过选择操作让他上升到父节点，而由于它是红节点，所以它的子节点就是黑的，可以借调。</p><p>对于兄弟节点是黑色节点的可以分成3种情况来处理，当所以的兄弟节点的子节点都是黑色节点时，可以直接将兄弟节点变红，这样局部的红黑树颜色是符合定义的。但是整颗树不一定是符合红黑树定义的，需要往上追溯继续调整。</p><p>对于兄弟节点的子节点为左红右黑或者 (全部为红，右红左黑)这两种情况，可以先将前面的情况通过选择转换为后一种情况，在后一种情况下，因为兄弟节点为黑，兄弟节点的右节点为红，可以借调出两个节点出来做黑节点，这样就可以保证删除了黑节点，整棵树还是符合红黑树的定义的，因为黑色节点的个数没有改变。</p><p>红黑树的删除操作是遇到删除的节点为红色，或者追溯调整到了root节点，这时删除的修复操作完毕。</p><h2 id="RB红黑树的Java实现"><a href="#RB红黑树的Java实现" class="headerlink" title="RB红黑树的Java实现"></a>RB红黑树的Java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RBTreeNode</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> T value;<span class="comment">//node value</span></span><br><span class="line"><span class="keyword">private</span> RBTreeNode&lt;T&gt; left;<span class="comment">//left child pointer</span></span><br><span class="line"><span class="keyword">private</span> RBTreeNode&lt;T&gt; right;<span class="comment">//right child pointer</span></span><br><span class="line"><span class="keyword">private</span> RBTreeNode&lt;T&gt; parent;<span class="comment">//parent pointer</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> red;<span class="comment">//color is red or not red</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RBTreeNode</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RBTreeNode</span><span class="params">(T value)</span></span>&#123;<span class="keyword">this</span>.value=value;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RBTreeNode</span><span class="params">(T value,<span class="keyword">boolean</span> isRed)</span></span>&#123;<span class="keyword">this</span>.value=value;<span class="keyword">this</span>.red = isRed;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">RBTreeNode&lt;T&gt; <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(RBTreeNode&lt;T&gt; left)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.left = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">RBTreeNode&lt;T&gt; <span class="title">getRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setRight</span><span class="params">(RBTreeNode&lt;T&gt; right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.right = right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">RBTreeNode&lt;T&gt; <span class="title">getParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setParent</span><span class="params">(RBTreeNode&lt;T&gt; parent)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.parent = parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isRed</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isBlack</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> !red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* is leaf node</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isLeaf</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> left==<span class="keyword">null</span> &amp;&amp; right==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setRed</span><span class="params">(<span class="keyword">boolean</span> red)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.red = red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeRed</span><span class="params">()</span></span>&#123;</span><br><span class="line">red=<span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeBlack</span><span class="params">()</span></span>&#123;</span><br><span class="line">red=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RBTree</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RBTreeNode&lt;T&gt; root;</span><br><span class="line"><span class="comment">//node number</span></span><br><span class="line"><span class="keyword">private</span> java.util.concurrent.atomic.AtomicLong size = </span><br><span class="line"><span class="keyword">new</span> java.util.concurrent.atomic.AtomicLong(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//in overwrite mode,all node's value can not  has samevalue</span></span><br><span class="line"><span class="comment">//in non-overwrite mode,node can have same value, suggest don't use non-overwrite mode.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> overrideMode=<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RBTree</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.root = <span class="keyword">new</span> RBTreeNode&lt;T&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RBTree</span><span class="params">(<span class="keyword">boolean</span> overrideMode)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>();</span><br><span class="line"><span class="keyword">this</span>.overrideMode=overrideMode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOverrideMode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> overrideMode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOverrideMode</span><span class="params">(<span class="keyword">boolean</span> overrideMode)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.overrideMode = overrideMode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * number of tree number</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> size.get();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get the root node</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> RBTreeNode&lt;T&gt; <span class="title">getRoot</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> root.getLeft();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * add value to a new node,if this value exist in this tree,</span></span><br><span class="line"><span class="comment"> * if value exist,it will return the exist value.otherwise return null</span></span><br><span class="line"><span class="comment"> * if override mode is true,if value exist in the tree,</span></span><br><span class="line"><span class="comment"> * it will override the old value in the tree</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">addNode</span><span class="params">(T value)</span></span>&#123;</span><br><span class="line">RBTreeNode&lt;T&gt; t = <span class="keyword">new</span> RBTreeNode&lt;T&gt;(value);</span><br><span class="line"><span class="keyword">return</span> addNode(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * find the value by give value(include key,key used for search,</span></span><br><span class="line"><span class="comment"> * other field is not used,<span class="doctag">@see</span> compare method).if this value not exist return null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">find</span><span class="params">(T value)</span></span>&#123;</span><br><span class="line">RBTreeNode&lt;T&gt; dataRoot = getRoot();</span><br><span class="line"><span class="keyword">while</span>(dataRoot!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> cmp = dataRoot.getValue().compareTo(value);</span><br><span class="line"><span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)&#123;</span><br><span class="line">dataRoot = dataRoot.getRight();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">dataRoot = dataRoot.getLeft();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> dataRoot.getValue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * remove the node by give value,if this value not exists in tree return null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value include search key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the value contain in the removed node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(T value)</span></span>&#123;</span><br><span class="line">RBTreeNode&lt;T&gt; dataRoot = getRoot();</span><br><span class="line">RBTreeNode&lt;T&gt; parent = root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(dataRoot!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> cmp = dataRoot.getValue().compareTo(value);</span><br><span class="line"><span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)&#123;</span><br><span class="line">parent = dataRoot;</span><br><span class="line">dataRoot = dataRoot.getRight();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">parent = dataRoot;</span><br><span class="line">dataRoot = dataRoot.getLeft();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dataRoot.getRight()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">RBTreeNode&lt;T&gt; min = removeMin(dataRoot.getRight());</span><br><span class="line"><span class="comment">//x used for fix color balance</span></span><br><span class="line">RBTreeNode&lt;T&gt; x = min.getRight()==<span class="keyword">null</span> ? min.getParent() : min.getRight();</span><br><span class="line"><span class="keyword">boolean</span> isParent = min.getRight()==<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">min.setLeft(dataRoot.getLeft());</span><br><span class="line">setParent(dataRoot.getLeft(),min);</span><br><span class="line"><span class="keyword">if</span>(parent.getLeft()==dataRoot)&#123;</span><br><span class="line">parent.setLeft(min);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">parent.setRight(min);</span><br><span class="line">&#125;</span><br><span class="line">setParent(min,parent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> curMinIsBlack = min.isBlack();</span><br><span class="line"><span class="comment">//inherit dataRoot's color</span></span><br><span class="line">min.setRed(dataRoot.isRed());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(min!=dataRoot.getRight())&#123;</span><br><span class="line">min.setRight(dataRoot.getRight());</span><br><span class="line">setParent(dataRoot.getRight(),min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//remove a black node,need fix color</span></span><br><span class="line"><span class="keyword">if</span>(curMinIsBlack)&#123;</span><br><span class="line"><span class="keyword">if</span>(min!=dataRoot.getRight())&#123;</span><br><span class="line">fixRemove(x,isParent);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(min.getRight()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">fixRemove(min.getRight(),<span class="keyword">false</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fixRemove(min,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">setParent(dataRoot.getLeft(),parent);</span><br><span class="line"><span class="keyword">if</span>(parent.getLeft()==dataRoot)&#123;</span><br><span class="line">parent.setLeft(dataRoot.getLeft());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">parent.setRight(dataRoot.getLeft());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//current node is black and tree is not empty</span></span><br><span class="line"><span class="keyword">if</span>(dataRoot.isBlack() &amp;&amp; !(root.getLeft()==<span class="keyword">null</span>))&#123;</span><br><span class="line">RBTreeNode&lt;T&gt; x = dataRoot.getLeft()==<span class="keyword">null</span> </span><br><span class="line">? parent :dataRoot.getLeft();</span><br><span class="line"><span class="keyword">boolean</span> isParent = dataRoot.getLeft()==<span class="keyword">null</span>;</span><br><span class="line">fixRemove(x,isParent);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">setParent(dataRoot,<span class="keyword">null</span>);</span><br><span class="line">dataRoot.setLeft(<span class="keyword">null</span>);</span><br><span class="line">dataRoot.setRight(<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span>(getRoot()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">getRoot().setRed(<span class="keyword">false</span>);</span><br><span class="line">getRoot().setParent(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">size.decrementAndGet();</span><br><span class="line"><span class="keyword">return</span> dataRoot.getValue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fix remove action</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isParent</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fixRemove</span><span class="params">(RBTreeNode&lt;T&gt; node,<span class="keyword">boolean</span> isParent)</span></span>&#123;</span><br><span class="line">RBTreeNode&lt;T&gt; cur = isParent ? <span class="keyword">null</span> : node;</span><br><span class="line"><span class="keyword">boolean</span> isRed = isParent ? <span class="keyword">false</span> : node.isRed();</span><br><span class="line">RBTreeNode&lt;T&gt; parent = isParent ? node : node.getParent();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!isRed &amp;&amp; !isRoot(cur))&#123;</span><br><span class="line">RBTreeNode&lt;T&gt; sibling = getSibling(cur,parent);</span><br><span class="line"><span class="comment">//sibling is not null,due to before remove tree color is balance</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//if cur is a left node</span></span><br><span class="line"><span class="keyword">boolean</span> isLeft = parent.getRight()==sibling;</span><br><span class="line"><span class="keyword">if</span>(sibling.isRed() &amp;&amp; !isLeft)&#123;<span class="comment">//示例1</span></span><br><span class="line"><span class="comment">//cur in right</span></span><br><span class="line">parent.makeRed();</span><br><span class="line">sibling.makeBlack();</span><br><span class="line">rotateRight(parent);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(sibling.isRed() &amp;&amp; isLeft)&#123;</span><br><span class="line"><span class="comment">//cur in left</span></span><br><span class="line">parent.makeRed();</span><br><span class="line">sibling.makeBlack();</span><br><span class="line">rotateLeft(parent);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(isBlack(sibling.getLeft()) &amp;&amp; isBlack(sibling.getRight()))&#123;<span class="comment">//示例2</span></span><br><span class="line">sibling.makeRed();</span><br><span class="line">cur = parent;</span><br><span class="line">isRed = cur.isRed();</span><br><span class="line">parent=parent.getParent();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(isLeft &amp;&amp; !isBlack(sibling.getLeft()) </span><br><span class="line">&amp;&amp; isBlack(sibling.getRight()))&#123;<span class="comment">//示例3</span></span><br><span class="line">sibling.makeRed();</span><br><span class="line">sibling.getLeft().makeBlack();</span><br><span class="line">rotateRight(sibling);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!isLeft &amp;&amp; !isBlack(sibling.getRight()) </span><br><span class="line">&amp;&amp; isBlack(sibling.getLeft()) )&#123;</span><br><span class="line">sibling.makeRed();</span><br><span class="line">sibling.getRight().makeBlack();</span><br><span class="line">rotateLeft(sibling);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(isLeft &amp;&amp; !isBlack(sibling.getRight()))&#123;<span class="comment">//示例4</span></span><br><span class="line">sibling.setRed(parent.isRed());</span><br><span class="line">parent.makeBlack();</span><br><span class="line">sibling.getRight().makeBlack();</span><br><span class="line">rotateLeft(parent);</span><br><span class="line">cur=getRoot();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!isLeft &amp;&amp; !isBlack(sibling.getLeft()))&#123;</span><br><span class="line">sibling.setRed(parent.isRed());</span><br><span class="line">parent.makeBlack();</span><br><span class="line">sibling.getLeft().makeBlack();</span><br><span class="line">rotateRight(parent);</span><br><span class="line">cur=getRoot();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isRed)&#123;</span><br><span class="line">cur.makeBlack();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(getRoot()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">getRoot().setRed(<span class="keyword">false</span>);</span><br><span class="line">getRoot().setParent(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get sibling node</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> RBTreeNode&lt;T&gt; <span class="title">getSibling</span><span class="params">(RBTreeNode&lt;T&gt; node,RBTreeNode&lt;T&gt; parent)</span></span>&#123;</span><br><span class="line">parent = node==<span class="keyword">null</span> ? parent : node.getParent();</span><br><span class="line"><span class="keyword">if</span>(node==<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> parent.getLeft()==<span class="keyword">null</span> ? parent.getRight() : parent.getLeft();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(node==parent.getLeft())&#123;</span><br><span class="line"><span class="keyword">return</span> parent.getRight();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> parent.getLeft();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBlack</span><span class="params">(RBTreeNode&lt;T&gt; node)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> node==<span class="keyword">null</span> || node.isBlack();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRoot</span><span class="params">(RBTreeNode&lt;T&gt; node)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> root.getLeft() == node &amp;&amp; node.getParent()==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * find the successor node</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node current node's right node</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> RBTreeNode&lt;T&gt; <span class="title">removeMin</span><span class="params">(RBTreeNode&lt;T&gt; node)</span></span>&#123;</span><br><span class="line"><span class="comment">//find the min node</span></span><br><span class="line">RBTreeNode&lt;T&gt; parent = node;</span><br><span class="line"><span class="keyword">while</span>(node!=<span class="keyword">null</span> &amp;&amp; node.getLeft()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">parent = node;</span><br><span class="line">node = node.getLeft();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//remove min node</span></span><br><span class="line"><span class="keyword">if</span>(parent==node)&#123;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parent.setLeft(node.getRight());</span><br><span class="line">setParent(node.getRight(),parent);</span><br><span class="line"></span><br><span class="line"><span class="comment">//don't remove right pointer,it is used for fixed color balance</span></span><br><span class="line"><span class="comment">//node.setRight(null);</span></span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">addNode</span><span class="params">(RBTreeNode&lt;T&gt; node)</span></span>&#123;</span><br><span class="line">node.setLeft(<span class="keyword">null</span>);</span><br><span class="line">node.setRight(<span class="keyword">null</span>);</span><br><span class="line">node.setRed(<span class="keyword">true</span>);</span><br><span class="line">setParent(node,<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span>(root.getLeft()==<span class="keyword">null</span>)&#123;</span><br><span class="line">root.setLeft(node);</span><br><span class="line"><span class="comment">//root node is black</span></span><br><span class="line">node.setRed(<span class="keyword">false</span>);</span><br><span class="line">size.incrementAndGet();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">RBTreeNode&lt;T&gt; x = findParentNode(node);</span><br><span class="line"><span class="keyword">int</span> cmp = x.getValue().compareTo(node.getValue());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.overrideMode &amp;&amp; cmp==<span class="number">0</span>)&#123;</span><br><span class="line">T v = x.getValue();</span><br><span class="line">x.setValue(node.getValue());</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(cmp==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//value exists,ignore this node</span></span><br><span class="line"><span class="keyword">return</span> x.getValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setParent(node,x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">x.setLeft(node);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">x.setRight(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fixInsert(node);</span><br><span class="line">size.incrementAndGet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * find the parent node to hold node x,if parent value equals x.value return parent.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> RBTreeNode&lt;T&gt; <span class="title">findParentNode</span><span class="params">(RBTreeNode&lt;T&gt; x)</span></span>&#123;</span><br><span class="line">RBTreeNode&lt;T&gt; dataRoot = getRoot();</span><br><span class="line">RBTreeNode&lt;T&gt; child = dataRoot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(child!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> cmp = child.getValue().compareTo(x.getValue());</span><br><span class="line"><span class="keyword">if</span>(cmp==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">dataRoot = child;</span><br><span class="line">child = child.getLeft();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)&#123;</span><br><span class="line">dataRoot = child;</span><br><span class="line">child = child.getRight();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dataRoot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * red black tree insert fix.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fixInsert</span><span class="params">(RBTreeNode&lt;T&gt; x)</span></span>&#123;</span><br><span class="line">RBTreeNode&lt;T&gt; parent = x.getParent();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(parent!=<span class="keyword">null</span> &amp;&amp; parent.isRed())&#123;</span><br><span class="line">RBTreeNode&lt;T&gt; uncle = getUncle(x);</span><br><span class="line"><span class="keyword">if</span>(uncle==<span class="keyword">null</span>)&#123;<span class="comment">//need to rotate</span></span><br><span class="line">RBTreeNode&lt;T&gt; ancestor = parent.getParent();</span><br><span class="line"><span class="comment">//ancestor is not null due to before before add,tree color is balance</span></span><br><span class="line"><span class="keyword">if</span>(parent == ancestor.getLeft())&#123;</span><br><span class="line"><span class="keyword">boolean</span> isRight = x == parent.getRight();</span><br><span class="line"><span class="keyword">if</span>(isRight)&#123;</span><br><span class="line">rotateLeft(parent);</span><br><span class="line">&#125;</span><br><span class="line">rotateRight(ancestor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isRight)&#123;</span><br><span class="line">x.setRed(<span class="keyword">false</span>);</span><br><span class="line">parent=<span class="keyword">null</span>;<span class="comment">//end loop</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">parent.setRed(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">ancestor.setRed(<span class="keyword">true</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> isLeft = x == parent.getLeft();</span><br><span class="line"><span class="keyword">if</span>(isLeft)&#123;</span><br><span class="line">rotateRight(parent);</span><br><span class="line">&#125;</span><br><span class="line">rotateLeft(ancestor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isLeft)&#123;</span><br><span class="line">x.setRed(<span class="keyword">false</span>);</span><br><span class="line">parent=<span class="keyword">null</span>;<span class="comment">//end loop</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">parent.setRed(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">ancestor.setRed(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//uncle is red</span></span><br><span class="line">parent.setRed(<span class="keyword">false</span>);</span><br><span class="line">uncle.setRed(<span class="keyword">false</span>);</span><br><span class="line">parent.getParent().setRed(<span class="keyword">true</span>);</span><br><span class="line">x=parent.getParent();</span><br><span class="line">parent = x.getParent();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">getRoot().makeBlack();</span><br><span class="line">getRoot().setParent(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get uncle node</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> RBTreeNode&lt;T&gt; <span class="title">getUncle</span><span class="params">(RBTreeNode&lt;T&gt; node)</span></span>&#123;</span><br><span class="line">RBTreeNode&lt;T&gt; parent = node.getParent();</span><br><span class="line">RBTreeNode&lt;T&gt; ancestor = parent.getParent();</span><br><span class="line"><span class="keyword">if</span>(ancestor==<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(parent == ancestor.getLeft())&#123;</span><br><span class="line"><span class="keyword">return</span> ancestor.getRight();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> ancestor.getLeft();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotateLeft</span><span class="params">(RBTreeNode&lt;T&gt; node)</span></span>&#123;</span><br><span class="line">RBTreeNode&lt;T&gt; right = node.getRight();</span><br><span class="line"><span class="keyword">if</span>(right==<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> java.lang.IllegalStateException(<span class="string">"right node is null"</span>);</span><br><span class="line">&#125;</span><br><span class="line">RBTreeNode&lt;T&gt; parent = node.getParent();</span><br><span class="line">node.setRight(right.getLeft());</span><br><span class="line">setParent(right.getLeft(),node);</span><br><span class="line"></span><br><span class="line">right.setLeft(node);</span><br><span class="line">setParent(node,right);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(parent==<span class="keyword">null</span>)&#123;<span class="comment">//node pointer to root</span></span><br><span class="line"><span class="comment">//right  raise to root node</span></span><br><span class="line">root.setLeft(right);</span><br><span class="line">setParent(right,<span class="keyword">null</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(parent.getLeft()==node)&#123;</span><br><span class="line">parent.setLeft(right);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">parent.setRight(right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//right.setParent(parent);</span></span><br><span class="line">setParent(right,parent);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">(RBTreeNode&lt;T&gt; node)</span></span>&#123;</span><br><span class="line">RBTreeNode&lt;T&gt; left = node.getLeft();</span><br><span class="line"><span class="keyword">if</span>(left==<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> java.lang.IllegalStateException(<span class="string">"left node is null"</span>);</span><br><span class="line">&#125;</span><br><span class="line">RBTreeNode&lt;T&gt; parent = node.getParent();</span><br><span class="line">node.setLeft(left.getRight());</span><br><span class="line">setParent(left.getRight(),node);</span><br><span class="line"></span><br><span class="line">left.setRight(node);</span><br><span class="line">setParent(node,left);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(parent==<span class="keyword">null</span>)&#123;</span><br><span class="line">root.setLeft(left);</span><br><span class="line">setParent(left,<span class="keyword">null</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(parent.getLeft()==node)&#123;</span><br><span class="line">parent.setLeft(left);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">parent.setRight(left);</span><br><span class="line">&#125;</span><br><span class="line">setParent(left,parent);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(RBTreeNode&lt;T&gt; node,RBTreeNode&lt;T&gt; parent)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(node!=<span class="keyword">null</span>)&#123;</span><br><span class="line">node.setParent(parent);</span><br><span class="line"><span class="keyword">if</span>(parent==root)&#123;</span><br><span class="line">node.setParent(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * debug method,it used print the given node and its children nodes,</span></span><br><span class="line"><span class="comment"> * every layer output in one line</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTree</span><span class="params">(RBTreeNode&lt;T&gt; root)</span></span>&#123;</span><br><span class="line">java.util.LinkedList&lt;RBTreeNode&lt;T&gt;&gt; queue =<span class="keyword">new</span> java.util.LinkedList&lt;RBTreeNode&lt;T&gt;&gt;();</span><br><span class="line">java.util.LinkedList&lt;RBTreeNode&lt;T&gt;&gt; queue2 =<span class="keyword">new</span> java.util.LinkedList&lt;RBTreeNode&lt;T&gt;&gt;();</span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">queue.add(root);</span><br><span class="line"><span class="keyword">boolean</span> firstQueue = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!queue.isEmpty() || !queue2.isEmpty())&#123;</span><br><span class="line">java.util.LinkedList&lt;RBTreeNode&lt;T&gt;&gt; q = firstQueue ? queue : queue2;</span><br><span class="line">RBTreeNode&lt;T&gt; n = q.poll();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(n!=<span class="keyword">null</span>)&#123;</span><br><span class="line">String pos = n.getParent()==<span class="keyword">null</span> ? <span class="string">""</span> : ( n == n.getParent().getLeft() ? <span class="string">" LE"</span> : <span class="string">" RI"</span>);</span><br><span class="line">String pstr = n.getParent()==<span class="keyword">null</span> ? <span class="string">""</span> : n.getParent().toString();</span><br><span class="line">String cstr = n.isRed()?<span class="string">"R"</span>:<span class="string">"B"</span>;</span><br><span class="line">cstr = n.getParent()==<span class="keyword">null</span> ? cstr : cstr+<span class="string">" "</span>;</span><br><span class="line">System.out.print(n+<span class="string">"("</span>+(cstr)+pstr+(pos)+<span class="string">")"</span>+<span class="string">"\t"</span>);</span><br><span class="line"><span class="keyword">if</span>(n.getLeft()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">(firstQueue ? queue2 : queue).add(n.getLeft());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n.getRight()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">(firstQueue ? queue2 : queue).add(n.getRight());</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println();</span><br><span class="line">firstQueue = !firstQueue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">RBTree&lt;String&gt; bst = <span class="keyword">new</span> RBTree&lt;String&gt;();</span><br><span class="line">bst.addNode(<span class="string">"d"</span>);</span><br><span class="line">bst.addNode(<span class="string">"d"</span>);</span><br><span class="line">bst.addNode(<span class="string">"c"</span>);</span><br><span class="line">bst.addNode(<span class="string">"c"</span>);</span><br><span class="line">bst.addNode(<span class="string">"b"</span>);</span><br><span class="line">bst.addNode(<span class="string">"f"</span>);</span><br><span class="line"></span><br><span class="line">bst.addNode(<span class="string">"a"</span>);</span><br><span class="line">bst.addNode(<span class="string">"e"</span>);</span><br><span class="line"></span><br><span class="line">bst.addNode(<span class="string">"g"</span>);</span><br><span class="line">bst.addNode(<span class="string">"h"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bst.remove(<span class="string">"c"</span>);</span><br><span class="line"></span><br><span class="line">bst.printTree(bst.getRoot());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码调试的时候，printTree输出格式如下: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">d(B)</span><br><span class="line">b(B d LE) g(R d RI)</span><br><span class="line">a(R b LE) e(B g LE) h(B g RI)</span><br><span class="line">f(R e RI)</span><br></pre></td></tr></table></figure><p>括号左边表示元素的内容。括号内的第一个元素表示颜色，B表示black，R表示red；第二个元素表示父元素的值；第三个元素表示左右，LE表示在父元素的左边。RI表示在父元素的右边。</p><p>第一个元素d是root节点，由于它没有父节点，所以括号内只有一个元素。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>作为平衡二叉查找树里面众多的实现之一，红黑树无疑是最简洁、实现最为简单的。红黑树通过引入颜色的概念，通过颜色这个约束条件的使用来保持树的高度平衡。作为平衡二叉查找树，旋转是一个必不可少的操作。通过旋转可以降低树的高度，在红黑树里面还可以转换颜色。</p><p>红黑树里面的插入和删除的操作比较难理解，这时要注意记住一点：操作之前红黑树是平衡的，颜色是符合定义的。在操作的时候就需要向兄弟节点、父节点、侄子节点借调和互换颜色，要达到这个目的，就需要不断的进行旋转。所以红黑树的插入删除操作需要不停的旋转，一旦借调了别的节点，删除和插入的节点就会达到局部的平衡（局部符合红黑树的定义），但是被借调的节点就不会平衡了，这时就需要以被借调的节点为起点继续进行调整，直到整棵树都是平衡的。在整个修复的过程中，插入具体的分为3种情况，删除分为4种情况。</p><p>整个红黑树的查找，插入和删除都是O(logN)的，原因就是整个红黑树的高度是logN，查找从根到叶，走过的路径是树的高度，删除和插入操作是从叶到根的，所以经过的路径都是logN。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>Cormen T H, Leiserson C E, Rivest R L, 等. 算法导论（第3版）. 殷建平, 等. 机械工业出版社, 2012.</li><li>Sedgewick R, Wayne K. 算法（第4版）. 谢路云 译. 人民邮电出版社, 2012.</li><li>Weiss M A. 数据结构与算法分析（第2版）. 冯舜玺 译. 机械工业出版社, 2004.</li><li>Knuth D E. 计算机程序设计艺术 卷3：排序与查找（英文版 第2版）. 人民邮电出版社, 2010.</li><li><a href="https://baike.baidu.com/item/二叉排序树/10905079?fromtitle=二叉查找树&amp;fromid=7077965" target="_blank" rel="noopener">二叉查找树百度百科</a></li><li><a href="https://baike.baidu.com/item/红黑树" target="_blank" rel="noopener">RB红黑树百度百科</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="algorithm" scheme="http://ltyeamin.github.io/categories/algorithm/"/>
    
    
      <category term="二叉树" scheme="http://ltyeamin.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>谈谈国内大环境下的996加班文化</title>
    <link href="http://ltyeamin.github.io/2019/03/28/%E8%B0%88%E8%B0%88%E5%9B%BD%E5%86%85%E5%A4%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84996%E5%8A%A0%E7%8F%AD%E6%96%87%E5%8C%96/"/>
    <id>http://ltyeamin.github.io/2019/03/28/谈谈国内大环境下的996加班文化/</id>
    <published>2019-03-28T04:57:10.000Z</published>
    <updated>2019-10-12T12:52:42.328Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>LZ每天都要打开<a href="https://www.oschina.net/" target="_blank" rel="noopener">开源中国</a>网站看看互联网百态，在今天的网站里，看到了两件有意思的趣事:</p><ul><li><p>抵制996加班文化<a href="https://996.icu/#/zh_CN" target="_blank" rel="noopener">996.icu</a>，大家在<a href="https://github.com/996icu/996.ICU" target="_blank" rel="noopener">996I.ICU GitHub</a>畅谈自由、吐槽加班</p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180328001/icu01.jpeg" alt="996.ICU官网"></p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180328001/icu03.png" alt="996.ICU GitHub"></p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180328001/icu02.png" alt="996.ICU GitHub Issues"></p></li><li><p>某程序员删库跑路制作的网站-<a href="http://www.ahauto.com/" target="_blank" rel="noopener">安徽汽车网</a>是由简单的图片显示拼接而成的。</p></li></ul><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180328001/carsize.png" alt="安徽汽车网官网"></p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180328001/resource.png" alt="安徽汽车网官网源码"></p><h2 id="996加班文化"><a href="#996加班文化" class="headerlink" title="996加班文化"></a>996加班文化</h2><p>无论是传统行业，还是互联网行业，现在公司加班情况可以说得是司空见惯了。尤其是在互联网行业能更加体现出来，比如华为、京东最为常见。加班文化已经成为了普遍现象，劳动法规定在必要的情况下，公司可以适当安排一下加班，员工需配合，公司承诺并给更好的福利待遇。</p><p>在大公司里，工作强度大很正常，员工早已习以为常，不仅仅愿意接受加班，而且加班加的一身热血。我想接受的原因是各种福利待遇的诱惑。但是中小型公司里不见得是这样子的，如果普通公司都和华为、京东这样大型公司待遇一样的话，大家肯定对加班的积极性很强。</p><p>我曾经入职的一家公司也存在的996加班文化，当时公司业务正处于高速发展期，整个技术部门经常加班，当时福利待遇是按时支付加班费来兑现的，工作日晚上7点算加班，加班费按加班小时乘以1倍再乘以平均日薪去算，周末以及法定节日加班费按加班小时乘以1.5倍再乘以平均日薪，凡是加班超过3个小时的，有餐补，超过4个小时的，有餐补车补。</p><p>我上学期间曾经看过马克思主义哲学，马克思主义认为任何事物都是作为矛盾统一体而存在的，矛盾是事物发展的源泉和动力。简言之，矛盾就是对立统一，任何事情都有两面性。接下来我站在不同的客观角度来分析一下上述加班文化:</p><ul><li><p>站在员工的角度</p><p>我们不可否认加班确实能提高工作效率，公司需要我们加班，我们绝不推辞，因为有了福利待遇的保证。</p><p>只要有福利待遇，大家都很愿意加班，如果没有福利，大家几乎是没有意向主动加班，除非有非常紧急的任务才勉强接受加班。如果没有福利待遇，作为员工宁愿提高工作效率，也不愿意在公司进行无偿加班。但是，话有说回来，如果有福利待遇，不见得能够提高工作效率。</p></li><li><p>站在公司的角度</p><p>从公司的角度上来讲，加班可以让人力资源合理分配，使得公司大步向前迈。但是客观来讲，一般公司大肆宣扬加班文化，有可能公司出现健康状况，这个是由加班效率高低来决定的，加班不一定提高效率。这就和中国50年代大跃进赶英超美思想一样，冒进思想，并没有立足现实。</p></li></ul><p>这个让我想我的一个同事，他平时几乎也不怎么加班，只有紧急任务的时候才会选择加班。有一次他的Leader问：大家都在加班，为什么你不加班？它的回答Leader大吃一惊，他说他当天的任务已经完成，只要按照预期时间完成就好。如果公司技术氛围和BAT大型互联网公司一个级别的，我更愿意无偿加到11点。如果没有技术氛围，加班对自身来讲没有什么技术收获和能力提升。平时只需要保证正常的任务按点完成即可。他的Leader听到后也无语了，瞬间认为他不合群。</p><p>我觉得任何老板和Leader都没有强制要求加班的权利。我那个同事住的地方和公司很远，日常上下班坐地铁要1个小时四十分钟，即便晚上6点整下班，回去都快8点了。我问他为什么不给Leader反应这个问题，让Leader体谅一下。他说不用，他发现并不是他不合群，而是不习惯那种公司氛围，老板要产出要加班，加班没待遇，领导也是听老板的吩咐，就要求加班，于是效果很明显，大家都是白天干其他事情，晚上干活，如果是我的话，我也受不了，毕竟我们正年轻。后来我同事离职了，换了一家只有20人的天使轮创业型公司，他给我说虽然很累，但是每天很充实，对未来有了更好的希望。</p><p>听到我这个同事的情况，我的总结是：作为员工，尽量提高白天的工作效率，把自己的工作做好，自己做的东西尽量不要出大问题。如果真的有需要加班的，听从Leader的安排，如果有福利待遇的保证，多为公司产出，如果没有待遇，适当即可，毕竟自己的福利待遇也是有必要的。</p><p>大公司我就不说了，中小型公司我建议抵制996、985不良的加班文化，而提倡724的加班文化，这里的724并不是公司让员工每周工作7天，每日工作24小时。而是无论什么日子，如果有紧急任务，7天中，五天在公司正常上班，有必要加班可以在家完成工作，福利待遇保证，这样做一个协调，避免可能1个小时解决的问题，非要赶往公司造成多个小时加班，解决了效率低的问题，在家加班相信大部分程序员会不计较那一个小时的时间，如果加班时间较长，公司给予相应的福利待遇，即节省了员工返公司的时间，也解决了实际性问题。在这里，有些人可能质疑，因为在家具体是否做事，公司并不知情，但是这种情况，是永远无法避免的，因为这是程序员的职业操作，是一个人的基本素养问题。如果人都是这样自私自利、缺乏责任心，也就没有团队，更没有朋友，我相信这种人的人生不会走的更远。</p><h2 id="程序员的抱怨"><a href="#程序员的抱怨" class="headerlink" title="程序员的抱怨"></a>程序员的抱怨</h2><p>大家经常听到一句话就是：干的不爽，删库跑路。每天全国的互联网公司都可能发生这样的事情，某程序员因和公司产生利益纠纷锁服务器、删库、删代码、故意挖坑。</p><p>出现这样的情况已经司空见惯了。我作为互联网行业的一份子，站在我的角度分析，每个程序员都应该有良好的职业操守，如果真出现利益纠纷，我们可以用合法的方式去解决，用法律方式去维权，和平解决，尽可能不要起任何冲突。说到这里有些时候靠法律确实没办法占据有利地位，毕竟单人不可能玩过公司的。我们只能从入职的那一天开始，什么的福利待遇都写在合同里，这才算数。如果因为其他原因的话，大可不必为之恼怒，因为物以类聚、人以群分，主动离职便是。</p><p>创业公司好多老板都在给员工画饼，这种洗脑式的画饼员工们还是斟酌斟酌。对老板说的话，去其糟粕，取其精华。只听对自己有益的话，之所以老板能开一个公司，肯定是在某方面有一定的过人之处。</p><h2 id="写在最后的网络段子"><a href="#写在最后的网络段子" class="headerlink" title="写在最后的网络段子"></a>写在最后的网络段子</h2><blockquote><p>2019年3月27日，996.icu项目上线，第二天，项目达到3w个star，就在当日，安徽汽车网的兄弟第一个揭竿起义，删库跑路，史称3.28事件，同年五月工程师们成立反加班工会。</p><p>2020年两会期间，迫于社会和反加班工会压力，国家将禁止加班写入宪法。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="others" scheme="http://ltyeamin.github.io/categories/others/"/>
    
    
      <category term="杂谈" scheme="http://ltyeamin.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>视频下载神器之you-get</title>
    <link href="http://ltyeamin.github.io/2019/03/27/%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E7%A5%9E%E5%99%A8%E4%B9%8Byou-get/"/>
    <id>http://ltyeamin.github.io/2019/03/27/视频下载神器之you-get/</id>
    <published>2019-03-27T05:00:50.000Z</published>
    <updated>2019-10-12T12:52:43.294Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>  我们日常上网过程中，需要将网页中的视频资源提取下载出来，一般如果网站没有屏蔽视频地址且用的是非Flash播放器(现流行HTML5播放器),我们可以在视频播放器右键直接下载视频资源，但是国内网站运营商为了保护版权，会将真正的资源地址屏蔽起来，我们无法找到真实地址并进行下载。因此出现了好多第三方的应用来帮助我们提取网页中的视频，常见的提取软件有Chrome插件Video download helper和Video Downloader GetThemAll、国内以前很著名的硕鼠和维棠视频下载(这两个LZ之前经常用，硕鼠经常用于下载51CTO的教学视频，维棠经常用于电视剧批量下载)。</p><p>今天我给大家带来一款视频下载神器you-get，<a href="https://you-get.org/" target="_blank" rel="noopener">you-get</a> 乃一小小哒命令行程序，提供便利的方式来下载网络上的媒体信息。好了，话不多说，接下来让我们开始体验一下吧。</p><h2 id="为什么你要好好的用"><a href="#为什么你要好好的用" class="headerlink" title="为什么你要好好的用"></a>为什么你要好好的用</h2><ul><li>你欢喜于互联网上的富媒体内容，并为个人寻欢而储存</li><li>你喜悦观看的视频，然而不得保存；对个人设备无从控制，此乃违背开放互联网之行为</li><li>你寻求解脱于闭源软件或JavaScript代码，并禁止Flash运行</li><li>你为黑客精神与自由软件而欣喜</li></ul><h2 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h2><ul><li>下载流行网站之音视频，例如YouTube, Youku, Niconico,以及更多. (查看<a href="https://github.com/soimort/you-get/wiki/%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E#supported-sites" target="_blank" rel="noopener">完整支持列表</a>)</li><li>于您心仪的媒体播放器中观看在线视频，脱离浏览器与广告</li><li>下载您喜欢的网页上的图片</li><li>下载任何非HTML内容，例如二进制文件</li></ul><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><h3 id="Mac安装"><a href="#Mac安装" class="headerlink" title="Mac安装"></a>Mac安装</h3><ol><li><p>在Mac上安装<a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a>，Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能，功能类似于Linux平台上的apt-get或yum操作。进入Mac终端输入一下命令即可安装Homebrew;</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure></li><li><p>安装完成Homebrew后，我们来安装you-get工具，输入一下命令即可安装完成;</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yeamin:Hexo mac$ brew install you-get</span><br></pre></td></tr></table></figure></li><li><p>安装完成后，我们检查版本来确认是否安装成功。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yeamin:Hexo mac$ you-get -V</span><br><span class="line">you-get: version 0.4.1205, a tiny downloader that scrapes the web.</span><br></pre></td></tr></table></figure></li></ol><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><ol><li><p>安装Python3；</p></li><li><p>使用pip来安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install you-get</span><br></pre></td></tr></table></figure></li></ol><h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><ol><li>下载<a href="https://github.com/soimort/you-get/releases/latest" target="_blank" rel="noopener">Windows预装包</a>即可；</li><li>安装并执行可运行程序。</li></ol><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p>即使您不常使用Python，作为开发者，也请使用此方法。</p><ol><li><p>下载安装资源，如下命令;</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://github.com/soimort/you-get.git</span><br></pre></td></tr></table></figure></li><li><p>将目录加入 <code>PATH</code>, 或运行 <code>make install</code> 以安装<code>you-get</code>于永久路径。</p></li></ol><h2 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h2><p>以最近热播的电视剧《都挺好》为例，操作如下：</p><h3 id="查询视频信息"><a href="#查询视频信息" class="headerlink" title="查询视频信息"></a>查询视频信息</h3><p>可以使用 <code>--info</code>/<code>-i</code> 以查看所有可用画质与格式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you-get -i <span class="string">'https://v.youku.com/v_show/id_XNDA3OTMzMTE4MA==.html?spm=a2h1n.8261147.reload_1.1~3~A&amp;s=4e4e42efbfbdefbfbd62'</span></span><br></pre></td></tr></table></figure><p>执行上述命令后，观察执行结果我们可以观察出电视剧《都挺好》第1集的片源来自优酷，画质有超清、高清、渣清、标清，视频格式都为mp4，视频文件大小以及相关地址链接。</p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190327001/info.png" alt="视频信息查询"></p><h3 id="下载视频"><a href="#下载视频" class="headerlink" title="下载视频"></a>下载视频</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you-get <span class="string">'https://v.youku.com/v_show/id_XNDA3OTMzMTE4MA==.html?spm=a2h1n.8261147.reload_1.1~3~A&amp;s=4e4e42efbfbdefbfbd62'</span></span><br></pre></td></tr></table></figure><p>输入上述命令后，即可开始下载，默认画质为超清画质，视频会分段下载，下载完成之后，you-get自动调用ffmpeg将多段视频进行合并操作。</p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190327001/downing.png" alt="开始下载"></p><h3 id="加载Cookies"><a href="#加载Cookies" class="headerlink" title="加载Cookies"></a>加载Cookies</h3><p>在这个下载的过程中，我们发现一个问题，比如下载下来的视频大小与显示的大小不符合，我们下下来只有80M左右，视频时间为10分钟左右。</p><p>为什么会这样呢？LZ查好好阅读了一下WIKI，原因是网站视频只公开一部分视频片段，并非所有视频可供任何人观看。如果需要登录以观看 (例如, 私密视频), 可能必须将浏览器cookie通过<code>--cookies</code>/<code>-c</code> 加载入 <code>you-get</code>。需要我们登录的Cookies信息，我们登录后将打开F12查看Cookie信息，一查看，一大堆Cookie，怎么整，于是LZ又找到一个<a href="http://pz9h1gr1x.bkt.clouddn.com/tools/20190327001/www.cnplugins.com_njabckikapfpffapmjgojcnbfjonfjfg_1_8_5_0_.crx" target="_blank" rel="noopener">Chrome浏览器的插件</a>，自动生成Cookies，如图，可以将红色区域拷贝到Cookies.txt中，然后继续执行下载操作。</p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190327001/Cookie.png" alt="Cookies信息获取"></p><p>注意:</p><ul><li>目前我们支持两种cookie格式：Mozilla <code>cookies.sqlite</code> 和 Netscape <code>cookies.txt</code>.</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you-get -c Cookies.txt https://v.youku.com/v_show/id_XNDA3OTMzMTE4MA==.html</span><br></pre></td></tr></table></figure><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190327001/download.png" alt="Cookies下载"></p><h3 id="本地播放器播放"><a href="#本地播放器播放" class="headerlink" title="本地播放器播放"></a>本地播放器播放</h3><p>如果你只是在用自己本地播放器进行观看的话使用而不是下载的话，则可以 <code>--player</code>/<code>-p</code> 将视频喂进播放器, 例如 <code>mplayer</code>或者 <code>vlc</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ you-get -p vlc <span class="string">'https://www.youtube.com/watch?v=jNQXAC9IVRw'</span></span><br></pre></td></tr></table></figure><p>或者你想在浏览器中观看而不希望看广告或评论区:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ you-get -p chromium <span class="string">'https://www.youtube.com/watch?v=jNQXAC9IVRw'</span></span><br></pre></td></tr></table></figure><h2 id="支持主流网站列表"><a href="#支持主流网站列表" class="headerlink" title="支持主流网站列表"></a>支持主流网站列表</h2><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>网站</td><td>URL</td><td>视频?</td><td>图像?</td><td>音频?</td></tr><tr><td><strong>YouTube</strong></td><td><a href="https://www.youtube.com/" target="_blank" rel="noopener">https://www.youtube.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td><strong>Twitter</strong></td><td><a href="https://twitter.com/" target="_blank" rel="noopener">https://twitter.com/</a></td><td>✓</td><td>✓</td><td></td></tr><tr><td>VK</td><td><a href="http://vk.com/" target="_blank" rel="noopener">http://vk.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>Vine</td><td><a href="https://vine.co/" target="_blank" rel="noopener">https://vine.co/</a></td><td>✓</td><td></td><td></td></tr><tr><td>Vimeo</td><td><a href="https://vimeo.com/" target="_blank" rel="noopener">https://vimeo.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>Vidto</td><td><a href="http://vidto.me/" target="_blank" rel="noopener">http://vidto.me/</a></td><td>✓</td><td></td><td></td></tr><tr><td>Veoh</td><td><a href="http://www.veoh.com/" target="_blank" rel="noopener">http://www.veoh.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td><strong>Tumblr</strong></td><td><a href="https://www.tumblr.com/" target="_blank" rel="noopener">https://www.tumblr.com/</a></td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>TED</td><td><a href="http://www.ted.com/" target="_blank" rel="noopener">http://www.ted.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>SoundCloud</td><td><a href="https://soundcloud.com/" target="_blank" rel="noopener">https://soundcloud.com/</a></td><td></td><td></td><td>✓</td></tr><tr><td>Pinterest</td><td><a href="https://www.pinterest.com/" target="_blank" rel="noopener">https://www.pinterest.com/</a></td><td></td><td>✓</td><td></td></tr><tr><td>MusicPlayOn</td><td><a href="http://en.musicplayon.com/" target="_blank" rel="noopener">http://en.musicplayon.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>MTV81</td><td><a href="http://www.mtv81.com/" target="_blank" rel="noopener">http://www.mtv81.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>Mixcloud</td><td><a href="https://www.mixcloud.com/" target="_blank" rel="noopener">https://www.mixcloud.com/</a></td><td></td><td></td><td>✓</td></tr><tr><td>Metacafe</td><td><a href="http://www.metacafe.com/" target="_blank" rel="noopener">http://www.metacafe.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>Magisto</td><td><a href="http://www.magisto.com/" target="_blank" rel="noopener">http://www.magisto.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>Khan Academy</td><td><a href="https://www.khanacademy.org/" target="_blank" rel="noopener">https://www.khanacademy.org/</a></td><td>✓</td><td></td><td></td></tr><tr><td>JPopsuki TV</td><td><a href="http://www.jpopsuki.tv/" target="_blank" rel="noopener">http://www.jpopsuki.tv/</a></td><td>✓</td><td></td><td></td></tr><tr><td>Internet Archive</td><td><a href="https://archive.org/" target="_blank" rel="noopener">https://archive.org/</a></td><td>✓</td><td></td><td></td></tr><tr><td><strong>Instagram</strong></td><td><a href="https://instagram.com/" target="_blank" rel="noopener">https://instagram.com/</a></td><td>✓</td><td>✓</td><td></td></tr><tr><td>Heavy Music Archive</td><td><a href="http://www.heavy-music.ru/" target="_blank" rel="noopener">http://www.heavy-music.ru/</a></td><td></td><td></td><td>✓</td></tr><tr><td><strong>Google+</strong></td><td><a href="https://plus.google.com/" target="_blank" rel="noopener">https://plus.google.com/</a></td><td>✓</td><td>✓</td><td></td></tr><tr><td>Freesound</td><td><a href="http://www.freesound.org/" target="_blank" rel="noopener">http://www.freesound.org/</a></td><td></td><td></td><td>✓</td></tr><tr><td>Flickr</td><td><a href="https://www.flickr.com/" target="_blank" rel="noopener">https://www.flickr.com/</a></td><td>✓</td><td>✓</td><td></td></tr><tr><td>Facebook</td><td><a href="https://www.facebook.com/" target="_blank" rel="noopener">https://www.facebook.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>eHow</td><td><a href="http://www.ehow.com/" target="_blank" rel="noopener">http://www.ehow.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>Dailymotion</td><td><a href="http://www.dailymotion.com/" target="_blank" rel="noopener">http://www.dailymotion.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>CBS</td><td><a href="http://www.cbs.com/" target="_blank" rel="noopener">http://www.cbs.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>Bandcamp</td><td><a href="http://bandcamp.com/" target="_blank" rel="noopener">http://bandcamp.com/</a></td><td></td><td></td><td>✓</td></tr><tr><td>AliveThai</td><td><a href="http://alive.in.th/" target="_blank" rel="noopener">http://alive.in.th/</a></td><td>✓</td><td></td><td></td></tr><tr><td>interest.me</td><td><a href="http://ch.interest.me/tvn" target="_blank" rel="noopener">http://ch.interest.me/tvn</a></td><td>✓</td><td></td><td></td></tr><tr><td><strong>755ナナゴーゴー</strong></td><td><a href="http://7gogo.jp/" target="_blank" rel="noopener">http://7gogo.jp/</a></td><td>✓</td><td>✓</td><td></td></tr><tr><td><strong>niconicoニコニコ動画</strong></td><td><a href="http://www.nicovideo.jp/" target="_blank" rel="noopener">http://www.nicovideo.jp/</a></td><td>✓</td><td></td><td></td></tr><tr><td><strong>163网易视频网易云音乐</strong></td><td><a href="http://v.163.com/" target="_blank" rel="noopener">http://v.163.com/</a> <a href="http://music.163.com/" target="_blank" rel="noopener">http://music.163.com/</a></td><td>✓</td><td></td><td>✓</td></tr><tr><td>56网</td><td><a href="http://www.56.com/" target="_blank" rel="noopener">http://www.56.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td><strong>AcFun</strong></td><td><a href="http://www.acfun.tv/" target="_blank" rel="noopener">http://www.acfun.tv/</a></td><td>✓</td><td></td><td></td></tr><tr><td><strong>Baidu百度贴吧</strong></td><td><a href="http://tieba.baidu.com/" target="_blank" rel="noopener">http://tieba.baidu.com/</a></td><td>✓</td><td>✓</td><td></td></tr><tr><td>爆米花网</td><td><a href="http://www.baomihua.com/" target="_blank" rel="noopener">http://www.baomihua.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td><strong>bilibili哔哩哔哩</strong></td><td><a href="http://www.bilibili.com/" target="_blank" rel="noopener">http://www.bilibili.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>Dilidili</td><td><a href="http://www.dilidili.com/" target="_blank" rel="noopener">http://www.dilidili.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>豆瓣</td><td><a href="http://www.douban.com/" target="_blank" rel="noopener">http://www.douban.com/</a></td><td></td><td></td><td>✓</td></tr><tr><td>斗鱼</td><td><a href="http://www.douyutv.com/" target="_blank" rel="noopener">http://www.douyutv.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>凤凰视频</td><td><a href="http://v.ifeng.com/" target="_blank" rel="noopener">http://v.ifeng.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>风行网</td><td><a href="http://www.fun.tv/" target="_blank" rel="noopener">http://www.fun.tv/</a></td><td>✓</td><td></td><td></td></tr><tr><td>iQIYI 爱奇艺</td><td><a href="http://www.iqiyi.com/" target="_blank" rel="noopener">http://www.iqiyi.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>激动网</td><td><a href="http://www.joy.cn/" target="_blank" rel="noopener">http://www.joy.cn/</a></td><td>✓</td><td></td><td></td></tr><tr><td>酷6网</td><td><a href="http://www.ku6.com/" target="_blank" rel="noopener">http://www.ku6.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>酷狗音乐</td><td><a href="http://www.kugou.com/" target="_blank" rel="noopener">http://www.kugou.com/</a></td><td></td><td></td><td>✓</td></tr><tr><td>酷我音乐</td><td><a href="http://www.kuwo.cn/" target="_blank" rel="noopener">http://www.kuwo.cn/</a></td><td></td><td></td><td>✓</td></tr><tr><td>乐视网</td><td><a href="http://www.letv.com/" target="_blank" rel="noopener">http://www.letv.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>荔枝FM</td><td><a href="http://www.lizhi.fm/" target="_blank" rel="noopener">http://www.lizhi.fm/</a></td><td></td><td></td><td>✓</td></tr><tr><td>秒拍</td><td><a href="http://www.miaopai.com/" target="_blank" rel="noopener">http://www.miaopai.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>MioMio弹幕网</td><td><a href="http://www.miomio.tv/" target="_blank" rel="noopener">http://www.miomio.tv/</a></td><td>✓</td><td></td><td></td></tr><tr><td>痞客邦</td><td><a href="https://www.pixnet.net/" target="_blank" rel="noopener">https://www.pixnet.net/</a></td><td>✓</td><td></td><td></td></tr><tr><td>PPTV聚力</td><td><a href="http://www.pptv.com/" target="_blank" rel="noopener">http://www.pptv.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>齐鲁网</td><td><a href="http://v.iqilu.com/" target="_blank" rel="noopener">http://v.iqilu.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>QQ 腾讯视频</td><td><a href="http://v.qq.com/" target="_blank" rel="noopener">http://v.qq.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>阡陌视频</td><td><a href="http://qianmo.com/" target="_blank" rel="noopener">http://qianmo.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>Sina 新浪视频 微博秒拍视频</td><td><a href="http://video.sina.com.cn/" target="_blank" rel="noopener">http://video.sina.com.cn/</a> <a href="http://video.weibo.com/" target="_blank" rel="noopener">http://video.weibo.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>Sohu 搜狐视频</td><td><a href="http://tv.sohu.com/" target="_blank" rel="noopener">http://tv.sohu.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>天天动听</td><td><a href="http://www.dongting.com/" target="_blank" rel="noopener">http://www.dongting.com/</a></td><td></td><td></td><td>✓</td></tr><tr><td><strong>Tudou土豆</strong></td><td><a href="http://www.tudou.com/" target="_blank" rel="noopener">http://www.tudou.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>虾米</td><td><a href="http://www.xiami.com/" target="_blank" rel="noopener">http://www.xiami.com/</a></td><td></td><td></td><td>✓</td></tr><tr><td>阳光卫视</td><td><a href="http://www.isuntv.com/" target="_blank" rel="noopener">http://www.isuntv.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td><strong>音悦Tai</strong></td><td><a href="http://www.yinyuetai.com/" target="_blank" rel="noopener">http://www.yinyuetai.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td><strong>Youku优酷</strong></td><td><a href="http://www.youku.com/" target="_blank" rel="noopener">http://www.youku.com/</a></td><td>✓</td><td></td><td></td></tr><tr><td>战旗TV</td><td><a href="http://www.zhanqi.tv/lives" target="_blank" rel="noopener">http://www.zhanqi.tv/lives</a></td><td>✓</td><td></td><td></td></tr><tr><td>央视网</td><td><a href="http://www.cntv.cn/" target="_blank" rel="noopener">http://www.cntv.cn/</a></td><td>✓</td><td></td></tr></tbody></table><h2 id="其他类似工具"><a href="#其他类似工具" class="headerlink" title="其他类似工具"></a>其他类似工具</h2><ul><li>youtube-dl：<a href="https://github.com/rg3/youtube-dl" target="_blank" rel="noopener">youtube-dl</a>功能和you-get类似。</li><li>Video Download Manager：可视化工具，相当于youtube-dl+you-get。</li><li>ykdl：专注于优酷视频。</li><li>annie：专注于在线视频下载的轻量级命令行工具</li><li>维棠:<a href="http://www.vidown.cn/" target="_blank" rel="noopener">维棠</a>最专业flv视频下载软件</li><li>硕鼠：<a href="http://www.flvcd.com/" target="_blank" rel="noopener">硕鼠</a>最稳定的FLV视频下载平台</li></ul><h2 id="无水印预览"><a href="#无水印预览" class="headerlink" title="无水印预览"></a>无水印预览</h2><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190327001/preview01.png" alt="预览1"></p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20190327001/preview02.png" alt="预览2"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/soimort/you-get/wiki/%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E#supported-sites" target="_blank" rel="noopener">you-get中文文档</a></p><p><a href="https://github.com/soimort" target="_blank" rel="noopener">you-get源码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="实用工具及技巧" scheme="http://ltyeamin.github.io/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>GC调优基础之堆大小</title>
    <link href="http://ltyeamin.github.io/2019/01/05/GC%E8%B0%83%E4%BC%98%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A0%86%E5%A4%A7%E5%B0%8F/"/>
    <id>http://ltyeamin.github.io/2019/01/05/GC调优基础之堆大小/</id>
    <published>2019-01-05T11:11:09.000Z</published>
    <updated>2019-05-29T14:03:53.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="调整堆大小"><a href="#调整堆大小" class="headerlink" title="调整堆大小"></a>调整堆大小</h2><p>GC调整的第一堂课是调整应用程序堆的大小。关于堆大小的调整还有更高级的话题，不过作为第一步，我们首先讨论如何设置总体堆的大小。</p><p>与其他的性能问题一样，选择堆的大小其实是一种平衡。如果分配的堆过于小，程序的大部分时间可能都消耗在GC上，没有足够的时间去运行应用程序的逻辑。但是，简单粗暴地设置一个特别大的堆也不是解决问题的方法。</p><p>GC停顿消耗的时间取决于堆的大小，如果增大堆的空间，停顿的持续时间也会变长。这种情况下，停顿的频率会变得更少，但是它们持续的世界会让程序的整体性能变慢。</p><p>使用超大堆还有另一个风险。操作系统使用虚拟内存机制管理机器的物理内存。一台机器可能有8G的物理内存，不过操作系统可能让你感觉有更多的可用内存。虚拟内存的数量取决于操作系统的设置，譬如操作系统可能让你感觉到它的内存达到了16G。操作系统名为”交换”(swapping，称之为分页，虽然这两者在技术上存在着差异，但是这些差异，在这里不影响我们的讨论)。你可以载入需要16GG内存的应用程序，操作系统在需要时会将程序运行时不活跃的数据由内存复制到磁盘。再次需这部分内存的内容时，操作系统再将它们由磁盘重新载入到内存(为了腾出空间，通常它会先将另一部分内存的内容复制到磁盘)。</p><p>系统中运行着大量不同的应用程序时，这个流程工作得很不顺畅，因为大多数的应用程序不会同时处于活跃状态。但是，对于Java应用，它工作得并不是很好。如果一个Java应用使用了这个系统上大约12G的堆，操作系统可能在RAM上分配8G的堆空间，另外4G的空间存在于磁盘(这个假设对实际情况进行了一些简化，因为应用程序也会使用部分的RAM)。JVM不会了解这些：<strong>操作系统完全屏蔽了内存交互的细节</strong>。这样，JVM愉快的地填满了分配给它的12G堆空间。但这样就导致了严重的性能问题，因为操作系统需要将相当一部分的数据由磁盘交换到内存(这是一个昂贵操作的开始)。</p><p>更糟糕的是，这种原本期望一次性的内存交换操作在Full GC时一定会再次重演，因为JVM必须访问整个堆的内容。如果Full GC时系统发生内存交换，停顿时间会以正常停顿时间数个量级的方式增长。类似的，如果使用Concurrent收集器，后台线程在回收堆时，它的速度也可能会被拖慢，因为需要等待从裁判复制数据到内存，结果导致发生代价昂贵的并发模式失效。</p><p>因此，调整堆大小时首要的原则就是<strong>永远不要将堆的容量设置得比机器的物理内存还大</strong>。另外，如果同一台机器上运行着多个JVM实例，这个原则适用于所有堆的总和。除此之外，你还需要为JVM自身以及机器上其他的应用程序预留一部分的内存空间：通常情况下，对于普通的操作系统，应该预留至少1G的内存空间。</p><p>堆的大小由2个参数值控制：分别是初始值(通过-Xms N设置)和最大值(通过 -Xmx N设置)。默认值的调节取决于多个因素，包括操作系统类型、系统内存大小、使用的JVM。其他的命令标志也会对该值造成影响，堆大小的调节是JVm自适应调优的核心。</p><p>JVM的目标是一句系统可用的资源情况找到一个”合理的”默认初始化值，当且仅当应用程序需要更多的内存(依据垃圾回收时消耗的时间来决定)时将堆的大小增大到一个合理的最大值。到目前为止，JVM的高级调优标志以及调优细节都没有提及。为了让大家有个感性的认识，我们列出了堆大小的默认最大值和最小值供大家参考，参见如下表。(为了使内存对齐，JVM会对这些值进行圆整操作；所以GC日志中输出的大小可能与表中给出的值并不完全一致)。</p><table><thead><tr><th style="text-align:center">操作系统及JVM类型</th><th style="text-align:center">初始堆大小(Xms)</th><th style="text-align:center">最大堆大小(Xmx)</th></tr></thead><tbody><tr><td style="text-align:center">Linux/Solaris,32位客户端</td><td style="text-align:center">16MB</td><td style="text-align:center">256MB</td></tr><tr><td style="text-align:center">Linux/Solaris,32位客户端</td><td style="text-align:center">64MB</td><td style="text-align:center">取1GB和物理内存大小1/4二者中的最小值</td></tr><tr><td style="text-align:center">Linux/Solaris,32位客户端</td><td style="text-align:center">取512MB和物理内存大小1/64二者中的最小值</td><td style="text-align:center">取32GB和物理内存大小1/4二者中的最小值</td></tr><tr><td style="text-align:center">MacOS，64位服务器型JVM</td><td style="text-align:center">64MB(数据有误,应该是256MB)</td><td style="text-align:center">取1GB和物理内存大小1/4二者中的最小值</td></tr><tr><td style="text-align:center">Windows，32位客户端JVM</td><td style="text-align:center">16MB</td><td style="text-align:center">256MB</td></tr><tr><td style="text-align:center">Windows，64位服务端JVM</td><td style="text-align:center">64MB</td><td style="text-align:center">取1GB和物理内存大小1/4二者中的最小值</td></tr></tbody></table><p>如果机器的物理内存少于192MB，最大堆的大小会是物理内存的一半(大约96MB，或更少)。</p><p>堆大小具有初始值和最大值的这种设计让JVM能够根据实际的负荷情况更灵活地调整JVM的行为。如果JVM发现使用初始的堆大小，频繁地发生GC，它就会尝试增大堆的空间，直到JVM的GC的频率回归到正常的范围，或直到堆大小增大到它的上限值。</p><p>对很多应用来说，这意味着堆的大小不再需要调整了，实际上，你只需要为你选择的GC算法设定性能目标：譬如你能忍受的停顿的持续时间、你期望垃圾回收在整个时间中所占用的百分比等。</p><p>如果应用程序在GC时消耗了太长的时间，你很有可能需要使用-Xmx标志增大堆的大小。选择什么样的大小没有一个硬性的或简单的规则。一个经验法则是完成Full GC后，应该释放出70%的空间(30%的空间仍然占用)。</p><p>注意，即使你显示地设置了堆的最大容量，还是会发生堆的自动调节：初始时堆以默认的大小开始运行，为了达到根据垃圾收集算法设置的性能目标，JVM会逐步增大堆的大小。将堆的大小设置得比实际需要更大不一定会带来性能损耗：堆并不会无限地增大，JVM会调节堆的大小直到其满足GC的性能目标。</p><p>另一方面，如果你确切地了解应用程序需要多大的堆，那么你可以将堆的初始化和最大值设置一致数值(譬如：-Xms1024M -Xmx1024M)。这种设置能稍微提高GC的运行效率，因为它不再需要估算堆是否需要调整大小。</p><h2 id="堆内存纠错"><a href="#堆内存纠错" class="headerlink" title="堆内存纠错"></a>堆内存纠错</h2><p>在上述表我们知道了不同操作系统、不同JVM、不同物理内存的默认堆大小。但是实际上，Mac OS这个数据有问题的。我的Mac Pro 2013的配置物理内存是16G、64位的JVM。</p><p>下面两个命令用于查看当前JRE默认的堆大小，该方法适用于Java 6u20以及之后版本。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用-server</span></span><br><span class="line">Yeamin:~ mac$ java -server -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal -version | grep -i heapsize</span><br><span class="line">    uintx ErgoHeapSizeLimit                         = 0                                   &#123;product&#125;</span><br><span class="line">    uintx HeapSizePerGCThread                       = 87241520                            &#123;product&#125;</span><br><span class="line">    uintx InitialHeapSize                          := 268435456                           &#123;product&#125;</span><br><span class="line">    uintx LargePageHeapSizeThreshold                = 134217728                           &#123;product&#125;</span><br><span class="line">    uintx MaxHeapSize                              := 4294967296                          &#123;product&#125;</span><br><span class="line">java version <span class="string">"1.8.0_192"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_192-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.192-b12, mixed mode)</span><br><span class="line"><span class="comment"># 使用-client</span></span><br><span class="line">Yeamin:~ mac$ java -client -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal -version | grep -i heapsize</span><br><span class="line">    uintx ErgoHeapSizeLimit                         = 0                                   &#123;product&#125;</span><br><span class="line">    uintx HeapSizePerGCThread                       = 87241520                            &#123;product&#125;</span><br><span class="line">    uintx InitialHeapSize                          := 268435456                           &#123;product&#125;</span><br><span class="line">    uintx LargePageHeapSizeThreshold                = 134217728                           &#123;product&#125;</span><br><span class="line">    uintx MaxHeapSize                              := 4294967296                          &#123;product&#125;</span><br><span class="line">java version <span class="string">"1.8.0_192"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_192-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.192-b12, mixed mode)</span><br></pre></td></tr></table></figure><p>查看结果，我们发现，Mac OS中client和server模式的初始化堆大小是268435456(即268435456/1024/1024=256M=物理内存16G \<em> 1024 \</em> 1/64)。我们发现实际上这个表中数据是有误的。</p><p>其实不仅仅是Mac OS，Windows 64位也是这样的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>堆分配过小，程序大部分时间消耗在GC上。堆分配过大，GC停顿时间加长，停顿频率减少，使得程序性能整天下降。</li><li>JVM不像是物理内存一样可以使用交互/分页技术。计算机是物理内存和虚拟内存结合使用，程序中运行不活跃的数据复制到虚拟内存(磁盘)，而JVM完全没有这种内存交换细节，分配多少G就是多少G。</li><li>不同操作系统、不同大小物理内存、不同JVM的默认堆大小有所差异。但是我们常用的都是64位的JVM，常用的初始化堆大小是物理内存的1/64,常用的最大堆大小为物理内存的1/4。</li><li>堆的初始化大小和最大堆大小由-Xms:N和-Xmx:N两个参数来控制。其中N表示存储大小，默认为MB为基本单位。</li><li>每次GC的时候会动态调整堆的大小。若默认空余堆内存小于40%时，JVM会动态将堆内存增大到-Xmx最大限制。若默认空余堆内存小于40%时，JVM会动态将堆内存减少到-Xms最小限制。因此我们一般设置-Xms和-Xmx相等，避免在每次GC后调整堆的大小。</li><li>除非应用程序需要比默认值更大的堆，否则在进行调优时，尽量考虑通过GC算法的性能目标，而非微调堆的大小来改善程序性能。</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>《Java性能权威指南》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="backend" scheme="http://ltyeamin.github.io/categories/backend/"/>
    
    
      <category term="JVM及并发编程" scheme="http://ltyeamin.github.io/tags/JVM%E5%8F%8A%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>局域网文件共享与下载服务新姿势</title>
    <link href="http://ltyeamin.github.io/2018/06/18/%E5%B1%80%E5%9F%9F%E7%BD%91%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E4%B8%8E%E4%B8%8B%E8%BD%BD%E6%9C%8D%E5%8A%A1%E6%96%B0%E5%A7%BF%E5%8A%BF/"/>
    <id>http://ltyeamin.github.io/2018/06/18/局域网文件共享与下载服务新姿势/</id>
    <published>2018-06-18T13:22:13.000Z</published>
    <updated>2019-10-12T12:52:38.085Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在平常生活或工作中，我们经常需要传输文件，比如将电脑上下载的App传送到手机或另一台PC上、同事之间传输一些大型的文件。当我们遇到此类问题时，首先想到的就是使用QQ或者微信，更深一层，去网上搜索一些文件传输工具，如<a href="https://send-anywhere.com/" target="_blank" rel="noopener">Send Anywhere</a>，LZ当时在大学时候经常使用的是FTP、Samba服务。但是这些第三方要么都显得太麻烦（如下图），要么就是不安全，安全隐患主要在数据传输安全以及数据备份上体现，我们都需要将文件传输到第三方服务器上，再通过需要接收数据的电脑或手机进行下载。</p><p>那么，有没有办法直接获取文件，而不通过这些繁琐的操作？在这里呢，LZ给大家推荐几种常见的文件共享方法。</p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180618001/photo1.png" alt="麻烦的交互"></p><h2 id="文件共享下载新姿势"><a href="#文件共享下载新姿势" class="headerlink" title="文件共享下载新姿势"></a>文件共享下载新姿势</h2><h3 id="最方便的Windows文件共享"><a href="#最方便的Windows文件共享" class="headerlink" title="最方便的Windows文件共享"></a>最方便的Windows文件共享</h3><p>LZ本人一年多没用过Windows电脑了,现在公司配置的是Mac Pro，家用的Lenovo Y430P已被改装为Deepin Linux,由于现在日常生活、工作都是在非Windows操作,所以这里就不演示了，等有机会会把详细教程列到这里。</p><p><a href="https://jingyan.baidu.com/article/fec7a1e53efe621190b4e7ae.html" target="_blank" rel="noopener">Windows文件共享</a></p><h3 id="最简单的Python命令共享"><a href="#最简单的Python命令共享" class="headerlink" title="最简单的Python命令共享"></a>最简单的Python命令共享</h3><p>大家都知道Python2与Python3不兼容,一般Linux和Mac OS X默认集成Python2,因为这些系统一些应用工具是Python2开发的，所以系统只能默认Python2。</p><ol><li><p>Python2的操作姿势</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Yeamin:book mac$ <span class="built_in">echo</span> litong</span><br><span class="line">litong</span><br><span class="line">Yeamin:book mac$ python -m SimpleHTTPServer 8900</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8900 ...</span><br></pre></td></tr></table></figure></li><li><p>Python3的操作姿势</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yeamin:work mac$ python3 -m http.server 8900</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8900 (http://0.0.0.0:8900/) ...</span><br></pre></td></tr></table></figure></li></ol><p>​    我在我的Mac或Linux终端执行简单的上述任意两个命令后，启动一个HTTP服务器，打开浏览器输入<a href="http://127.0.0.1:8900或http://localhost:8900" target="_blank" rel="noopener">http://127.0.0.1:8900或http://localhost:8900</a>  后回出现下图文件共享的列表，若其他人想下载可以将局域网IP和端口号告知其他人即可下载。在这不仅仅可以下载，也可以预览常见文件，比如音频、视频、图片、PDF、文本文件。</p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180618001/photo2.png" alt="共享列表预览"></p><h3 id="最专业的Nginx服务共享"><a href="#最专业的Nginx服务共享" class="headerlink" title="最专业的Nginx服务共享"></a>最专业的Nginx服务共享</h3><p>大家都知道单台的Nginx Web服务器并发性能较强,一般基本都是文件多并发大的情况下才用，企业里一般做路由转发、负载均衡、资源静态化，路由转发是为了对外统一暴露一个地址，负载均衡是根据某种算法(IP_HASH绑定策略、轮询策略、权重)将不同的请求分散到多台业务相同的机器上，资源静态化这个很常见，以前项目太大，会将JS/CSS单独分离，使得应用系统前端组件加载更快。</p><ul><li><p>下载Nginx</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">litong@LT:/media/litong/软件/programs/tools$ wget -c http://nginx.org/download/nginx-1.15.10.tar.gz</span><br><span class="line">--2019-03-31 14:03:53--  http://nginx.org/download/nginx-1.15.10.tar.gz</span><br><span class="line">正在解析主机 nginx.org (nginx.org)... 62.210.92.35, 95.211.80.227, 2001:1af8:4060:a004:21::e3</span><br><span class="line">正在连接 nginx.org (nginx.org)|62.210.92.35|:80... 已连接。</span><br><span class="line">已发出 HTTP 请求，正在等待回应... 200 OK</span><br><span class="line">长度：1032228 (1008K) [application/octet-stream]</span><br><span class="line">正在保存至: “nginx-1.15.10.tar.gz”</span><br><span class="line"></span><br><span class="line">nginx-1.15.10.tar.gz    100%[===============================&gt;]   1008K  13.4KB/s  用时 55s     </span><br><span class="line"></span><br><span class="line">2019-03-31 14:04:48 (18.4 KB/s) - 已保存 “nginx-1.15.10.tar.gz” [1032228/1032228])</span><br></pre></td></tr></table></figure></li><li><p>解压Nginx</p></li><li><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.15.10.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>编译Nginx</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.15.10/</span><br></pre></td></tr></table></figure></li><li><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li><li><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li><li><p>启动Nginx</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>启动成功后，输入localhost:80，看是否启动成功进入到index.html，如下图:</p><p>  <img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180618001/index.png" alt="Nginx启动首页"></p></li><li><p>查看启动进程</p><p>如果懒得打开浏览器，直接看进程确认nginx是否启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">litong@LT:usr/<span class="built_in">local</span>/nginx/sbin$ ps -ef | grep nginx</span><br><span class="line">root      7017     1  0 11:07 ?        00:00:00 nginx: master process ./nginx</span><br></pre></td></tr></table></figure></li><li><p>重载Nginx</p><p>修改Nginx的配置文件nginx.conf,并进行重载配置:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;        <span class="comment">#端口  </span></span><br><span class="line"><span class="attribute">server_name</span>  localhost;   <span class="comment">#服务名  </span></span><br><span class="line"><span class="attribute">charset</span> utf-<span class="number">8</span>; <span class="comment"># 避免中文乱码</span></span><br><span class="line"><span class="attribute">root</span>    /home/litong/Pictures;  <span class="comment">#显示的根索引目录，注意这里要改成你自己的，目录要存在  </span></span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;             <span class="comment">#开启索引功能  </span></span><br><span class="line">    <span class="attribute">autoindex_exact_size</span> <span class="literal">off</span>; <span class="comment"># 关闭计算文件确切大小（单位bytes），只显示大概大小（单位kb、mb、gb）  </span></span><br><span class="line">    <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;   <span class="comment"># 显示本机时间而非 GMT 时间  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><p> 在浏览器端输入localhost:80, 则出现如下界面:</p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180618001/nginx.png" alt="Nginx共享列表预览"></p></li></ul><h2 id="不同终端效果欣赏"><a href="#不同终端效果欣赏" class="headerlink" title="不同终端效果欣赏"></a>不同终端效果欣赏</h2><h3 id="Python共享-Mac-Pro-Mac-OS-X-10-14-1-Mojave"><a href="#Python共享-Mac-Pro-Mac-OS-X-10-14-1-Mojave" class="headerlink" title="[Python共享]Mac Pro / Mac OS X 10.14.1 Mojave"></a>[Python共享]Mac Pro / Mac OS X 10.14.1 Mojave</h3><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180618001/photo4.png" alt="视频预览"></p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180618001/photo5.png" alt="图片预览"></p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180618001/photo6.png" alt="文本预览"></p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180618001/photo3.png" alt="PDF预览"></p><h3 id="Nginx共享-Lenovo-Y430P-Deepin-Linux"><a href="#Nginx共享-Lenovo-Y430P-Deepin-Linux" class="headerlink" title="[Nginx共享]Lenovo Y430P/ Deepin Linux  "></a>[Nginx共享]Lenovo Y430P/ Deepin Linux  <img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180618001/deepin.png" alt="Nginx图片预览"></h3><h3 id="Python共享-XiaoMi-5X-Android-MIUI10"><a href="#Python共享-XiaoMi-5X-Android-MIUI10" class="headerlink" title="[Python共享]XiaoMi 5X/  Android-MIUI10"></a>[Python共享]XiaoMi 5X/  Android-MIUI10</h3><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180618001/preview03.jpeg" alt="手机视频预览"></p><h3 id="Windows共享-Lenovo-ThinkPad-T410-Microsoft-Windows-10-家庭版"><a href="#Windows共享-Lenovo-ThinkPad-T410-Microsoft-Windows-10-家庭版" class="headerlink" title="[Windows共享]Lenovo ThinkPad T410/Microsoft Windows 10 家庭版"></a>[Windows共享]Lenovo ThinkPad T410/Microsoft Windows 10 家庭版</h3><p>Windows后续再体验，未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="实用工具及技巧" scheme="http://ltyeamin.github.io/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ工作模式之简单模式</title>
    <link href="http://ltyeamin.github.io/2018/06/12/RabbitMQ%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AE%80%E5%8D%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://ltyeamin.github.io/2018/06/12/RabbitMQ工作模式之简单模式/</id>
    <published>2018-06-12T12:15:11.000Z</published>
    <updated>2019-10-12T12:52:38.211Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天我们来学习一下RabbitMQ工作模式之简单模式，在学之前我们根据官方文档(纯英文文档，可以装个Chrome插件选中翻译)学习一下RabbitMQ的一些术语，这才能让我们更深入的了解。</p><h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><p>本教程假定RabbitMQ已在标准端口（5672）上的localhost上安装并运行。如果您使用不同的主机，端口或认证，则需要调整连接设置。</p><h2 id="术语介绍"><a href="#术语介绍" class="headerlink" title="术语介绍"></a>术语介绍</h2><p>RabbitMQ是一个消息代理中间件：它接受和转发消息。您可以将其视为邮局：当您将要发布的邮件放在邮箱中时，您可以确定邮递员最终会将邮件发送给您的收件人。在这个比喻中，RabbitMQ是一个邮箱，邮局和邮递员只负责中转调度。</p><p>RabbitMQ和邮局之间的主要区别在于它不处理纸张，而是接受，存储和转发二进制blob数据 - 消息。</p><p>RabbitMQ和一般的消息传递使用了一些术语：生产者、队列、消费者。</p><ul><li><p>生产者</p><p>发送消息的程序是生产者。</p><p>官网上青色椭圆P则标识消息生产者。</p><p><img src="http://image.chenyongjun.vip/rabbitmq_producer.png" alt="img"></p></li><li><p>队列</p><p>队列是RabbitMQ中的邮箱的名称。虽然消息流经RabbitMQ和您的应用程序，但它们<strong>只能存储在队列中</strong>。队列只受主机的内存和磁盘限制的约束，它本质上是一个大的消息缓冲区。许多生产者可以发送到一个队列的消息，并且许多消费者可以尝试从一个队列接收数据。官网上红色多格子长方形则标识队列。</p><p><img src="http://image.chenyongjun.vip/rabbitmq_queue.png" alt="img"></p></li><li><p>消费者</p><p>消费与接受有类似的意义。消费者是一个主要等待接收消息的程序：</p></li></ul><p><img src="http://image.chenyongjun.vip/rabbitmq_consumer.png" alt="img"></p><p>请注意，生产者、消费者和消息代理不必驻留在同一主机上;实际上在大多数应用中，应用程序也可以是生产者和消费者。</p><p>总结：整个过程非常简单，生产者创建消息，消费者接收这些消息。你的应用程序既可以作为生产者向其他应用程序发送消息，也可以作为消费者，等待接收其他应用程序的消息。其中，存储消息的是消息队列，它类似于邮箱，消息通过消息队列进行投递。</p><h2 id="案例实战"><a href="#案例实战" class="headerlink" title="案例实战"></a>案例实战</h2><p>在本教程的这一部分中，我们将用Java编写两个程序;发送单个消息的生产者，以及接收消息并将其打印出来的消费者。我们将掩盖Java API中的一些细节，专注于这个非常简单的事情，只是为了开始。这是消息传递的“Hello World”。</p><p>在下图中，“P”是我们的生产者，“C”是我们的消费者。中间的红框是一个队列 - RabbitMQ代表消费者保留的消息缓冲区。</p><p><img src="http://image.chenyongjun.vip/rabbitmq_python-one.png" alt="img"></p><p>了解到上述概念，现在我们开始动手实践吧！</p><h3 id="导入客户端依赖"><a href="#导入客户端依赖" class="headerlink" title="导入客户端依赖"></a>导入客户端依赖</h3><ol><li>Maven</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Gradle</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'com.rabbitmq'</span>, <span class="string">name:</span> <span class="string">'amqp-client'</span>, <span class="string">version:</span> <span class="string">'5.6.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入完依赖后，我们将编写消息发布者（发送者）Send发送和我们的消息消费者（接收者）Recv。发布者将连接到RabbitMQ，发送单个消息，然后退出。</p><h3 id="编写消息生产-发生者"><a href="#编写消息生产-发生者" class="headerlink" title="编写消息生产/发生者"></a>编写消息生产/发生者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.yeamin.actions.simple.produces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  简单队列的消息生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 设置连接主机名</span></span><br><span class="line">        factory.setHost(<span class="string">"localhost"</span>);</span><br><span class="line">        <span class="comment">//设置端口号,不设置默认为5672</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 如果可以通过连接工厂创建一个连接,则继续在连接基础上继续创建通道.</span></span><br><span class="line"><span class="comment">         * 这里我们可以使用try-with-resources语句，因为Connection和Channel都实现了java.io.Closeable。</span></span><br><span class="line"><span class="comment">         * 这样我们就不需要在代码中明确地关闭它们。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> (Connection connection = factory.newConnection();</span><br><span class="line">             <span class="comment">// 创建通道</span></span><br><span class="line">             Channel channel = connection.createChannel()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 为了发送消息成功,我们必须声明一个队列供我们发送,队列只声明一次,不可能存在重复队列</span></span><br><span class="line"><span class="comment">             *    参数1: queue表示队列名称</span></span><br><span class="line"><span class="comment">             *    参数2: durable表示是否持久化</span></span><br><span class="line"><span class="comment">             *    参数3: exclusive表示仅创建者可以使用的私有队列，断开后自动删除</span></span><br><span class="line"><span class="comment">             *    参数4: autoDelete表示当所有消费客户端连接断开后，是否自动删除队列</span></span><br><span class="line"><span class="comment">             *    参数5: arguments表示其他的构造参数,为队列构造而准备</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 要发送的消息</span></span><br><span class="line">            String message = <span class="string">"Hello World, lt, Welcome RabbitMQ!"</span>;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             *  最基本的消息发送</span></span><br><span class="line"><span class="comment">             *    参数1: exchange表示交换机</span></span><br><span class="line"><span class="comment">             *    参数2: routingKey表示路由Key</span></span><br><span class="line"><span class="comment">             *    参数3: props表示息的其他参数</span></span><br><span class="line"><span class="comment">             *    参数4: autoDelete表示当所有消费客户端连接断开后，是否自动删除队列</span></span><br><span class="line"><span class="comment">             *    参数5: body表示息体,是个字节数组,意味着可以传递任何数据</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            <span class="comment">//消息发送方的日志打印</span></span><br><span class="line">            System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明队列是幂等的 ，只有在它不存在的情况下才会创建它。消息内容是一个字节数组，因此您可以发送任何数据。</p><h3 id="编写消息消费者"><a href="#编写消息消费者" class="headerlink" title="编写消息消费者"></a>编写消息消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.yeamin.actions.simple.consumers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  简单队列的消息消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 设置RabbitMQ主机名</span></span><br><span class="line">        factory.setHost(<span class="string">"localhost"</span>);</span><br><span class="line">        <span class="comment">// 新建连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">// 新建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//绑定队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">" [*] Waiting for messages. To exit press CTRL+C"</span>);</span><br><span class="line">        <span class="comment">// 创建消费者,消费消息</span></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            String message = <span class="keyword">new</span> String(delivery.getBody(), <span class="string">"UTF-8"</span>);</span><br><span class="line">            System.out.println(<span class="string">" [x] Received '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  消费者消费</span></span><br><span class="line"><span class="comment">         * 参数1 ：queue队列名</span></span><br><span class="line"><span class="comment">         * 参数2 ：autoAck 是否自动ACK</span></span><br><span class="line"><span class="comment">         * 参数3 ：callback消费者对象的一个接口，用来配置回调</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么我们不使用try-with-resource语句来自动关闭通道和连接？通过这样做，我们只需让程序继续运行，关闭所有内容，然后退出！这将是尴尬的，因为我们希望在消费者异步监听消息到达时，该进程保持活动状态。</p><p>我们即将告诉服务器从队列中传递消息。因为它会异步地向我们发送消息，所以我们以对象的形式提供一个回调，它将缓冲消息，直到我们准备好使用它们。这就是DeliverCallback子类的作用。</p><h3 id="消息生产与发送"><a href="#消息生产与发送" class="headerlink" title="消息生产与发送"></a>消息生产与发送</h3><p>我们先执行消息发送者，执行完成后如下图：</p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180612001/send.png" alt="发送消息"></p><p>紧接着，我们进行消息消费，执行完成后如下图:</p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180612001/recv.png" alt="消费消息"></p><p>当消息生产者一直发送时，我们可以得到如下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">15:17:00: Executing task <span class="string">'Recv.main()'</span>...</span><br><span class="line"></span><br><span class="line">&gt; Task :compileJava UP-TO-DATE</span><br><span class="line">&gt; Task :processResources NO-SOURCE</span><br><span class="line">&gt; Task :classes UP-TO-DATE</span><br><span class="line"></span><br><span class="line">&gt; Task :Recv.main()</span><br><span class="line">SLF4J: Failed to load class <span class="string">"org.slf4j.impl.StaticLoggerBinder"</span>.</span><br><span class="line">SLF4J: Defaulting to no-operation (NOP) logger implementation</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html<span class="comment">#StaticLoggerBinder for further details.</span></span><br><span class="line">[*] Waiting <span class="keyword">for</span> messages. To <span class="built_in">exit</span> press CTRL+C</span><br><span class="line">[x] Received <span class="string">'Hello World, litong, Welcome RabbitMQ!'</span></span><br><span class="line">[x] Received <span class="string">'Hello World, lt, Welcome RabbitMQ!'</span></span><br></pre></td></tr></table></figure><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/ltyeamin/RabbitMQ-Action/tree/master/patterns" target="_blank" rel="noopener">https://github.com/ltyeamin/RabbitMQ-Action/tree/master/patterns</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.rabbitmq.com/tutorials/tutorial-one-java.html" target="_blank" rel="noopener">RabbitMQ官网文档</a></li><li><a href="http://www.java1234.com/a/javabook/javabase/2018/0728/11620.html" target="_blank" rel="noopener">《RabbitMQ实战指南》朱忠华著</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="backend" scheme="http://ltyeamin.github.io/categories/backend/"/>
    
    
      <category term="RabbitMQ" scheme="http://ltyeamin.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ概述</title>
    <link href="http://ltyeamin.github.io/2018/06/11/RabbitMQ%E6%A6%82%E8%BF%B0/"/>
    <id>http://ltyeamin.github.io/2018/06/11/RabbitMQ概述/</id>
    <published>2018-06-11T11:45:21.000Z</published>
    <updated>2019-05-29T14:03:52.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>之所以今天写RabbitMQ学习专栏，主要是因为自己没有真正的系统学习过。之前工作经历中都是为用MQ而用的MQ，对MQ整个内部机制没有一个深入的了解和系统的学习。比如我们用Spring Cloud Stream或Spring Cloud Bus组件时候，我们会经常碰到MQ。MQ产品市面上有很多种，不同MQ产品有不同的适应场景(领域)。这就和学什么语言一样，不分什么好坏。</p><p>在这我要插上一句，在讨论技术选型的时候，我经常听到很多人说哪种技术好，哪种技术坏，哪种技术流行，哪种技术淘汰。其实正解应该是每种技术方案有自己适应领域，存在即合理。面试的时候经常有面试官询问技术方案选型。什么Spring Cloud和Dubbo比（压根就不是一个领域，Spring Cloud是整套的微服务落地方案，Dubbo只是一个具有客户端负载均衡的高性能RPC框架，论功能Dubbo只是Spring Cloud的一个子集），什么Redis和MongoDB比，ES和Solr比，各种MQ的比较，其实我觉得问这些面试题是有局限性的，没有具体业务场景就是无解，具体选型还是要根据当前公司的现有业务和系统现状来选型。我觉得面试官应该先把公司的业务场景说出来，然后应聘者根据公司的业务进行客观性评定。</p><p>好了，言归正传，常见的高级的MQ产品有RabbitMQ、Apache ActiveMQ、Apache RocketMQ(Alibaba捐赠)、Apache Kafka(LinkedIn捐赠) 。那么，今天我这里选择RabbitMQ进行学习，其他MQ学习都是相通的，读者可根据自身情况阅读官网文档并进行学习。我这里只是介绍一种学习方式。下面从官方文档以及其他资料给大家进行梳理RabbitMQ系列的知识。</p><h2 id="MQ消息队列"><a href="#MQ消息队列" class="headerlink" title="MQ消息队列"></a>MQ消息队列</h2><h3 id="MQ概述"><a href="#MQ概述" class="headerlink" title="MQ概述"></a>MQ概述</h3><p>消息队列技术是分布式应用间交换信息的一种技术。</p><p>消息队列可驻留在内存或磁盘上,队列存储消息直到它们被应用程序读走。</p><p>通过消息队列，应用程序可独立地执行。它们不需要知道彼此的位置、或在继续执行前不需要等待接收程序接收此消息。</p><p>MQ主要作用是接受和转发消息。你可以想想在生活中的一种场景：当你把信件的投进邮筒，邮递员肯定最终会将信件送给收件人。我们可以把MQ比作 邮局和邮递员。</p><p>MQ和邮局的主要区别是,它不处理消息,但是,它会接受数据、存储消息数据、转发消息。</p><h3 id="MQ应用场景"><a href="#MQ应用场景" class="headerlink" title="MQ应用场景"></a>MQ应用场景</h3><ul><li><p>应用解耦: 系统异步化改造；</p><ol><li>用户注册后的邮件发送、验证码短信发送；</li><li>分布式延时队列应用，用户下单后，24小时未支付，需要取消订单，我们只需要下单时用MQ发个消息通知一下，客户端延时（下单时间24小时后）执行，消费成功则证明取消订单成功。</li></ol></li><li><p>异步通知及数据同步: 提升系统性能，保证数据最终一致性；</p><ol><li>用户在管理页面更新数据，通过MQ异步通知，更新缓存、更新ES或Solr索引</li></ol></li><li><p>应用限流: 可以保证并发场景下系统的稳定性；</p><ol><li>抢票系统，在并发大系统有瓶颈的情况下，可以将请求打到MQ队列依次限流消费。</li><li>分布式日志系统数据很大的时候，MQ作为分布式日志的缓冲层，典型应用就是ELK+Kafaka。</li></ol></li><li><p>数据分发: 一对多或广播的模式进行数据分发；</p><ol><li>支付完成后，需要及时的通知子系统（进销存系统发货，用户服务积分，发送短信）</li></ol></li><li><p>分布式事务: 分布式架构的系统可以通过MQ的队列数据进行数据回滚操作</p></li></ul><h2 id="RabbitMQ产品介绍"><a href="#RabbitMQ产品介绍" class="headerlink" title="RabbitMQ产品介绍"></a>RabbitMQ产品介绍</h2><h3 id="RabbitMQ产品"><a href="#RabbitMQ产品" class="headerlink" title="RabbitMQ产品"></a>RabbitMQ产品</h3><p>打开RabbitMQ官网首页，能看到如下的一句话:</p><blockquote><p>RabbitMQ is the most widely deployed open source message broker.</p></blockquote><p>翻译为：RabbitMQ是部署最广泛的开源消息代理。</p><p>RabbitMQ是一个Erlang开发的AMQP（Advanced Message Queuing Protocol ）的开源实现。AMQP 的出现其实也是应了广大人民群众的需求，虽然在同步消息通讯的世界里有很多公开标准（如 Cobar）的 IIOP ，或者是 SOAP 等），但是在异步消息处理中却不是这样，只有大企业有一些商业实现（如微软的 MSMQ ，IBM 的 WebSphere MQ 等），因此，在 2006 年的 6 月，Cisco 、Red Hat、iMatix 等联合制定了 AMQP 的公开标准。</p><p>RabbitMQ由RabbitMQ Technologies Ltd开发并且提供商业支持的。该公司在2010年4月被SpringSource（VMware的一个部门）收购。在2013年5月被并入Pivotal。其实VMware，Pivotal和EMC本质上是一家的。不同的是，VMware是独立上市子公司，而Pivotal是整合了EMC的某些资源，现在并没有上市。</p><h3 id="RabbitMQ产品特性"><a href="#RabbitMQ产品特性" class="headerlink" title="RabbitMQ产品特性"></a>RabbitMQ产品特性</h3><ul><li>开源免费；</li><li>可伸缩性：集群服务；</li><li>消息持久化：从内存持久化消息到硬盘，再从硬盘加载到内存；</li><li>多语言多客户端支持，支持Python、Java、Ruby、PHP、C#、JavaScript、Go、Elixir、Objective-C、Swift、Spring AMQP。</li></ul><h3 id="RabbitMQ常用模式"><a href="#RabbitMQ常用模式" class="headerlink" title="RabbitMQ常用模式"></a>RabbitMQ常用模式</h3><p>打开<a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">官方文档</a>，我们眼前一亮，会看到如下6种RabbitMQ的工作模式：</p><table><thead><tr><th style="text-align:left">1. <a href="https://www.rabbitmq.com/tutorials/tutorial-one-python.html" target="_blank" rel="noopener">“Hello World!”</a><br> The simplest thing that does <em>something</em> <img src="https://www.rabbitmq.com/img/tutorials/python-one.png" alt="img">       <a href="https://www.rabbitmq.com/tutorials/tutorial-one-java.html" target="_blank" rel="noopener">Java</a> <a href="https://www.rabbitmq.com/tutorials/tutorial-one-spring-amqp.html" target="_blank" rel="noopener">Spring AMQP</a></th><th style="text-align:left">2. <a href="https://www.rabbitmq.com/tutorials/tutorial-two-python.html" target="_blank" rel="noopener">Work queues</a><br> Distributing tasks among workers (the <a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/CompetingConsumers.html" target="_blank" rel="noopener">competing consumers pattern</a>)<img src="https://www.rabbitmq.com/img/tutorials/python-two.png" alt="img">       <a href="https://www.rabbitmq.com/tutorials/tutorial-two-java.html" target="_blank" rel="noopener">Java</a> <a href="https://www.rabbitmq.com/tutorials/tutorial-two-spring-amqp.html" target="_blank" rel="noopener">Spring AMQP</a></th><th>3. <a href="https://www.rabbitmq.com/tutorials/tutorial-three-python.html" target="_blank" rel="noopener">Publish/Subscribe</a><br> Sending messages to many consumers at once<img src="https://www.rabbitmq.com/img/tutorials/python-three.png" alt="img">       <a href="https://www.rabbitmq.com/tutorials/tutorial-three-java.html" target="_blank" rel="noopener">Java</a> <a href="https://www.rabbitmq.com/tutorials/tutorial-three-spring-amqp.html" target="_blank" rel="noopener">Spring AMQP</a></th></tr></thead><tbody><tr><td style="text-align:left">4. <a href="https://www.rabbitmq.com/tutorials/tutorial-four-python.html" target="_blank" rel="noopener">Routing</a><br>Receiving messages selectively<img src="https://www.rabbitmq.com/img/tutorials/python-four.png" alt="img">       <a href="https://www.rabbitmq.com/tutorials/tutorial-four-java.html" target="_blank" rel="noopener">Java</a> <a href="https://www.rabbitmq.com/tutorials/tutorial-four-spring-amqp.html" target="_blank" rel="noopener">Spring AMQP</a></td><td style="text-align:left">5.  <a href="https://www.rabbitmq.com/tutorials/tutorial-five-python.html" target="_blank" rel="noopener">Topics</a><br> The simplest thing that does <em>something</em> <img src="https://www.rabbitmq.com/img/tutorials/python-five.png" alt="img">       <a href="https://www.rabbitmq.com/tutorials/tutorial-five-java.html" target="_blank" rel="noopener">Java</a> <a href="https://www.rabbitmq.com/tutorials/tutorial-five-spring-amqp.html" target="_blank" rel="noopener">Spring AMQP</a></td><td>6. <a href="https://www.rabbitmq.com/tutorials/tutorial-six-python.html" target="_blank" rel="noopener">RPC</a><br> <a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/RequestReply.html" target="_blank" rel="noopener">Request/reply pattern</a>example<img src="https://www.rabbitmq.com/img/tutorials/python-six.png" alt="img">       <a href="https://www.rabbitmq.com/tutorials/tutorial-six-java.html" target="_blank" rel="noopener">Java</a> <a href="https://www.rabbitmq.com/tutorials/tutorial-six-spring-amqp.html" target="_blank" rel="noopener">Spring AMQP</a></td></tr></tbody></table><p>看到上述的6种工作模式，其中我们日常使用最多的是前5种模式，我们列一个学习列表: </p><ul><li><a href="http://www.baidu.com" target="_blank" rel="noopener">简单模式</a>: 一个生产者，一个消费者</li><li><a href="http://www.baidu.com" target="_blank" rel="noopener">Work模式</a>: 一个生产者，多个消费者，每个消费者获取到的消息唯一。</li><li><a href="http://www.baidu.com" target="_blank" rel="noopener">订阅模式</a>: 一个生产者发送的消息会被多个消费者获取。</li><li><a href="http://www.baidu.com" target="_blank" rel="noopener">路由模式</a>: 发送消息到交换机并且要指定路由key ，消费者将队列绑定到交换机时需要指定路由key</li><li><a href="http://www.baidu.com" target="_blank" rel="noopener">Topic模式</a>: 将路由键和某模式进行匹配，此时队列需要绑定在一个模式上，“#”匹配一个词或多个词，“*”只匹配一个词。</li><li><a href="">RPC远程调用</a>：几乎不用，暂时先不考虑</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">RabbitMQ官网快速入门文档</a></li><li><a href="http://www.java1234.com/a/javabook/javabase/2018/0728/11620.html" target="_blank" rel="noopener">《RabbitMQ实战指南》朱忠华著</a></li><li><a href="https://my.oschina.net/u/3777556/blog/3035943" target="_blank" rel="noopener">什么是消息队列</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="backend" scheme="http://ltyeamin.github.io/categories/backend/"/>
    
    
      <category term="RabbitMQ" scheme="http://ltyeamin.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装分布式消息中间件-RabbitMQ</title>
    <link href="http://ltyeamin.github.io/2018/06/10/Docker%E5%AE%89%E8%A3%85%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6-RabbitMQ/"/>
    <id>http://ltyeamin.github.io/2018/06/10/Docker安装分布式消息中间件-RabbitMQ/</id>
    <published>2018-06-10T11:45:21.000Z</published>
    <updated>2019-10-12T12:52:37.778Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>RabbitMQ是流行的开源消息队列系统，采用天生抗并发的erlang语言开发。RabbitMQ是AMQP（高级消息队列协议）的标准实现。接下来，我们通过Docker的方式安装RabbitMQ。</p><h2 id="查看RabbitMQ版本"><a href="#查看RabbitMQ版本" class="headerlink" title="查看RabbitMQ版本"></a>查看RabbitMQ版本</h2><p>进入<a href="https://hub.docker.com/" target="_blank" rel="noopener">docker hub官方镜像仓库</a>或<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/images?search=rabbitmq" target="_blank" rel="noopener">阿里docker镜像库</a>,搜索rabbitmq镜像。</p><p>当然我们也可以用命令搜索:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search rabbitmq:management</span><br></pre></td></tr></table></figure><p>这里，我们用web页面搜索，搜索后点击详情页面。</p><p>这里我们选择带有management的版本，此版本包含web可视化管理页面。</p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180610001/search.png" alt="镜像搜索"></p><h2 id="Docker拉取镜像"><a href="#Docker拉取镜像" class="headerlink" title="Docker拉取镜像"></a>Docker拉取镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:3.7.14-management</span><br></pre></td></tr></table></figure><p>输入以上命令后，镜像分片开始下载并完成rabbitmq镜像的合并。下载完成后，我们可以查询输入以下命令查看当前本地仓库所有的镜像文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>如图</p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180610001/images.png" alt="镜像列表"></p><h2 id="创建并启动RabbitMQ应用容器"><a href="#创建并启动RabbitMQ应用容器" class="headerlink" title="创建并启动RabbitMQ应用容器"></a>创建并启动RabbitMQ应用容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:3.7.14-management</span><br></pre></td></tr></table></figure><p>执行上述命令，我们可以创建一个rabbitmq的docker容器，执行成功后回返回docker容器ID。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yeamin:~ mac$ docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:3.7.14-management</span><br><span class="line">5b2658f3fe04919883b4d0b3d2766220e1ecb983d715b5b6cbfec758634f2531</span><br></pre></td></tr></table></figure><h3 id="创建参数解释"><a href="#创建参数解释" class="headerlink" title="创建参数解释"></a>创建参数解释</h3><p>-d 后台运行容器；</p><p>–name 指定容器名；</p><p>-p 指定服务运行的端口（5672：应用访问端口；15672：控制台Web端口号）；</p><p>-v 映射目录或文件；</p><p>–hostname  主机名（RabbitMQ的一个重要注意事项是它根据所谓的 “节点名称” 存储数据，默认为主机名）；</p><p>-e 指定环境变量；（RABBITMQ_DEFAULT_VHOST：默认虚拟机名；RABBITMQ_DEFAULT_USER：默认的用户名；RABBITMQ_DEFAULT_PASS：默认用户名的密码，我这里没配置）</p><h2 id="启动rabbitmq应用容器"><a href="#启动rabbitmq应用容器" class="headerlink" title="启动rabbitmq应用容器"></a>启动rabbitmq应用容器</h2><p>执行如下命令进行启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker start 容器id前四位</span><br></pre></td></tr></table></figure><p>我这里以下命令进行执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 5b26</span><br></pre></td></tr></table></figure><h2 id="查询运行状态"><a href="#查询运行状态" class="headerlink" title="查询运行状态"></a>查询运行状态</h2><p>执行docker ps查看正在运行的容器状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Yeamin:~ mac$ docker ps </span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE                        COMMAND                  CREATED             STATUS              PORTS                                                                                        NAMES</span><br><span class="line"></span><br><span class="line">5b2658f3fe04        rabbitmq:3.7.14-management   <span class="string">"docker-entrypoint.s…"</span>   30 minutes ago      Up 30 minutes       4369/tcp, 5671/tcp, 0.0.0.0:5672-&gt;5672/tcp, 15671/tcp, 25672/tcp, 0.0.0.0:15672-&gt;15672/tcp   rabbitmq</span><br></pre></td></tr></table></figure><h2 id="RabbitMQ的WEB控制台"><a href="#RabbitMQ的WEB控制台" class="headerlink" title="RabbitMQ的WEB控制台"></a>RabbitMQ的WEB控制台</h2><p>在浏览器打开<a href="http://localhost:15672,进入登录页面，默认账号和密码都为guest。" target="_blank" rel="noopener">http://localhost:15672,进入登录页面，默认账号和密码都为guest。</a></p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180610001/login.png" alt="登录首页"></p><p><img src="http://pz9h1gr1x.bkt.clouddn.com/imgs/doc/20180610001/mqindex.png" alt="仪表盘首页"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.docker.com/" target="_blank" rel="noopener">Docker官网</a></li><li><a href="https://www.rabbitmq.com/" target="_blank" rel="noopener">RabbitMQ官网</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="Docker" scheme="http://ltyeamin.github.io/tags/Docker/"/>
    
  </entry>
  
</feed>
