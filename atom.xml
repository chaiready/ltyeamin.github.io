<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>彤哥哥的博客</title>
  
  <subtitle>为梦想而战</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ltyeamin.github.io/"/>
  <updated>2020-01-08T12:55:22.000Z</updated>
  <id>http://ltyeamin.github.io/</id>
  
  <author>
    <name>YeaMin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Adobe Premiere视频剪辑必备快捷键</title>
    <link href="http://ltyeamin.github.io/2020/01/01/Adobe%20Premiere%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E5%BF%85%E5%A4%87%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://ltyeamin.github.io/2020/01/01/Adobe Premiere视频剪辑必备快捷键/</id>
    <published>2020-01-01T10:19:23.000Z</published>
    <updated>2020-01-08T12:55:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在我们日常剪辑软件的过程中，快捷键的学习是必不可少的一环，熟练地使用他们可以显著提高我们的剪辑效率，本问，我就来分享一下，PR剪辑中我使用最多的几个剪辑快捷键，新手到进阶都有哦!</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191222001/image-20200103215810106.png" alt="PR截图"></p><h2 id="新手起步"><a href="#新手起步" class="headerlink" title="新手起步"></a>新手起步</h2><table><thead><tr><th style="text-align:center"><strong>功能</strong>描述</th><th style="text-align:center"><strong>快捷键</strong></th></tr></thead><tbody><tr><td style="text-align:center">隐藏标题栏,扩大显示区域</td><td style="text-align:center">Ctrl+\</td></tr><tr><td style="text-align:center">剃刀工具，快速切开视频轨道，对单层素材进行分割</td><td style="text-align:center">英文状态下C键+鼠标左击</td></tr><tr><td style="text-align:center">剃刀工具，快速切开视频轨道，对多层素材进行整体裁剪</td><td style="text-align:center">Ctrl+K</td></tr><tr><td style="text-align:center">选中视频轨道</td><td style="text-align:center">英文状态下V键+鼠标左击</td></tr><tr><td style="text-align:center">删除选中的片段</td><td style="text-align:center">选中Delete键</td></tr><tr><td style="text-align:center">缩放时间轴</td><td style="text-align:center">Alt+鼠标滚轮</td></tr><tr><td style="text-align:center">标记入点/出点进行预渲染，为了预览时候不卡顿</td><td style="text-align:center">英文输入法下I键/O键标记出入点</td></tr><tr><td style="text-align:center">渲染输出，导出最终输出视频</td><td style="text-align:center">Ctrl+M</td></tr></tbody></table><h2 id="进阶高手"><a href="#进阶高手" class="headerlink" title="进阶高手"></a>进阶高手</h2><table><thead><tr><th style="text-align:center"><strong>功能</strong>描述</th><th style="text-align:center"><strong>快捷键</strong></th></tr></thead><tbody><tr><td style="text-align:center">快速导入素材</td><td style="text-align:center">选择素材，英文状态下逗号隔开</td></tr><tr><td style="text-align:center">Q快速删除前面的片段，W快速删除后面的片段，两者删除后前后片段会自动衔接</td><td style="text-align:center">英文状态下Q/W键</td></tr><tr><td style="text-align:center">快速插入片段</td><td style="text-align:center">Alt+Ctrl+鼠标拖动</td></tr><tr><td style="text-align:center">选择当前素材位置之后的片段，方便快速移动</td><td style="text-align:center">英文状态下A键</td></tr><tr><td style="text-align:center">改变速率匹配到一段固定时间，片段的播放速度会根据长度会自动改变</td><td style="text-align:center">R键+鼠标拖动</td></tr><tr><td style="text-align:center">给时间线打标机，卡点时候特别有用</td><td style="text-align:center">英文输入法M键</td></tr><tr><td style="text-align:center">关闭边缘吸附</td><td style="text-align:center">英文输入法S键</td></tr><tr><td style="text-align:center">快速添加默认转场</td><td style="text-align:center">Shift+D键</td></tr><tr><td style="text-align:center">单独选中素材的视频/音频，快速取消音视频链接</td><td style="text-align:center">Alt+鼠标左键</td></tr><tr><td style="text-align:center">查看PR快捷键面板，可以找到对应的快捷键</td><td style="text-align:center">Ctrl+Alt+K</td></tr></tbody></table><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191222001/image-20200103215833888.png" alt="PR快捷键"></p><p><link class="dplayer-css" rel="stylesheet" href="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.css"></p><script src="https://www.zhyong.cn/assets/js/DPlayer.min.js"></script><div id="dplayer0"></div><br><br><br><div id="dplayer1"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script><script>const dp0 = new DPlayer({    container: document.getElementById('dplayer0'),    screenshot: true,    video: {        url: 'http://q3j85ddid.bkt.clouddn.com/videos/pr/2020-1080P.mp4'    },    subtitle: {        url: 'webvtt.vtt'    },    danmaku: {        id: 'demo',        api: 'https://api.prprpr.me/dplayer/'    }});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="video-cut" scheme="http://ltyeamin.github.io/categories/video-cut/"/>
    
    
      <category term="Primiere" scheme="http://ltyeamin.github.io/tags/Primiere/"/>
    
  </entry>
  
  <entry>
    <title>ES6回顾</title>
    <link href="http://ltyeamin.github.io/2020/01/01/ES6%E5%9B%9E%E9%A1%BE/"/>
    <id>http://ltyeamin.github.io/2020/01/01/ES6回顾/</id>
    <published>2020-01-01T02:19:23.000Z</published>
    <updated>2020-01-08T12:48:47.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="1-了解ES6"><a href="#1-了解ES6" class="headerlink" title="1. 了解ES6"></a>1. 了解ES6</h1><h2 id="1-1-为什么要回顾ES6"><a href="#1-1-为什么要回顾ES6" class="headerlink" title="1.1 为什么要回顾ES6"></a>1.1 为什么要回顾ES6</h2><ul><li>作为后端工程师，学习前端知识，遵循人无我有、人有我优的原则，保持竞争力</li><li>现在使用的主流前端框架都是基于ES6，学好前端，ES6+就是必修课，原生JS玩的溜，什么流行框架都是浮云。</li><li>想做全栈工程师，能够在公司独当一面的人绝对是受人(尤其是老板)欢迎的人，另外，自主创业的快速首选。</li><li>站在项目宏观角度统筹，与不同技术栈团队相互配合，管理者前期着重点肯定业务和技术起步，后续考虑的角度就要转移到产品和市场。</li></ul><h2 id="1-2-什么是ES6"><a href="#1-2-什么是ES6" class="headerlink" title="1.2 什么是ES6"></a>1.2 什么是ES6</h2><p>ES6，是ECMAScript 6的简称，它是 JavaScript 语言的下一代标准，己于 2015 年 6 月正式发布。  </p><p>它的目标是使 JavaScript语言可以用于编写复杂的大型应用程序，成为企业级开发语言 。</p><h2 id="1-3-前端发展史"><a href="#1-3-前端发展史" class="headerlink" title="1.3 前端发展史"></a>1.3 前端发展史</h2><ul><li><p>web1.0时代</p><p>最初的网页以HTML为主，是纯静态的网页。网页是只读的，信息流只能从服务的到客户端单向流通。<strong>开发人员<br>也只关心页面的样式和内容</strong>即可 。网页是“只读的”，用户只能搜索信息，浏览信息。Web1.0是由内容驱动的，内容来自于商业机构，服务于消费者；</p></li><li><p>web2.0时代</p><p>1995年，网景工程师Brendan Eich 花了10天时间设计了JavaScript语言。<br>1996年，微软发布了JScript，其实是JavaScript的逆向工程实现。<br>1997年，为了统一各种不同script脚本语言，ECMA（欧洲计算机制造商协会）以JavaScript为基础，制定了<br>ECMAscript 标准规范。JavaScript和JScript都是 ECMAScript 的标准实现者，随后各大浏览器厂商纷纷实现了<br>ECMAScript 标准 。</p><p>所以，ECMAScript是浏览器脚本语言的规范，而各种我们熟知的js语言，如JavaScript则是规范的具体实现  。</p><p>之后，ECMAScript就进入了快速发展期。  </p><p>1998年6月，ECMAScript 2.0 发布。<br>1999年12月，ECMAScript 3.0 发布。这时，ECMAScript 规范本身也相对比较完善和稳定了，但是接下来的事<br>情，就比较悲剧了。<br>2007年10月。。。。ECMAScript 4.0 草案发布。<br>这次的新规范，历时颇久，规范的新内容也有了很多争议。在制定ES4的时候，是分成了两个工作组同时工作：</p><p>​       a). 一边是以 Adobe, Mozilla, Opera 和 Google为主的 ECMAScript 4 工作组。  </p><p>​       b). 一边是以 Microsoft 和 Yahoo 为主的 ECMAScript 3.1 工作组。  </p><p>ECMAScript 4 的很多主张比较激进，改动较大。而 ECMAScript 3.1 则主张小幅更新。最终经过 TC39 的会<br>议，决定将一部分不那么激进的改动保留发布为 ECMAScript 3.1，而ES4的内容，则延续到了后来的<br>ECMAScript5和6版本中 。</p><p>2009年12月，ECMAScript 5 发布。<br>2011年6月，ECMAScript 5.1 发布。<br>2015年6月，ECMAScript 6，也就是 ECMAScript 2015 发布了。 并且从 ECMAScript 6 开始，开始采用年号来<br>做版本。即 ECMAScript 2015，就是ECMAScript6。<br>2016年 6月，小幅修订的《ECMAScript 2016标准》 (简称 ES2016)如期发布， 这个版本可以看作是 ES6.1版，<br>因为两者的差异非常小(只新增了数组实例的 includes 方法 和指数运算符)，基本上可以认为是同 一个标准 。<br>2017 年 6 月发布了ES2017 标准。<br>因此， ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版本以后的 JavaScript 的下一代标准，涵盖了 ES2015、<br>ES2016、 ES2017、ES2018、ES2019等，而ES2015 则是正式名称，特指当年发布的正式 版本的语言标准  </p><p>Web 2.0允许用户自主上传内容，分享内容。</p><p><strong>它的初衷就在于让互联网更加贴近民主，使用户更好的互动</strong>。</p></li><li><p>Web3.0时代</p><p>Web3.0的一个关键元素是“语义网络”，Web 3.0使得在线应用和网站可以<strong>接收到已经在网络上的信息，并将新的信息和数据反馈给用户</strong>。比如智能推荐、区块链场景下的应用。</p><p>关于Web3.0的实现存在一些挑战。目前处于概念场景状态。但是从长远来看，人类正在处于互联网变革时代的边缘，相信未来会颠覆现在的互联网格局。</p></li></ul><h1 id="2-ES6新特性"><a href="#2-ES6新特性" class="headerlink" title="2. ES6新特性"></a>2. ES6新特性</h1><h2 id="2-1-let和const变量修饰符"><a href="#2-1-let和const变量修饰符" class="headerlink" title="2.1  let和const变量修饰符"></a>2.1  let和const变量修饰符</h2><p>我们在JS中定义变量的时候，一直只有一个关键字:<strong>var</strong>，但是它有个问题，就是定义的变量有时会莫名其妙的成为全局变量。</p><p>例如这样一段代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);  <span class="comment">// 一次循环输出0-4</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(i);    <span class="comment">// 输出5</span></span><br></pre></td></tr></table></figure><p>我们都知道JS是是弱语言，动态脚本语言，这门语言的作用域是分为全局作用域和全局作用就，并不是C、C++、Java的大括号的作用域。</p><p>这块相当于在for循环外面定义了一个i变量，js称为变量提升，只要在同一个作用域，大家都可以用。</p><p>上述代码for循环外是全局变量区域，所以这个i是全局变量，虽然在循环外部也可以获取到变量i的值，显然变量i的作用域范围太大了，在做复杂页面时，会带来很大的问题。</p><p>所以ES6位我们提供了let变量修饰符，let所声明的变量，只在ket命令所在的代码块内有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);  <span class="comment">// 一次循环输出0-4</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(i);    <span class="comment">// 会报错：Uncaught ReferenceError: i is not defined at &lt;anonymous&gt;:1:13</span></span><br></pre></td></tr></table></figure><p>这样，就把变量i的作用域控制在循环范围内了。</p><p><strong>const</strong>变量其实相当于我们Java的final变量修饰符，一旦定义了，不能被修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;  <span class="comment">// 定义一个常量a</span></span><br><span class="line">a = <span class="number">6</span>;   <span class="comment">// 如果赋值会报错：Uncaught TypeError: Assignment to constant variable. at &lt;anonymous&gt;:1:3</span></span><br></pre></td></tr></table></figure><h2 id="2-2-字符串扩展"><a href="#2-2-字符串扩展" class="headerlink" title="2.2 字符串扩展"></a>2.2 字符串扩展</h2><p>在ES6中，为字符串扩展了几个新的API：  </p><ul><li>includes() ：返回布尔值，表示是否找到了参数字符串。</li><li>startsWith() ：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li>endsWith() ：返回布尔值，表示参数字符串是否在原字符串的尾部。  </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"hello litong"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str, <span class="string">" 中是否包含了tong =&gt; "</span>, str.includes(<span class="string">"tong"</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str, <span class="string">" 中是否包含了lisi =&gt; "</span>, str.includes(<span class="string">"lisi"</span>));  <span class="comment">// fasle</span></span><br><span class="line"><span class="built_in">console</span>.log(str, <span class="string">" 中是否以h开头 =&gt; "</span>, str.startsWith(<span class="string">"h"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str, <span class="string">" 中是否以a开头 =&gt; "</span>, str.startsWith(<span class="string">"a"</span>)); <span class="comment">// fasle</span></span><br><span class="line"><span class="built_in">console</span>.log(str, <span class="string">" 中是否以a结束 =&gt; "</span>, str.endsWith(<span class="string">"g"</span>));   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str, <span class="string">" 中是否以h结束 =&gt; "</span>, str.endsWith(<span class="string">"h"</span>)); <span class="comment">// fasle</span></span><br></pre></td></tr></table></figure><p>除此之外，ES6位我们提供了字符串模板标记，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'litong\n未来很美\n你要加油\n'</span>;  <span class="comment">// 以前的写法</span></span><br><span class="line"><span class="keyword">let</span> words = <span class="string">`</span></span><br><span class="line"><span class="string">litong</span></span><br><span class="line"><span class="string">未来很美</span></span><br><span class="line"><span class="string">你要加油</span></span><br><span class="line"><span class="string">`</span>;  <span class="comment">// 现在的写法可以替代以前的写法</span></span><br></pre></td></tr></table></figure><h2 id="2-3-解构表达式"><a href="#2-3-解构表达式" class="headerlink" title="2.3 解构表达式"></a>2.3 解构表达式</h2><p>什么是解构？ ES6中允许按照一定模式从数组和对象中提取值，然后对变量进行赋值，这被称为解构 (<br>Destructuring)。  </p><h3 id="2-3-1-数组解构"><a href="#2-3-1-数组解构" class="headerlink" title="2.3.1  数组解构"></a>2.3.1  数组解构</h3><p>假设现有一个数组之前，我想获取其中的值，只能通过角标。ES6可以这样：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; <span class="comment">// 假设的数组</span></span><br><span class="line"><span class="keyword">const</span> [x,y,z] = arr; <span class="comment">// x，y，z将与arr中的每个位置对应来取值</span></span><br><span class="line"><span class="built_in">console</span>.log(x,y,z);  <span class="comment">// 打印1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a] = arr; <span class="comment">//只匹配1个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 只打印1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [b,,c] = arr; <span class="comment">// 只匹配任意的几个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(b,c);  <span class="comment">// 打印1 3</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2-对象解构"><a href="#2-3-2-对象解构" class="headerlink" title="2.3.2  对象解构"></a>2.3.2  对象解构</h3><p>例如有个staff对象：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> staff = &#123;</span><br><span class="line">name:<span class="string">"litong"</span>,</span><br><span class="line">age:<span class="number">28</span>,</span><br><span class="line">skills: [<span class="string">'java'</span>, <span class="string">'js'</span>, <span class="string">'css'</span>, <span class="string">'docker'</span>, <span class="string">'python'</span>, <span class="string">'linux'</span>, <span class="string">'k8s'</span>, <span class="string">'es'</span>, <span class="string">'redis'</span>, <span class="string">'MQ'</span>, <span class="string">'MySQL'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以这样赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构表达式获取值</span></span><br><span class="line"><span class="keyword">const</span> &#123;name,age,skills&#125; = staff;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 打印 litong</span></span><br><span class="line"><span class="built_in">console</span>.log(age);  <span class="comment">// 打印 28</span></span><br><span class="line"><span class="built_in">console</span>.log(skills); <span class="comment">// 打印 ["java", "js", "css", "docker", "python", "linux", "k8s", "es", "redis", "MQ", "MySQL"]</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">name</span>:nickname&#125; = staff;</span><br><span class="line"><span class="built_in">console</span>.log(nickname); <span class="comment">// 如过想要用其它变量接收，需要额外指定别名，同样能够打印 litong</span></span><br></pre></td></tr></table></figure><h2 id="2-4-函数优化"><a href="#2-4-函数优化" class="headerlink" title="2.4 函数优化"></a>2.4 函数优化</h2><p>在ES6中，对函数的操作做了优化，使得我们在操作函数时更加的便捷。</p><h3 id="2-4-1-函数参数值默认值"><a href="#2-4-1-函数参数值默认值" class="headerlink" title="2.4.1 函数参数值默认值"></a>2.4.1 函数参数值默认值</h3><p>在ES6以前，我们无法给一个函数参数设置默认值，只能采用变通写法：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a , b</span>) </span>&#123;</span><br><span class="line">b = b || <span class="number">1</span>; <span class="comment">// 判断b是否为空，为空就给默认值1</span></span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p>现在可以这么写：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给b设置默认值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a , b = <span class="number">1</span></span>) </span>&#123; </span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><h3 id="2-4-2-箭头函数"><a href="#2-4-2-箭头函数" class="headerlink" title="2.4.2 箭头函数"></a>2.4.2 箭头函数</h3><p>ES6中定义函数的简写方式：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> print = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一个参数的函数可简写为：</span></span><br><span class="line"><span class="keyword">var</span> print2 = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a , b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 多个参数的函数可简写为：</span></span><br><span class="line"><span class="keyword">var</span> sum2 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有参数时，需要通过()进行占位，代表参数部分</span></span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"hello!"</span>);</span><br><span class="line">sayHello(); <span class="comment">// 输出hello!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码不止一行，可以用 &#123;&#125; 括起来</span></span><br><span class="line"><span class="keyword">var</span> sum3 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">     b = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 多行，没有返回值</span></span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello!"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"world!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">sayHello()</span><br></pre></td></tr></table></figure><h3 id="2-4-3-对象的函数属性简写"><a href="#2-4-3-对象的函数属性简写" class="headerlink" title="2.4.3 对象的函数属性简写"></a>2.4.3 对象的函数属性简写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">name: <span class="string">"jack"</span>,</span><br><span class="line"><span class="comment">// 以前写法：</span></span><br><span class="line">eat: <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"在吃"</span> + food);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 箭头函数版：</span></span><br><span class="line">eat2: <span class="function"><span class="params">food</span> =&gt;</span> <span class="built_in">console</span>.log(person.name + <span class="string">"在吃"</span> + food), <span class="comment">// 这里拿不到this，就不能this.name</span></span><br><span class="line"><span class="comment">// 简写版：</span></span><br><span class="line">eat3(food)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"在吃"</span> + food);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-4-箭头函数结合解构表达式"><a href="#2-4-4-箭头函数结合解构表达式" class="headerlink" title="2.4.4 箭头函数结合解构表达式"></a>2.4.4 箭头函数结合解构表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">name:<span class="string">"jack"</span>,</span><br><span class="line">age:<span class="number">21</span>,</span><br><span class="line">language: [<span class="string">'java'</span>,<span class="string">'js'</span>,<span class="string">'css'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello,"</span> + person.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用箭头函数和解构表达式</span></span><br><span class="line"><span class="keyword">var</span> hi = <span class="function">(<span class="params">&#123;name&#125;</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"hello,"</span> + name);</span><br><span class="line">hi(person)</span><br></pre></td></tr></table></figure><h2 id="2-5-map和reduce"><a href="#2-5-map和reduce" class="headerlink" title="2.5 map和reduce"></a>2.5 map和reduce</h2><p>ES6中，数组新增了map和reduce方法。  </p><h3 id="2-5-1-map"><a href="#2-5-1-map" class="headerlink" title="2.5.1 map()"></a>2.5.1 map()</h3><p>map() ：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。<br>举例：有一个字符串数组，我们希望转为int数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'1'</span>,<span class="string">'20'</span>,<span class="string">'-5'</span>,<span class="string">'3'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">// 打印['1', '20', '-5', '3']</span></span><br><span class="line"><span class="keyword">let</span> newArr = arr.map(<span class="function"><span class="params">s</span> =&gt;</span> <span class="built_in">parseInt</span>(s));</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// 打印[1, 20, -5, 3]</span></span><br></pre></td></tr></table></figure><h3 id="2-5-2-reduce"><a href="#2-5-2-reduce" class="headerlink" title="2.5.2 reduce()"></a>2.5.2 reduce()</h3><p>reduce() ：接收一个函数（必须）和一个初始值（可选），该函数接收两个参数：  </p><ul><li>第一个参数是上一次reduce处理的结果</li><li>第二个参数是数组中要处理的下一个元素  </li></ul><p>reduce() 会从左到右依次把数组中的元素用reduce处理，并把处理的结果作为下次reduce的第一个参数。如果是<br>第一次，会把前两个元素作为计算参数，或者把用户指定的初始值作为起始参数 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">20</span>,<span class="number">-5</span>,<span class="number">3</span>]; <span class="comment">// 初始化数组</span></span><br><span class="line">arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b); <span class="comment">// 计算结果为19</span></span><br><span class="line">arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a * b); <span class="comment">// 计算结果为-300</span></span><br><span class="line">arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a * b, <span class="number">0</span>); <span class="comment">// 多加个初始值参数，计算结果为0</span></span><br></pre></td></tr></table></figure><h2 id="2-6-扩展运算符"><a href="#2-6-扩展运算符" class="headerlink" title="2.6 扩展运算符"></a>2.6 扩展运算符</h2><p>扩展运算符(spread)是三个点(…)， 将一个数组转为用逗号分隔的参数序列 。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log (...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 1 2 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>); <span class="comment">// 1 2 3 4 5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(add(...numbers)); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 数组合并</span></span><br><span class="line"><span class="keyword">let</span> arr = [...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],...[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="comment">// 与解构表达式结合</span></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(first, rest) <span class="comment">// 1 [2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">//将字符串转成数组</span></span><br><span class="line"><span class="built_in">console</span>.log([...<span class="string">'hello'</span>]) <span class="comment">// ["h", "e", "l", "l", "o"]</span></span><br></pre></td></tr></table></figure><h2 id="2-7-Promise"><a href="#2-7-Promise" class="headerlink" title="2.7 Promise"></a>2.7 Promise</h2><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法<br>上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样<br>的方法进行处理。<br>我们可以通过Promise的构造函数来创建Promise对象，并在内部封装一个异步执行的结果 。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="comment">// ... 执行异步操作</span></span><br><span class="line"><span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">resolve(value);<span class="comment">// 调用resolve，代表Promise将返回成功的结果</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">reject(error);<span class="comment">// 调用reject，代表Promise会返回失败结果</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>  这样，在promise中就封装了一段异步执行的结果。  </p><p>如果我们想要等待异步执行完成，做一些事情，我们可以通过promise的then方法来实现,语法：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 异步执行成功后的回调</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果想要处理promise异步执行失败的事件，还可以跟上catch：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 异步执行成功后的回调</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 异步执行失败后的回调</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 这里我们用定时任务模拟异步</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> num = <span class="built_in">Math</span>.random();</span><br><span class="line"><span class="comment">// 随机返回成功或失败</span></span><br><span class="line"><span class="keyword">if</span> (num &lt; <span class="number">0.5</span>) &#123;</span><br><span class="line">resolve(<span class="string">"成功！num:"</span> + num); <span class="comment">// 成功！num:0.4884028656598369</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">reject(<span class="string">"出错了！num:"</span> + num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">300</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 调用promise</span></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(msg); </span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-8-set和map"><a href="#2-8-set和map" class="headerlink" title="2.8 set和map"></a>2.8 set和map</h2><p>ES6提供了Set和Map的数据结构。<br>Set，本质与数组类似。不同在于Set中只能保存不同元素，如果元素相同会被忽略。和Java中的Set集合非常相似。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set构造函数可以接收一个数组或空</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">set.add(<span class="number">1</span>);<span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">let</span> set2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>]); <span class="comment">// 接收数组得到[2,3,4,5]</span></span><br><span class="line">set.add(<span class="number">1</span>);<span class="comment">// 添加</span></span><br><span class="line">set.clear();<span class="comment">// 清空</span></span><br><span class="line">set.delete(<span class="number">2</span>);<span class="comment">// 删除指定元素</span></span><br><span class="line">set.has(<span class="number">2</span>); <span class="comment">// 判断是否存在</span></span><br><span class="line">set.forEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)<span class="comment">//遍历元素</span></span><br><span class="line">set.size; <span class="comment">// 元素个数。是属性，不是方法</span></span><br></pre></td></tr></table></figure><p>map，本质是与Object类似的结构。不同在于，Object强制规定key只能是字符串。而Map结构的key可以是任意对<br>象。即：  </p><ul><li>object是 &lt;string,object&gt;集合</li><li>map是&lt;object,object&gt;集合  </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map接收一个数组，数组中的元素是键值对数组</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">[<span class="string">'key1'</span>,<span class="string">'value1'</span>],</span><br><span class="line">[<span class="string">'key2'</span>,<span class="string">'value2'</span>],</span><br><span class="line">])</span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([</span><br><span class="line">[<span class="string">'key1'</span>,<span class="string">'value1'</span>],</span><br><span class="line">[<span class="string">'key2'</span>,<span class="string">'value2'</span>],</span><br><span class="line">])</span><br><span class="line"><span class="keyword">const</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>(set) <span class="comment">// 或者接收一个set</span></span><br><span class="line"><span class="keyword">const</span> map3 = <span class="keyword">new</span> <span class="built_in">Map</span>(map); <span class="comment">// 或者其它map</span></span><br><span class="line"></span><br><span class="line">map.set(key, value);<span class="comment">// 添加</span></span><br><span class="line">map.clear(); <span class="comment">// 清空</span></span><br><span class="line">map.delete(key);<span class="comment">// 删除指定元素</span></span><br><span class="line">map.has(key); <span class="comment">// 判断是否存在</span></span><br><span class="line">map.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;&#125;) <span class="comment">// 遍历元素</span></span><br><span class="line">map.size; <span class="comment">// 元素个数。是属性，不是方法</span></span><br><span class="line">map.values() <span class="comment">// 获取value的迭代器</span></span><br><span class="line">map.keys() <span class="comment">// 获取key的迭代器</span></span><br><span class="line">map.entries() <span class="comment">// 获取entry的迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;  <span class="comment">// 遍历</span></span><br><span class="line"><span class="built_in">console</span>.log(key);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(...map.values()); <span class="comment">//通过扩展运算符进行展开</span></span><br></pre></td></tr></table></figure><h2 id="2-9-class的基本语法"><a href="#2-9-class的基本语法" class="headerlink" title="2.9 class的基本语法"></a>2.9 class的基本语法</h2><p>JavaScript 语言的传统方法是通过构造函数定义井生成新对象。ES6中引入了class的概念，通过class关键字自定义<br>类。  和Java定义类的方式类似，基本用法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;  <span class="comment">// 定义一个class</span></span><br><span class="line"><span class="keyword">constructor</span>(name, age = 20)&#123; <span class="comment">// 构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name; <span class="comment">// 添加属性并且赋值</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125; </span><br><span class="line">    sayHello()&#123; <span class="comment">// 定义方法</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> isAdult(age)&#123; <span class="comment">//静态方法</span></span><br><span class="line"><span class="keyword">if</span>(age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"成年人"</span>;</span><br><span class="line">&#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">"未成年人"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User(<span class="string">"张三"</span>);</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(user); <span class="comment">// User &#123;name: "张三", age: 20&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(user.sayHello()); <span class="comment">// hello</span></span><br><span class="line"><span class="built_in">console</span>.log(User.isAdult(<span class="number">20</span>)); <span class="comment">// 成年人</span></span><br></pre></td></tr></table></figure><p>类的继承:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;  </span><br><span class="line"><span class="keyword">constructor</span>(name, age = 20)&#123; <span class="comment">// 构造方法</span></span><br><span class="line"><span class="keyword">this</span>.name = name; <span class="comment">// 添加属性并且赋值</span></span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125; </span><br><span class="line">    sayHello()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello"</span>; <span class="comment">// 定义方法</span></span><br><span class="line">&#125; </span><br><span class="line">    <span class="keyword">static</span> isAdult(age)&#123; <span class="comment">//静态方法</span></span><br><span class="line"><span class="keyword">if</span>(age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"成年人"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"未成年人"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZhangSan</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;  <span class="comment">// 类的继承</span></span><br><span class="line"><span class="keyword">constructor</span>()&#123;</span><br><span class="line"><span class="keyword">super</span>(<span class="string">"张三"</span>, <span class="number">30</span>); <span class="comment">//如果父类中的构造方法有参数，那么子类必须通过super调用父类的构造方法</span></span><br><span class="line"><span class="keyword">this</span>.address = <span class="string">"上海"</span>; <span class="comment">//设置子类中的属性，位置必须处于super下面</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> zs = <span class="keyword">new</span> ZhangSan();</span><br><span class="line"><span class="built_in">console</span>.log(zs.name, zs.address);</span><br><span class="line"><span class="built_in">console</span>.log(zs.sayHello());</span><br><span class="line"><span class="built_in">console</span>.log(ZhangSan.isAdult(<span class="number">20</span>));</span><br></pre></td></tr></table></figure><h2 id="2-10-Generator迭代器"><a href="#2-10-Generator迭代器" class="headerlink" title="2.10 Generator迭代器"></a>2.10 Generator迭代器</h2><p>Generator 函数是 ES6 提供的 一种异步编程解决方案，语法行为与传统函数完全不同 。<br>Generator函数有两个特征: </p><ul><li>一是 function命令与函数名之间有一个星号:</li><li>二是函数体内部使用 yield吾句定义不同的<br>内部状态。  </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">hello</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line"><span class="keyword">yield</span> <span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">"world"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"done"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> h = hello();</span><br><span class="line"><span class="built_in">console</span>.log(h.next()); <span class="comment">//&#123;value: "hello", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(h.next()); <span class="comment">//&#123;value: "world", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(h.next()); <span class="comment">//&#123;value: "done", done: true&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(h.next()); <span class="comment">//&#123;value: undefined, done: true</span></span><br></pre></td></tr></table></figure><p>可以看到，通过hello()返回的h对象，每调用一次next()方法返回一个对象，该对象包含了value值和done状态。直到<br>遇到return关键字或者函数执行完毕，这个时候返回的状态为ture，表示已经执行结束了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">hello</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">"world"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"done"</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> h = hello();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> obj <span class="keyword">of</span> h) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(obj);  <span class="comment">// 依次打印hello和world</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-11-修饰器"><a href="#2-11-修饰器" class="headerlink" title="2.11 修饰器"></a>2.11 修饰器</h2><p>修饰器(Decorator)是一个函数， 用来修改类的行为。 ES2017 引入了这项功能， 目前 Babel 转码器己经支持。  其实这个很像我们Java的注解。我们来看下面例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@T <span class="comment">//通过@符号进行引用该方法，类似java中的注解</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name, age = 20)&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">T</span>(<span class="params">target</span>) </span>&#123; <span class="comment">//定义一个普通的方法</span></span><br><span class="line"><span class="built_in">console</span>.log(target); <span class="comment">//target对象为修饰的目标对象，这里是User对象</span></span><br><span class="line">target.country = <span class="string">"中国"</span>; <span class="comment">//为User类添加一个静态属性country</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(User.country); <span class="comment">// 理论上打印出country属性值，但实际上报错:Uncaught SyntaxError: Invalid or unexpected token</span></span><br></pre></td></tr></table></figure><p>如果上述代码直接在浏览器运行会报错，原因是，在ES6中，并没有支持该用法，在ES2017中才有，所以我们不能直接运行了，需要进行编码后再运行。<br>转码的意思是：将ES6或ES2017转为ES5执行。类似这样 :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转码前</span></span><br><span class="line">input .map(<span class="function"><span class="params">item</span> =&gt;</span>item + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//转码后</span></span><br><span class="line">input.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> item + <span class="number">1</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-12-转码器"><a href="#2-12-转码器" class="headerlink" title="2.12 转码器"></a>2.12 转码器</h2><ul><li>Babel (babeljs.io)是一个广为使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，从而 在浏览器或其他环境执<br>行 。</li><li>Google 公司的 Traceur 转码器 Cgithub.com/google/traceur-compiler)，也可以将 ES6 代码转为ES5的代码。</li></ul><p>这2款都是非常优秀的转码工具，在这里我不会使用上述两个工具，而是会使用阿里的开源企业级react框架转码工具：UmiJS。 Vue CLI脚架的默认转码器是Babel。</p><h3 id="2-12-1-UmiJS转码器"><a href="#2-12-1-UmiJS转码器" class="headerlink" title="2.12.1 UmiJS转码器"></a>2.12.1 UmiJS转码器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首先需要安装Node.js环境，Node环境自行百度</span></span><br><span class="line">C:\Users\LT&gt;node -v   // 确保node环境正常</span><br><span class="line">v12.13.0</span><br><span class="line"><span class="meta">#</span><span class="bash">接下来，开始安装yarn，其中tyarn使用的是npm.taobao.org的源，速度要快一些</span></span><br><span class="line"><span class="meta">#</span><span class="bash">可以把yarn看做了优化了的npm</span></span><br><span class="line">npm i yarn tyarn -g #-g 是指全局安装</span><br><span class="line">tyarn -v #进行测试，如果能够正常输出版本信息则说明安装成功了</span><br><span class="line">1.21.1 # 安装成功</span><br><span class="line"><span class="meta">#</span><span class="bash">如果安装失败，是由于将yarn添加到环境变量中导致</span></span><br><span class="line"><span class="meta">#</span><span class="bash">下面开始安装umi</span></span><br><span class="line">tyarn global add umi</span><br><span class="line">umi #进行测试，如果找不到umi命令，继续</span><br><span class="line">yarn global bin # 查看umi命令所处的路径，我的路径是：C:\Users\LT\AppData\Local\Yarn\bin，然后将该路径添加到环境变量里就可以了</span><br><span class="line">C:\Users\LT&gt;umi -v</span><br><span class="line">2.12.9  # umi的版本</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">通过初始化命令将生成package.json文件，它是 NodeJS 约定的用来存放项目的信息和配置等信息的文件。</span></span><br><span class="line">tyarn init -y</span><br><span class="line"><span class="meta">#</span><span class="bash">通过umi命令创建index.js文件</span></span><br><span class="line">umi g page index #可以看到在pages下创建好了index.js和index.css文件</span><br><span class="line"><span class="meta">#</span><span class="bash">将下面内存拷贝到index.js文件中进行测试</span></span><br><span class="line">@T //通过@符号进行引用该方法，类似java中的注解</span><br><span class="line">class User &#123;</span><br><span class="line">constructor(name, age = 20)&#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">function T(target) &#123; //定义一个普通的方法</span><br><span class="line">console.log(target); //target对象为修饰的目标对象，这里是User对象</span><br><span class="line">target.country = "中国"; //为User类添加一个静态属性country</span><br><span class="line">target.city = "上海"; //为User类添加一个静态属性city</span><br><span class="line">&#125;</span><br><span class="line">console.log(User.country + ' - ' + User.city); //打印出country和city属性值，中国 - 上海</span><br><span class="line"><span class="meta">#</span><span class="bash">通过命令行启动umi的后台服务,用于本地开发</span></span><br><span class="line">umi dev</span><br><span class="line"><span class="meta">#</span><span class="bash">通过浏览器进行访问：http://localhost:8000/，查看效果</span></span><br><span class="line"><span class="meta">#</span><span class="bash">值得注意的是，这里访问的是umi的后台服务，不是idea提供的服务</span></span><br></pre></td></tr></table></figure><p>查看转码后的index.js文件，找到自己写的那个代码,也就是对对象包裹了一层，没什么高大上的:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="comment">//通过@符号进行引用该方法，类似java中的注解</span></span><br><span class="line">User = T(_class = <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="built_in">arguments</span>.length &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">arguments</span>[<span class="number">1</span>] !== <span class="literal">undefined</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;) || _class;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">T</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//定义一个普通的方法</span></span><br><span class="line">  <span class="built_in">console</span>.log(target); <span class="comment">//target对象为修饰的目标对象，这里是User对象</span></span><br><span class="line"></span><br><span class="line">  target.country = <span class="string">"中国"</span>; <span class="comment">//为User类添加一个静态属性country</span></span><br><span class="line"></span><br><span class="line">  target.city = <span class="string">"上海"</span>; <span class="comment">//为User类添加一个静态属性city</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(User.country + <span class="string">' - '</span> + User.city); <span class="comment">//打印出country和city属性值</span></span><br></pre></td></tr></table></figure><h3 id="2-12-2-Babel-转码器"><a href="#2-12-2-Babel-转码器" class="headerlink" title="2.12.2  Babel 转码器"></a>2.12.2  Babel 转码器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">npm install -g babel-cli  # 全局安装babel-cli</span><br><span class="line">npm init # 初始化项目</span><br><span class="line">npm install --save-dev babel-preset-es2015  # 安装es2015 babel规范， 当前你可以安装其他版本的规范</span><br><span class="line">// ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span><br><span class="line">npm install --save-dev babel-preset-stage-0</span><br><span class="line">npm install --save-dev babel-preset-stage-1</span><br><span class="line">npm install --save-dev babel-preset-stage-2</span><br><span class="line">npm install --save-dev babel-preset-stage-3</span><br><span class="line"></span><br><span class="line">npm install babel-plugin-transform-decorators-legacy -g  # es7的装饰器babel转码插件</span><br><span class="line">type nul &gt; .babelrc # Windows创建.babelrc文件，Linux使用touch .babelrc命令创建该文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将下面的json复制到.babelrc文件里</span></span><br><span class="line">&#123;</span><br><span class="line">  "presets": [</span><br><span class="line">    "es2015",</span><br><span class="line">    "stage-0"</span><br><span class="line">  ],</span><br><span class="line">  "plugins": ["transform-decorators-legacy"]  </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件所在目录   转码后的文件为index-after.js</span></span><br><span class="line">babel ./index.js -o ./index-after.js</span><br></pre></td></tr></table></figure><p>查看index-after.js文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>; <span class="comment">// 开启es6的严格模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _class;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> _classCallCheck(<span class="params">instance, Constructor</span>) </span>&#123; <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>); &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> User = T(_class = <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> age = <span class="built_in">arguments</span>.length &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">arguments</span>[<span class="number">1</span>] !== <span class="literal">undefined</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">_classCallCheck(<span class="keyword">this</span>, User);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;) || _class;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">T</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line"><span class="comment">//定义一个普通的方法</span></span><br><span class="line"><span class="built_in">console</span>.log(target); <span class="comment">//target对象为修饰的目标对象，这里是User对象</span></span><br><span class="line">target.country = <span class="string">"中国"</span>; <span class="comment">//为User类添加一个静态属性country</span></span><br><span class="line">target.city = <span class="string">"上海"</span>; <span class="comment">//为User类添加一个静态属性city</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(User.country + <span class="string">' - '</span> + User.city); <span class="comment">//打印出country和city属性值，中国 - 上海</span></span><br></pre></td></tr></table></figure><h3 id="2-12-3-在线转码"><a href="#2-12-3-在线转码" class="headerlink" title="2.12.3 在线转码"></a>2.12.3 在线转码</h3><p><a href="https://babeljs.io/repl/#?browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=AIFQBA9BhYCY4_HIMm9DvyobfjAyEYVH1AUroU-jCdpoKs2gMP-DePoDzyAVgIYBuVgtHKAhboBc2gx5EBQAxgDZUDOfMAFU-AUwBOYAN7sAkJwD2AOz4AXcQFdOqheIAUSqgFtRAGjBUA5qLABeMACYADAEoZs2aoAWASz4A6QxM7MCDRAG45T18Aqxt7OMjZAF92VIAzDSVtH2UwED1VKnFrVRdpSAhALO1ASTlAADlAKjlAOzNoRkI5RRUFblF_bgVLQuLSl3DKopLRVUBP7UBDGMAuOUA7-UAHTMZAO7dAcAs5okBN-MAZxMB6MxEJObkJ0v9FLPUATxCAInpAX7V7sah54_ESQG_bQAKlRsAmumAQANAHo6gHIDK5KW5nYZTS4-VR3ez3QBQcoB3W1elQ-Yi-f0BoIhCJuaS4yj43V6_UGn0uCmu4juAGowAByMAAWlZYGZNM4RNGlUAykaAB2VAF-KkNugBiVPmI8GAHgUiM8OWB0UA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=true&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=false&amp;presets=es2015%2Creact%2Cstage-2&amp;prettier=false&amp;targets=&amp;version=7.7.7&amp;externalPlugins=" target="_blank" rel="noopener">Babel在线转码网站</a></p><h2 id="2-13-模块化"><a href="#2-13-模块化" class="headerlink" title="2.13 模块化"></a>2.13 模块化</h2><h3 id="2-13-1-什么是模块化"><a href="#2-13-1-什么是模块化" class="headerlink" title="2.13.1 什么是模块化"></a>2.13.1 什么是模块化</h3><p>模块化就是把代码进行拆分，方便重复利用。类似java中的导包：要使用一个包，必须先导包。<br>而JS中没有包的概念，换来的是 模块。<br>模块功能主要由两个命令构成： export 和 import 。</p><ul><li>export 命令用于规定模块的对外接口。</li><li>import 命令用于导入其他模块提供的功能。    </li></ul><h3 id="2-13-2-export"><a href="#2-13-2-export" class="headerlink" title="2.13.2 export"></a>2.13.2 export</h3><p>比如我定义一个js文件:Util.js，里面有一个Util类 ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> sum = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 导出该类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Util;</span><br></pre></td></tr></table></figure><h3 id="2-13-3-import"><a href="#2-13-3-import" class="headerlink" title="2.13.3 import"></a>2.13.3 import</h3><p>使用 export 命令定义了模块的对外接口以后，其他 JS 文件就可以通过 import 命令加载这个模块。<br>例如我要使用上面导出的Util：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Index.js</span></span><br><span class="line"><span class="comment">//导入Util类</span></span><br><span class="line"><span class="keyword">import</span> Util <span class="keyword">from</span> <span class="string">'./Util'</span></span><br><span class="line"><span class="comment">//使用Util中的sum方法</span></span><br><span class="line"><span class="built_in">console</span>.log(Util.sum(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="frontend" scheme="http://ltyeamin.github.io/categories/frontend/"/>
    
    
      <category term="JavaScript" scheme="http://ltyeamin.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>跟着彤哥学网络-初识网络层</title>
    <link href="http://ltyeamin.github.io/2019/12/23/%E8%B7%9F%E7%9D%80%E5%BD%A4%E5%93%A5%E5%AD%A6%E7%BD%91%E7%BB%9C-%E5%88%9D%E8%AF%86%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <id>http://ltyeamin.github.io/2019/12/23/跟着彤哥学网络-初识网络层/</id>
    <published>2019-12-23T12:22:19.000Z</published>
    <updated>2020-01-08T13:29:55.397Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="1-网络层提供的两种服务"><a href="#1-网络层提供的两种服务" class="headerlink" title="1. 网络层提供的两种服务"></a>1. 网络层提供的两种服务</h1><ul><li>在计算机网络领域，网络层应该向运输层提供怎样的服务（“面向连接”还是“无连接”）曾引起了长期的争论。</li><li>争论焦点的实质就是：在计算机通信中，可靠交付应当由谁来负责？是网络还是端系统？ </li></ul><h2 id="1-1-两种不同的观点"><a href="#1-1-两种不同的观点" class="headerlink" title="1.1 两种不同的观点"></a>1.1 两种不同的观点</h2><p>一种观点：让网络负责可靠交付。</p><p>这种观点认为，应借助于电信网的成功经验，让网络负责可靠交付，计算机网络应模仿电信网络，使用电信昂贵的程控交换机面向连接的通信方式。<br>通信之前先建立虚电路 (Virtual Circuit)，以保证双方通信所需的一切网络资源。然后双方沿着VC电路发送分组。发送分组不需要填写完整的目的的主机地址而只需要填写VC虚电路的编号，因而减少分组开销。<br>如果再使用可靠传输的网络协议，就可使所发送的分组无差错按序到达终点，不丢失、不重复。</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191223001/1576845750592.png" alt="虚电路服务"></p><p>虚电路：表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而并不是真正建立了一条物理连接。请注意，电路交换的电话通信是建立了一条真正的连接。因此分组交换的虚电路和电路交换的连接只是类似，但并不完全一样。</p><p>一种观点：互联网先驱提出网络提出崭新的思路-网络提供数据报服务</p><p>他们认为电信网提供的端到端可靠传输的服务对电话业务无疑是很合适的。因为电话网的终端（电话机）非常简单，没有智能，也没有差错处理能力。因此电信网必须负责把用户电话机产生的信号可靠地传送到对方的电话机，使得还原的语音质量符合技术规范的要求。</p><p>计算机网络的端系统是有智能的计算机。计算机有很强的差错处理能力。因而互联网采用的设计思路是：<strong>网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务</strong>。其中数据报（或IP数据报）就是我们常说的数据报文、数据包、分组。</p><p>网络在发送分组时不需要先建立连接。每一个分组（即 IP 数据报）独立发送，与其前后的分组无关（不进行编号）。</p><p>网络层不提供服务质量的承诺。即所传送的分组可能出错、丢失、重复和失序（不按序到达终点），当然也不保证分组传送的时限。</p><p>由于传输网络不提供端到端的可靠传输服务，这就使网络中的路由器可以做得比较简单，而且价格低廉（与电信网的交换机相比较）。</p><p>如果主机（即端系统）中的进程之间的通信需要是可靠的，那么就由网络的主机中的运输层负责可靠交付（包括差错处理、流量控制等） 。</p><p>采用这种设计思路的好处是：<strong>网络的造价大大降低，运行方式灵活，能够适应多种应用</strong>。</p><p>互连网能够发展到今日的规模，充分证明了当初采用这种设计思路的正确性。</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191223001/1576847158314.png" alt="数据报服务"></p><p>OSI体系的支持者层极力主张在网络层使用可靠传输的虚电路服务，也曾推出过虚电路服务著名标准-ITU-T的X.25建议书。但现在X.25早已成为历史了。</p><h2 id="1-2-虚电路服务与数据报服务的对比"><a href="#1-2-虚电路服务与数据报服务的对比" class="headerlink" title="1.2 虚电路服务与数据报服务的对比"></a>1.2 虚电路服务与数据报服务的对比</h2><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191223001/1576847745813.png" alt="虚电路服务与数据报服务的对比"></p><h1 id="2-网际协议IP"><a href="#2-网际协议IP" class="headerlink" title="2. 网际协议IP"></a>2. 网际协议IP</h1><p>网际协议IP是TCP/IP体系中两个最重要的协议之一。也是最重要的互联网标准协议之一。关于IP又分为IPV4版本和IPV6版本（版本1-3和版本5研究不成功所以不使用），这里指的是IPV4版本，有关IPV6的知识后面会学习。</p><p>与 IP 协议配套使用的还有四个协议，其中三个现在仍然在用，一个已经被现代网络淘汰掉了。</p><ul><li>地址解析协议ARP (Address Resolution Protocol)</li><li>网际控制报文协议ICMP (Internet Control Message Protocol)</li><li>网际组管理协议IGMP (Internet Group Management Protocol)</li><li>逆地址解析协议RARP(Reverse Address Resolution Protocol),和ARP协议配合使用，但是现在已经淘汰。</li></ul><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191223001/1576848401127.png" alt="网际协议"></p><p>上图中，ARP在最下面，因为IP经常要使用这个协议。ICMP和IGMP在上部，因为他们使用IP协议。</p><p>由于网际协议IP是用来使互联起来的许多计算机网络能够进行通信的，因此TCP/IP体系中的网络层常常被称为<strong>网际层</strong>(internet layer)或IP层。</p><h1 id="3-虚拟互联网"><a href="#3-虚拟互联网" class="headerlink" title="3. 虚拟互联网"></a>3. 虚拟互联网</h1><p>将网络互连并能够互相通信，会遇到许多问题需要解决，如：</p><ul><li>不同的寻址方案</li><li>不同的最大分组长度</li><li>不同的网络接入机制</li><li>不同的超时控制</li><li>不同的差错恢复方法</li><li>不同的状态报告方法</li><li>不同的路由选择技术</li><li>不同的用户接入控制</li><li>不同的服务（面向连接服务和无连接服务）</li><li>不同的管理与控制方式等</li></ul><p>那么问题来了，如何将异构的网络互相连接起来？答案是可以的，需要借助一些中间设备进行互连。中间设备又称为中间系统或中继 (relay)系统。常见有以下五种不同的中间设备：</p><ul><li>物理层中继系统：转发器 (repeater)，信号放大</li><li>数据链路层中继系统：网桥或桥接器 (bridge),交换机工作的层</li><li>网络层中继系统：路由器 (router)，网络数据包的转发</li><li>网桥和路由器的混合物：桥路器 (brouter)，产品少、普及少</li><li>网络层以上的中继系统：网关 (gateway)</li></ul><p>当中继系统是转发器或网桥时，一般并不称之为网络互连，因为这仅仅是把一个网络扩大了，而这仍然是一个网络。 </p><p>网关由于比较复杂，目前使用得较少。</p><p>网络互连都是指用路由器进行网络互连和路由选择。</p><p>由于历史的原因，许多有关 TCP/IP 的文献将网络层使用的路由器称为网关。</p><p>所谓虚拟互连网络也就是逻辑互连网络，它的意思就是互连起来的各种物理网络的异构性本来是客观存在的，但是我们利用 IP 协议就可以使这些性能各异的网络从用户看起来好像是一个统一的网络。</p><p>使用 IP 协议的虚拟互连网络可简称为 IP 网。</p><p>使用虚拟互连网络的好处是：当互联网上的主机进行通信时，就好像在一个网络上通信一样，而看不见互连的各具体的网络异构细节。</p><p>如果在这种覆盖全球的 IP 网的上层使用 TCP 协议，那么就是现在的互联网 (Internet)。</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191223001/1576849635907.png" alt="虚拟互联网"></p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191223001/1576849682738.png" alt="分组在互联网中的传送"></p><p>上图中源主机H1要把一个IP数据报发送给目的主机H2.主机H1先找到自己的路由表，看目的主机是否就在本网络上，如是，则不需要经过任何路由器而是直接交付(实际上是在交换机内部进行分组交换(存储转发))。任务就完成了。若不是，则必须将IP数据报发送给某个路由器(R1)，R1在查找了自己的路由表后，知道应当把数据报转发给R2进行交付。这样一直转发下去，最后R5知道自己和H2连接在同一个网络上，不需要在用别的路由器转发了，于是把数据报直接交付给目的主机H2。</p><p>我们还可以注意到R4和R5使用了卫星链路，而R5所连接的是个无线局域网。在R1-R4之间的三个网络则可以是任意类型的网络。</p><p>总之，<strong>互联网可以由多种异构网络互连组成</strong>。</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191223001/1576849704640.png" alt="从网络层看 IP 数据报的传送"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="计算机网络" scheme="http://ltyeamin.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>跟着彤哥学网络-网络层之IPv4</title>
    <link href="http://ltyeamin.github.io/2019/12/22/%E8%B7%9F%E7%9D%80%E5%BD%A4%E5%93%A5%E5%AD%A6%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82%E4%B9%8BIPv4/"/>
    <id>http://ltyeamin.github.io/2019/12/22/跟着彤哥学网络-网络层之IPv4/</id>
    <published>2019-12-22T03:58:23.000Z</published>
    <updated>2020-01-08T12:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="1-IPv4组成与分类"><a href="#1-IPv4组成与分类" class="headerlink" title="1 IPv4组成与分类"></a>1 IPv4组成与分类</h1><h2 id="1-1-IPv4组成"><a href="#1-1-IPv4组成" class="headerlink" title="1.1 IPv4组成"></a>1.1 IPv4组成</h2><p>我们把整个互联网看成为一个单一的、抽象的网络。IP 地址就是给每个连接在互联网上的主机（或路由器）分配一个在全世界范围是<strong>唯一的32位</strong>的标识符。</p><p>IP 地址现在由互联网名字和数字分配机构ICANN (Internet Corporation for Assigned Names and Numbers)进行分配，我国用户可向亚太网络信息中心APNIC(Asia Pacific Network Information Center)缴费申请IP地址。</p><p>在国内实际上都是ISP网络运营商统一申请，最终分配到企业以及家庭个人用户。以前在IP地址不稀缺的情况下，个人有可能分配到公网的IP地址，现在几乎不可能了，IP地址资源有限，不可能每台主机都分配一个公网IP。</p><p>有关IP最重要的协议文档就是互联网的正式标准<a href="https://datatracker.ietf.org/doc/rfc791/" target="_blank" rel="noopener">RFC 791</a>。</p><h2 id="1-2-IPv4现状"><a href="#1-2-IPv4现状" class="headerlink" title="1.2 IPv4现状"></a>1.2 IPv4现状</h2><p>我们常常说的IP，其实就是IPv4，即IP的第四个版本，该版本地址空间有限，到某个阶段IP地址将会耗尽。</p><p>该过程自80年代以来就已预见到，顶级地址实际上已经在2012年耗尽。那时，所有IPv4地址空间已分配给五大区域互联网注册机构，非洲网络信息中心 (AFRINIC)针对非洲，北美网络信息中心（ARIN）针对南极洲、加拿大、部分加勒比海地区和美国，亚太互联网络信息中心（APNIC）针对东亚、大洋洲、南亚和东南亚，拉丁美洲网络信息中心（LACNIC）针对加勒比海的大部分地区和整个拉丁美洲，以及欧洲网络信息中心（RIPE NCC）针对欧洲、中亚、俄罗斯和西亚。</p><p>那些区域性Internet注册很快就开始耗尽。2011年4月15日，亚太互联网络信息中心（APNIC）在2012年9月14日为欧洲，欧洲网络信息中心（RIPE NCC）分配了最后一个IPv4区块，在2014年6月10日为拉丁美洲和加勒比海（LACNIC）分配了最后一个IPv4区块。2015年9月24日为北美分配IPv4区块，直到今天，欧洲RIPE NCC终于耗尽了存储。</p><p>该消息是在2019年11月25号在一封电子邮件（由Nikolas Pediaditis发布）中宣布的，内容为：</p><p><img src="https://img.ithome.com/newsuploadfiles/2019/11/20191126_070327_863.jpg" alt="IPv4耗尽"></p><p>大概译文如下：</p><blockquote><p>亲爱的同事们，</p><p>今天，在2019年11月25日UTC + 1 15:35，我们从可用池中的最后剩余地址进行了最终的/22 IPv4分配。现在，我们已经用完了IPv4地址。</p><p>对于网络运营商来说，我们的宣布并不令人惊讶– RIPE社区早就预料到并计划IPv4耗尽。实际上，正是由于社区对这些资源的负责任管理，我们才能够在2012年达到最后一个/8后，向我们服务区域内的数千个新网络提供/22分配。</p></blockquote><p>从理论上讲，IPv4地址耗尽应该意味着不能将任何新的IPv4设备添加到Internet，但是实际上，许多因素会进行缓解。<br>首先是ISP可以重用和回收未使用的IPv4地址。第二个原因是由于NAT（网络地址转换），因此可以在ISP路由器后面私下使用相同的IP地址。当然，最后是向IPv6的过渡，现在应该建立良好的秩序，从而可以通过具有3.4×10^38巨大地址空间的Internet直接进行对等连接。</p><h2 id="1-3-IPv4地址编址方法"><a href="#1-3-IPv4地址编址方法" class="headerlink" title="1.3 IPv4地址编址方法"></a>1.3 IPv4地址编址方法</h2><ul><li><strong>分类的IP地址</strong>。这是最基本的编址方法，在1981年就通过了相应的标准协议。</li><li><strong>子网的划分</strong>。这是对最基本的编址方法的改进，其标准[<a href="https://datatracker.ietf.org/doc/rfc950/" target="_blank" rel="noopener">RFC 950</a>]在1985年通过。</li><li><strong>构成超网</strong>。这是比较新的无分类编址方法。1993年提出后很快就得到推广应用。<h2 id="1-4-IPv4基本分类"><a href="#1-4-IPv4基本分类" class="headerlink" title="1.4 IPv4基本分类"></a>1.4 IPv4基本分类</h2><strong>IP地址(32位) =  网络号 + 主机号 </strong></li></ul><p>每一类地址都由两个固定长度的字段组成，其中一个字段是网络号 net-id，它标志主机（或路由器）所连接到的网络，而另一个字段则是主机号 host-id，它标志该主机（或路由器）。</p><p>主机号在它前面的网络号所指明的网络范围内必须是唯一的。由此可见，一个 IP 地址在整个互联网范围内是唯一的。</p><p>IP地址分5类。A、B、C是常用的地址。IP地址的编码规定全0表示是本地地址，即本地网络或本地主机。全1表示广播地址，任何网站都能接收。所以，除去全0和全1地址外，A类有126个网络地址，1600万个主机地址；B类有16382个网络地址，64000个主机地址；C类有200万个网络地址，254个主机地址。<br><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191222001/image-20191231151754492.png" alt="image-20191231151754492"><br><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191222001/image-20191231155000727.png" alt="image-20191231155000727"></p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191222001/image-20191231160055476.png" alt="image-20191231160055476"></p><p>IP地址的范围指派：</p><table><thead><tr><th style="text-align:center"><strong>网络类别</strong></th><th style="text-align:center"><strong>最大可指派的网络数</strong></th><th style="text-align:center"><strong>第一个可指派的网络号</strong></th><th><strong>最后一个可指派的网络号</strong></th><th style="text-align:center"><strong>每个网络中最大主机数</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>A</strong></td><td style="text-align:center"><strong>126 (2^7– 2)</strong></td><td style="text-align:center"><strong>1</strong></td><td><strong>126</strong></td><td style="text-align:center"><strong>16777214</strong></td></tr><tr><td style="text-align:center"><strong>B</strong></td><td style="text-align:center"><strong>16383 (2^14 – 1)</strong></td><td style="text-align:center"><strong>128.1</strong></td><td><strong>191.255</strong></td><td style="text-align:center"><strong>65534</strong></td></tr><tr><td style="text-align:center"><strong>C</strong></td><td style="text-align:center"><strong>2097151 (2^21– 1)</strong></td><td style="text-align:center"><strong>192.0.1</strong></td><td><strong>223.255.255</strong></td><td style="text-align:center"><strong>254</strong></td></tr></tbody></table><p>一般不使用的特殊的IP地址：</p><table><thead><tr><th><strong>网络号</strong></th><th><strong>主机号</strong></th><th><strong>源地址使用</strong></th><th><strong>目的地址使用</strong></th><th><strong>代表的意思</strong></th></tr></thead><tbody><tr><td><strong>0</strong></td><td><strong>0</strong></td><td><strong>可以</strong></td><td><strong>不可</strong></td><td><strong>在本网络上的本主机</strong></td></tr><tr><td><strong>0</strong></td><td><strong>host-id</strong></td><td><strong>可以</strong></td><td><strong>不可</strong></td><td><strong>在本网络上的某台主机host-id</strong></td></tr><tr><td><strong>全</strong> <strong>1</strong></td><td><strong>全</strong> <strong>1</strong></td><td><strong>不可</strong></td><td><strong>可以</strong></td><td><strong>只在本网络上进行广播（各路由器均不转发）</strong></td></tr><tr><td><strong>net-id</strong></td><td><strong>全</strong> <strong>1</strong></td><td><strong>不可</strong></td><td><strong>可以</strong></td><td><strong>对net-id上的所有主机进行广播</strong></td></tr><tr><td><strong>127</strong></td><td><strong>非全 0或全1的任何数</strong></td><td><strong>可以</strong></td><td><strong>可以</strong></td><td><strong>用于本地软件环回测试</strong></td></tr></tbody></table><p>例如常见的特殊IP：</p><ul><li>127.0.0.1，本地回环地址，其实只要是127开始的任意地址，你在本地计算机都可以ping通。如果ping不通说明你的物理层网卡有问题，如果物理层没问题，那么TCP/IP协议栈有问题。</li><li>169.254.0.0 ，Windows主机特殊的地址，当Windows主机找不到DHCP服务器的时候，会默认分配169.254.X.X的IP地址。</li><li>10.0.0.0，保留的A类私网地址，一般用于政府、企业、学校网络。我大学校园网都是一个10.x.x.x的A类网络。</li><li>172.16.0.0 - 172.31.0.0  ，保留的C类私网地址</li><li>192.168.0.0 - 192.168.255.0，保留的C类私网地址<h2 id="1-5-IP-地址的一些重要特点"><a href="#1-5-IP-地址的一些重要特点" class="headerlink" title="1.5 IP 地址的一些重要特点"></a>1.5 IP 地址的一些重要特点</h2></li></ul><ol><li>IP 地址是一种分等级的地址结构。分两个等级的好处是：<br>第一，IP 地址管理机构在分配 IP 地址时只分配网络号，而剩下的主机号则由得到该网络号的单位自行分配。这样就方便了 IP 地址的管理。<br>第二，路由器仅根据目的主机所连接的网络号来转发分组（而不考虑目的主机号），这样就可以使路由表中的项目数大幅度减少，从而减小了路由表所占的存储空间。</li><li>实际上 IP 地址是标志一个主机（或路由器）和一条链路的接口。<br>当一个主机同时连接到两个网络上时，该主机就必须同时具有两个相应的 IP 地址，其网络号 net-id 必须是不同的。这种主机称为多归属主机 (multihomed host)。<br>由于一个路由器至少应当连接到两个网络（这样它才能将 IP 数据报从一个网络转发到另一个网络），因此一个路由器至少应当有两个不同的 IP 地址。 </li><li>用转发器或网桥连接起来的若干个局域网仍为一个网络，因此这些局域网都具有同样的网络号net-id。</li><li>所有分配到网络号 net-id 的网络，无论是范围很小的局域网，还是可能覆盖很大地理范围的广域网，都是平等的。<h1 id="2-子网划分和构造超网"><a href="#2-子网划分和构造超网" class="headerlink" title="2. 子网划分和构造超网"></a>2. 子网划分和构造超网</h1></li></ol><h2 id="2-1-划分子网"><a href="#2-1-划分子网" class="headerlink" title="2.1 划分子网"></a>2.1 划分子网</h2><h3 id="2-1-1-从两级-IP-到三级-IP"><a href="#2-1-1-从两级-IP-到三级-IP" class="headerlink" title="2.1.1 从两级 IP 到三级 IP"></a>2.1.1 从两级 IP 到三级 IP</h3><p>在 ARPANET 的早期，IP 地址的设计确实不够合理：<br>(1) IP 地址空间的利用率有时很低。<br>(2) 给每一个物理网络分配一个网络号会使路由表变得太大因而使网络性能变坏。<br>(3) 两级的 IP 地址不够灵活。</p><h3 id="2-1-2-三级IP"><a href="#2-1-2-三级IP" class="headerlink" title="2.1.2 三级IP"></a>2.1.2 三级IP</h3><p>从 1985 年起在 IP 地址中又增加了一个“子网号字段”，使两级的 IP 地址变成为三级的 IP 地址。<br>这种做法叫做划分子网 (subnetting) 。<br>划分子网已成为互联网的正式标准协议。 </p><p>(1) 划分子网纯属一个单位内部的事情。单位对外仍然表现为没有划分子网的网络。<br>(2) 从主机号借用若干个位作为子网号 subnet-id，而主机号 host-id 也就相应减少了若干个位。</p><p><strong>IP地址=网络号+(子网号+主机号)</strong></p><p>凡是从其他网络发送给本单位某个主机的IP数据报，仍然是根据IP数据报的目的网络号 net-id，先找到连接在本单位网络上的路由器。<br>然后此路由器在收到 IP 数据报后，再按目的网络号 net-id 和子网号 subnet-id 找到目的子网。<br>最后就将 IP 数据报直接交付目的主机。</p><p>假设以下为一个未划分子网的B类网络145.13.0.0，网络号是145.13，后面两位是主机号，即凡是地址为145.13.x.x的数据报文都被送到这个网络上的路由器R1。</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191222001/image-20200103105603931.png" alt="image-20200103105603931"></p><p>若子网号占8位，将上述的网络划分为三个子网后，主机号就只有8位，所以划分的三个子网是145.13.3.0、145.13.7.0、145.13.21.0，在划分子网后，整个网络对外部仍然表现为一个网络，其网络地址仍为145.13.0.0。但是网络145.13.0.0上的路由器R1在收到外来的数据后，再根据数据报的目的地址把它转发到相应的子网。<br><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191222001/image-20200103110217937.png" alt="image-20200103110217937"><br>划分子网后的优点：</p><ul><li>减少了 IP 地址的浪费</li><li>使网络的组织更加灵活</li><li>更便于维护和管理</li></ul><h2 id="2-2-子网掩码"><a href="#2-2-子网掩码" class="headerlink" title="2.2 子网掩码"></a>2.2 子网掩码</h2><p>我们来思考一个问题：假设有一个数据报,其目的地址是145.13.3.10已到达了路由器R1。那么这个路由器如何把它转发到子网145.13.3.0呢？</p><p>从一个 IP 数据报的首部并无法判断源主机或目的主机所连接的网络是否进行了子网划分。使用子网掩码 (subnet mask) 可以找出 IP 地址中的子网部分。<br>规则：</p><ul><li>子网掩码长度 ＝ 32 位</li><li>子网掩码左边部分的一连串 1，对应于网络号和子网号</li><li>子网掩码右边部分的一连串 0，对应于主机号 </li><li>(IP 地址) 与运算 (子网掩码) = 子网的网络地址</li></ul><p>使用子网掩码的好处:</p><p>不管网络有没有划分子网，只要把子网掩码和IP地址进行与运算，就立即得出网络地址。</p><p>145.13.0.0是一个普通的B类网络，其子网掩码为16个连续1+16个连续0，数据报进入到这个网络后到路由器层，就可以知道有许多子网，此时可以计算此时的网络地址为：145.13.x.0，其x表示不同的子网号</p><h3 id="2-2-1-默认的子网掩码"><a href="#2-2-1-默认的子网掩码" class="headerlink" title="2.2.1 默认的子网掩码"></a>2.2.1 默认的子网掩码</h3><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191222001/image-20200103161009075.png" alt="image-20200103161009075"></p><p>子网掩码是一个网络或一个子网的重要属性。<br>路由器在和相邻路由器交换路由信息时，必须把自己所在网络（或子网）的子网掩码告诉相邻路由器。<br>路由器的路由表中的每一个项目，除了要给出目的网络地址外，还必须同时给出该网络的子网掩码。<br>若一个路由器连接在两个子网上，就拥有两个网络地址和两个子网掩码。</p><h3 id="2-2-2-子网划分方法"><a href="#2-2-2-子网划分方法" class="headerlink" title="2.2.2 子网划分方法"></a>2.2.2 子网划分方法</h3><ul><li>有固定长度子网和变长子网两种子网划分方法。</li><li>在采用固定长度子网时，所划分的所有子网的子网掩码都是相同的。</li><li>虽然根据已成为互联网标准协议的 RFC 950 文档，子网号不能为全 1 或全 0，但随着无分类域间路由选择 CIDR 的广泛使用，现在全 1 和全 0 的子网号也可以使用了，但一定要谨慎使用，确认你的路由器所用的路由选择软件是否支持全 0 或全 1 的子网号这种较新的用法。</li><li>划分子网增加了灵活性，但却减少了能够连接在网络上的主机总数。</li></ul><h3 id="2-2-3-B类地址的子网划分选择（使用固定长度子网）"><a href="#2-2-3-B类地址的子网划分选择（使用固定长度子网）" class="headerlink" title="2.2.3 B类地址的子网划分选择（使用固定长度子网）"></a>2.2.3 B类地址的子网划分选择（使用固定长度子网）</h3><table><thead><tr><th style="text-align:center"><strong>子网号的位数</strong></th><th style="text-align:center"><strong>子网掩码</strong></th><th style="text-align:center"><strong>子网数</strong></th><th style="text-align:center"><strong>每个子网的主机数</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>2</strong></td><td style="text-align:center"><strong>255.255.192.0</strong></td><td style="text-align:center"><strong>2</strong></td><td style="text-align:center"><strong>16382</strong></td></tr><tr><td style="text-align:center"><strong>3</strong></td><td style="text-align:center"><strong>255.255.224.0</strong></td><td style="text-align:center"><strong>6</strong></td><td style="text-align:center"><strong>8190</strong></td></tr><tr><td style="text-align:center"><strong>4</strong></td><td style="text-align:center"><strong>255.255.240.0</strong></td><td style="text-align:center"><strong>14</strong></td><td style="text-align:center"><strong>4094</strong></td></tr><tr><td style="text-align:center"><strong>5</strong></td><td style="text-align:center"><strong>255.255.248.0</strong></td><td style="text-align:center"><strong>30</strong></td><td style="text-align:center"><strong>2046</strong></td></tr><tr><td style="text-align:center"><strong>6</strong></td><td style="text-align:center"><strong>255.255.252.0</strong></td><td style="text-align:center"><strong>62</strong></td><td style="text-align:center"><strong>1022</strong></td></tr><tr><td style="text-align:center"><strong>7</strong></td><td style="text-align:center"><strong>255.255.254.0</strong></td><td style="text-align:center"><strong>126</strong></td><td style="text-align:center"><strong>510</strong></td></tr><tr><td style="text-align:center"><strong>8</strong></td><td style="text-align:center"><strong>255.255.255.0</strong></td><td style="text-align:center"><strong>254</strong></td><td style="text-align:center"><strong>254</strong></td></tr><tr><td style="text-align:center"><strong>9</strong></td><td style="text-align:center"><strong>255.255.255.128</strong></td><td style="text-align:center"><strong>510</strong></td><td style="text-align:center"><strong>126</strong></td></tr><tr><td style="text-align:center"><strong>10</strong></td><td style="text-align:center"><strong>255.255.255.192</strong></td><td style="text-align:center"><strong>1022</strong></td><td style="text-align:center"><strong>62</strong></td></tr><tr><td style="text-align:center"><strong>11</strong></td><td style="text-align:center"><strong>255.255.255.224</strong></td><td style="text-align:center"><strong>2046</strong></td><td style="text-align:center"><strong>30</strong></td></tr><tr><td style="text-align:center"><strong>12</strong></td><td style="text-align:center"><strong>255.255.255.240</strong></td><td style="text-align:center"><strong>4094</strong></td><td style="text-align:center"><strong>14</strong></td></tr><tr><td style="text-align:center"><strong>13</strong></td><td style="text-align:center"><strong>255.255.255.248</strong></td><td style="text-align:center"><strong>8190</strong></td><td style="text-align:center"><strong>6</strong></td></tr><tr><td style="text-align:center"><strong>14</strong></td><td style="text-align:center"><strong>255.255.255.252</strong></td><td style="text-align:center"><strong>16382</strong></td><td style="text-align:center"><strong>2</strong></td></tr></tbody></table><p>注意：表中的“子网号的位数”中没有 0, 1, 15 和 16 这四种情况，因为这没有意义。</p><p>其实可以总结为：<strong>子网数=2^子网号的位数-2</strong>，主机部分全0和全1的不能用</p><p><strong>已知 IP 地址是 141.14.72.24，子网掩码是 255.255.192.0。试求网络地址？</strong></p><p>划分步骤：</p><ol><li>点分十进制表示的IP地址，将十进制的IP段用二进制表示；</li><li>将子网掩码也用二进制表示；</li><li>两者进行与运算得出网络地址为141.14.64.0</li></ol><p><strong>若子网掩码改为 255.255.224.0，试求网络地址，讨论所得结果？</strong> </p><p>按照上述步骤，其实算下来的网络地址还是141.14.64.0。</p><p>由此可见：<strong>不同的子网掩码得出相同的网络地址。但不同的掩码的效果是不同的。</strong></p><h2 id="2-3-各类IP子网划分示例"><a href="#2-3-各类IP子网划分示例" class="headerlink" title="2.3 各类IP子网划分示例"></a>2.3 各类IP子网划分示例</h2><h3 id="2-3-1-等分子网划分"><a href="#2-3-1-等分子网划分" class="headerlink" title="2.3.1  等分子网划分"></a>2.3.1  等分子网划分</h3><p><strong>背景：</strong></p><p>   某公司有两个部门，每个部门各有100台主机，并且都在使用192.168.0.0C类网络，该网络子网掩码是255.255.255.0，连接局域网的路由器接口可配置的第一个可用IP地址是192.168.0.1</p><p><strong>需求：</strong></p><p>现在公司提出等分成两个子网将不同部门的网络隔离出来，即将一个C类地址等分为两个网段。两个网络之间通过路由器进行网络转发，目的是为了局域网安全(比如技术部门的主机不能够查看财务部门的共享资料)。</p><p><strong>划分步骤：</strong></p><ol><li>主机位往往后移动1位</li><li>此时A子网的IP段就是192.168.0.0(子网位) 1111111(主机位)，B子网的IP段就是192.168.0.1(子网位) 0000000(主机位)</li><li>最终得出子网掩码为255.255.255.128</li><li>A子网主机部分是全0或全1的IP地址不能用，即192.168.0.0(没有意义，只代表网络号)和192.168.0.127(广播地址)，所以A的有效地址为192.168.0.1 - 192.168.0.126</li><li>B子网主机部分是全0或全1的IP地址不能用，即192.168.0.128(没有意义，只代表网络号)和192.168.0.255(广播地址)，所以A的有效地址为192.168.0.129 - 192.168.0.254</li></ol><p><strong>总结</strong>：</p><p><strong>子网掩码往后移N位，则每个子网是原来的1/2^N。</strong></p><p><strong>子网划分的个数只能是偶数，不能是奇数</strong></p><h3 id="2-3-2-变长子网划分"><a href="#2-3-2-变长子网划分" class="headerlink" title="2.3.2 变长子网划分"></a>2.3.2 变长子网划分</h3><p><strong>需求：</strong></p><p>判断192.168.0.101/26所属的子网</p><p><strong>分析思路:</strong></p><ol><li>192.168.0.101/24子网掩码为255.255.255.0，那么192.168.0.101/26其实就是子网掩码往后移两位</li><li>整个网络被分为了4部分，主机位归0，子网掩码为255.255.255.64</li><li>那么最终101所在的子网有效地址为192.168.0.1-192.168.0.63</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="计算机网络" scheme="http://ltyeamin.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>跟着彤哥学网络-初识网络</title>
    <link href="http://ltyeamin.github.io/2019/12/21/%E8%B7%9F%E7%9D%80%E5%BD%A4%E5%93%A5%E5%AD%A6%E7%BD%91%E7%BB%9C-%E5%88%9D%E8%AF%86%E7%BD%91%E7%BB%9C/"/>
    <id>http://ltyeamin.github.io/2019/12/21/跟着彤哥学网络-初识网络/</id>
    <published>2019-12-21T02:19:23.000Z</published>
    <updated>2020-01-08T12:59:51.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="1-1-为什么要学网络"><a href="#1-1-为什么要学网络" class="headerlink" title="1.1 为什么要学网络"></a>1.1 为什么要学网络</h1><ol><li>身为计算机专业以及IT从业者，基础性东西必须要懂，不然都不好意思在这行混。</li><li>熟悉网络原理，可以解决日常家用级或企业级的网络故障问题，不然就花钱请人解决网络故障吧。</li><li>可以考华为或思科网络认证，为自己再谋一份出路，不然就等35岁行业危机吧。</li><li>作为新时代的你，多学点知识，多充实自己，少浪费点时间，不然你和咸鱼没什么区别。</li><li>IPv4今年已走到尽头，IPv6全面化建设，观察前沿技术，紧跟时代步伐。<h1 id="1-2-传统的网络分类"><a href="#1-2-传统的网络分类" class="headerlink" title="1.2 传统的网络分类"></a>1.2 传统的网络分类</h1></li></ol><ul><li>电信网络：向用户提供电话、电报及传真等服务。如我国的三大电信网络运营商（中国电信、中国联通、中国联通）。</li><li>有线电视网络： 以前广电局为家庭提供的有线电视节目。</li><li>计算机网络： 计算机之间传送数据、信息共享。<br>随着时代的快速前进和技术的迅猛发展，电信网络和有线电视网络都逐渐融入了现代计算机网络的技术，扩大原有的服务范围，而计算机网络也可以向用户提供电话通信、视频通信以及传送视频节目等其他服务。这也就是我们以前经常说的”三网融合”。<h1 id="1-3-计算机网络定义"><a href="#1-3-计算机网络定义" class="headerlink" title="1.3 计算机网络定义"></a>1.3 计算机网络定义</h1></li></ul><h2 id="1-3-1-百度百科定义"><a href="#1-3-1-百度百科定义" class="headerlink" title="1.3.1 百度百科定义"></a>1.3.1 百度百科定义</h2><p> 计算机网络是指将<a href="https://baike.baidu.com/item/地理" target="_blank" rel="noopener">地理</a>位置不同的具有独立功能的多台<a href="https://baike.baidu.com/item/计算机/140338" target="_blank" rel="noopener">计算机</a>及其外部设备，通过通信线路连接起来，在<a href="https://baike.baidu.com/item/网络操作系统/3997" target="_blank" rel="noopener">网络操作系统</a>，<a href="https://baike.baidu.com/item/网络管理软件/6579078" target="_blank" rel="noopener">网络管理软件</a>及<a href="https://baike.baidu.com/item/网络通信协议/4438611" target="_blank" rel="noopener">网络通信协议</a>的管理和协调下，实现<a href="https://baike.baidu.com/item/资源共享/233480" target="_blank" rel="noopener">资源共享</a>和信息传递的计算机系统</p><h2 id="1-3-2-通用定义"><a href="#1-3-2-通用定义" class="headerlink" title="1.3.2 通用定义"></a>1.3.2 通用定义</h2><p>计算机网络(简称为网络)由若干结点和连接这些结点的链路组成。网络的中心结点可以是计算机、集线器、交换机或路由器等。</p><h2 id="1-3-3-较好的定义"><a href="#1-3-3-较好的定义" class="headerlink" title="1.3.3 较好的定义"></a>1.3.3 较好的定义</h2><p>计算机网络主要是由一些通用的、可编程的硬件互连而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。这些可编程的硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用。<br>以上的定义可用下图来描述：<br><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191221001/net-photo.png" alt="网络图"></p><h1 id="1-4-互联网"><a href="#1-4-互联网" class="headerlink" title="1.4 互联网"></a>1.4 互联网</h1><p>20世纪90年代以后，Internet代表计算机网络迅速发展，最早美国人仅供用于免费的教育科研网络。而后来发展为供全球使用最大的和最重要的商业网络。<br>计算机和网络已经成为当今信息时代的核心，已经成为信息社会的命脉和发展知识经济的重要基础。</p><h2 id="1-4-1-相关概念"><a href="#1-4-1-相关概念" class="headerlink" title="1.4.1 相关概念"></a>1.4.1 相关概念</h2><p>1).因特网： Internet，中文译名因特网，全国科学技术名词审定委员会推荐，这个译名较为准确，但长期未得到推     广，现在大家都是说是互联网。<br>2). 互联网： Internet，专用名词，中文译名互联网，目前最流行最广的、事实上的标准译名。Internet是由数量极大的各种计算机网络互连起来的。采用互联网这个译名能够体现出互联网的特征。它采用 TCP/IP 协议族作为通信规则，是一个覆盖全球、实现全球范围内连通性和资源共享的计算机网络。<br>3). 互连网：internet，首字母小写，通用名词，对于仅在局部范围互连起来的计算机网络，把许多网络通过路由器连接在一起叫互联网。注意，网络互连不仅仅是简单地在物理上连接起来，必须在计算机安装许多适当的软件才可以交换信息。<br>4). 主机： 与网络相连的计算机称为主机。<br><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191221001/qubie.png" alt="互联网与互连网区别"><br>任意把几个计算机网络互连起来（不管采用什么协议），并能够相互通信，这样构成的是一个互连网 (internet)，而不是互联网 (Internet)。</p><h2 id="1-4-2-互联网基础发展的三个阶段"><a href="#1-4-2-互联网基础发展的三个阶段" class="headerlink" title="1.4.2 互联网基础发展的三个阶段"></a>1.4.2 互联网基础发展的三个阶段</h2><ul><li>第一阶段<br>从单个网络ARPANET向互联网发展的过程。<br>起源于1969年美国国防部创建的第一个分组交换网，ARPANET最初只是一个单个的分组交换网(并不是互连的网络)。<br>20世纪70年代中期,ARPANET网满足不了所有的通信，所以研究了多种网络(如分组无线电网络)互连技术，这就成为了我们现在互联网的雏形。<br><strong>1983</strong>年TCP/IP协议成为ARPANET上的标准协议。使得所有使用TCP/IP协议的计算机都能够利用互联网通信。因而可以说是<strong>1983</strong>年互联网的诞生时间。<br>1990年ARPANET正式宣布关闭，因为它的实验任务已经完成。</li><li>第二阶段<br>建成了三级结构的互联网。<br>从1985年起，美国国家科学基金会NSF围绕六个大型计算机中心建设网络，即国家科学基金网NSFNET。它是一个三级计算机网络，分为<strong>主干网</strong>、<strong>地区网</strong>和<strong>校园网</strong>（或企业网）。<br>1992年互联网上的主机超过100万台。<br>1993年互联网主干网的速率提高到45Mbit/s(T3速率)。</li><li>第三阶段<br>逐渐形成了多层次 ISP 结构的互联网。<br>出现了互联网服务提供者 ISP (Internet Service Provider)。比如我国有名的ISP运营商-中国电信、中国移动、中国联通。<br>任何机构和个人只要向某个 ISP 交纳规定的费用，就可从该 ISP 获取所需 IP 地址的使用权，并可通过该 ISP 接入到互联网。<br>根据提供服务的覆盖面积大小以及所拥有的IP地址数目的不同，ISP 也分成为不同层次的 ISP：主干 ISP、地区 ISP和本地 ISP。<br>到 2016 年 3 月，全球已经有 226 个 IXP（互联网交换点，InternetXchange Ponit，主要作用是允许两个网络直接相连并交换分组，而不需要再通过第三个网络来转发分组），分布在 172 个国家和地区。但互联网的发展在全世界还很不平衡。<h2 id="1-4-3-中国互联网发展历程"><a href="#1-4-3-中国互联网发展历程" class="headerlink" title="1.4.3 中国互联网发展历程"></a>1.4.3 中国互联网发展历程</h2></li><li>1980 年，铁道部开始进行计算机联网实验。</li><li>1986年8月25日，<a href="https://baike.baidu.com/item/瑞士" target="_blank" rel="noopener">瑞士</a>日内瓦时间4点11分，北京时间11点11分，由当时任高能物理所ALEPH组（ALEPH是在西欧核子中心高能电子对撞机<a href="https://baike.baidu.com/item/LEP" target="_blank" rel="noopener">LEP</a>上进行高能物理实验的一个国际合作组，我国科学家参加了<a href="https://baike.baidu.com/item/ALEPH" target="_blank" rel="noopener">ALEPH</a>组，高能物理所是该国际合作组的成员单位。）组长的<a href="https://baike.baidu.com/item/吴为民" target="_blank" rel="noopener">吴为民</a>，从北京发给ALEPH的领导——位于瑞士日内瓦西欧核子中心的<a href="https://baike.baidu.com/item/诺贝尔奖" target="_blank" rel="noopener">诺贝尔奖</a>获得者斯坦伯格（Jack Steinberger）的电子邮件（E-mail）是中国第一封国际电子邮件。 [1] </li><li>1989年8月，中国科学院承担了国家计委立项的“中关村教育与科研示范网络”（<a href="https://baike.baidu.com/item/NCFC/7713689" target="_blank" rel="noopener">NCFC</a>）——中国科技网（CSTNET）前身的建设</li><li>1989年， 中国开始建设互联网,5年目标 ,国家级四大骨干网络联网,11月我国第一个公用分组交换网 CNPAC 建成运行。 </li><li>1991年， 在中美高能物理年会上，美方提出把中国纳入互联网络的合作计划</li><li><strong>1994年4月20日</strong>，“NCFC工程”通过美国Sprint公司连入Internet的64Kbit/s国际专线开通，实现了与Internet的全功能连接，中国从此被国际上正式承认为真正拥有全功能Internet的国家，实现了中国与Internet全功能网络连接，标志着我国最早的国际互联网络的诞生。<a href="https://baike.baidu.com/item/中国科技网" target="_blank" rel="noopener">中国科技网</a>成为中国最早的国际互联网络</li><li>1994年， 中国第一个全国性 TCP/IP 互联网—CERNET示范网 工程 建成,并于同年先后建成</li><li>1994年， 中国教育与科研计算机网 中国科学技术网<a href="https://baike.baidu.com/item/中国金桥信息网" target="_blank" rel="noopener">中国金桥信息网</a>中国公用计算机互联网</li><li>中国科学院高能物理研究所设立了我国的第一个万维网服务器。</li><li>1994 年5月，中国科学院高能物理研究所设立了我国的第一个万维网服务器。</li><li>1994年9月，中国公用计算机互联网 CHINANET 正式启动。</li><li>1995年，<a href="https://baike.baidu.com/item/张树新" target="_blank" rel="noopener">张树新</a>创立首家互联网服务供应商–<a href="https://baike.baidu.com/item/瀛海威" target="_blank" rel="noopener">瀛海威</a>–老百姓进入互联网</li><li>1998年，CERNET 研究者在中国首次搭建IPV6试验床</li><li>2000年， 中国三大门户网站搜狐、新浪、<a href="https://baike.baidu.com/item/网易" target="_blank" rel="noopener">网易</a>在美国纳斯达克挂牌上市</li><li>2001年，<a href="https://baike.baidu.com/item/下一代互联网" target="_blank" rel="noopener">下一代互联网</a>地区试验网在北京建成验收</li><li>2002年， 第二季度，搜狐率先宣布盈利，宣布互联网的春天已经来临</li><li>2003年， 下一代互联网示范工程CNGI 项目开始实施</li></ul><p>到目前为止，我国陆续建造了基于互联网技术的并能够和互联网互连的多个全国范围的公用计算机网络，其中规模最大的就是下面这五个：</p><p>  a. 中国电信互联网 CHINANET（也就是原来的中国公用计算机互联网）<br>  b. 中国联通互联网 UNINET<br>  c. 中国移动互联网 CMNET<br>  d. 中国教育和科研计算机网 CERNET,始建于1994年,是我国第一个IPv4互联网主干网。<br>  e. 中国科学技术网 CSTNET</p><p>互联网影响人物：</p><ul><li><p>1987年，任正非正式注册成立华为，华为较早是一家生产销售通信设备的民营通信科技公司，现是全球领先的信息与通信技术（ICT）解决方案供应商。</p></li><li><p>1996年，张朝阳创立了中国第一家以风险投资资金建立的互联网公司-爱特信公司，1998年爱特信公司推出搜狐产品，更名为搜狐(Sohu)公司。搜狐公司最主要的产品就是搜狐网站，是中国首家大型分类查询搜索引擎。1999年，搜狐网站增加新闻以及内容频道。</p></li><li><p>1997年，丁磊创立了网易公司(NetEase)，推出中国第一家中文全文搜索引擎。现在用的126和163邮箱都属于网易产品。网易现在是全国出名的综合门户网站。</p></li><li><p>1998年，王志东创立新浪网站。该网站成为全球最大的中文综合门户网站。新浪微博是全球使用最多的微博之一。</p></li><li><p>1998年马化腾、张志东创立了腾讯公司（Tencent），1999年腾讯推出即使通讯软件，QICQ，即我们常用的QQ。2011年推出微信(微信之父张小龙之作。其他还有Foxmail邮件客户端软件)</p></li><li><p>1999年马云创建阿里巴巴，03年创建淘宝网</p></li><li><p>2000年，李彦宏和徐勇创建百度网站，现在已经成为全球最大的中文搜索引擎。</p></li><li><p>2008年张旭豪创立饿了么，营在线外卖、新零售、即时配送和餐饮供应链等业务，致力于用科技打造本地生活服务平台</p></li><li><p>2010年王兴创立美团网成立，成为国内专业的团购网站。</p></li><li><p>2012年张一鸣创立字节跳动，代表产品今日头条、抖音、西瓜视频。</p></li><li><p>2012年，29岁的程维创办小桔科技，在北京中关村推出手机召车软件滴滴打车，2015年2月，滴滴打车与快的打车进行战略合并。 同年9月，滴滴打车正式更名为“滴滴出行”。2016年8月，滴滴出行收购Uber中国。滴滴出行是涵盖出租车、专车、<em>滴滴</em>快车、顺风车、代驾及大巴等多项业务在内的一站式出行平台</p></li><li><p>2014年，刘强东创立的京东集团在美国纳斯达克证券交易所正式挂牌上市。</p></li></ul><h2 id="1-4-4-互联网的标准化工作"><a href="#1-4-4-互联网的标准化工作" class="headerlink" title="1.4.4 互联网的标准化工作"></a>1.4.4 互联网的标准化工作</h2><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191221001/xiehui.png" alt="协会组织架构"><br>成为互联网正式标准要经过的阶段<br>所有互联网标准都以 RFC 的形式在互联网上发表。<br>之前的三个阶段：</p><ul><li>互联网草案 (Internet Draft) ——有效期只有六个月。在这个阶段还不是 RFC 文档。</li><li>建议标准 (Proposed Standard) ——从这个阶段开始就成为 RFC 文档。</li><li>互联网标准 (Internet Standard) ——达到正式标准后，每个标准就分配到一个编号 STD xxxx。 一个标准可以和多个 RFC 文档关联。<br>现在简化为两个阶段：建议标准，互联网标准。<h2 id="1-4-5-互联网特性"><a href="#1-4-5-互联网特性" class="headerlink" title="1.4.5 互联网特性"></a>1.4.5 互联网特性</h2></li></ul><p>1). 连通性<br>​      a. 互联网使上网用户之间，不管距离多远，都可以非常便捷、非常经济的交换各种信息(数据)。<br>​      b. 使上网用户之间都可以交换信息(数据，以及各种音频视频),好像这些用户的计算机都可以彼此直接连通一样。<br>​     c. 互联网具有虚拟的特点，无法准确知道对方是谁，也无法知道对方的位置。<br>2). 资源共享<br>​    a. 信息共享: 音频视频在线观看<br>​    b. 软件共享: 远程桌面、云桌面、云计算中的PaaS和SaaS<br>​    c. 硬件共享: 局域网共享一台打印机</p><h2 id="1-4-6-互联网组成"><a href="#1-4-6-互联网组成" class="headerlink" title="1.4.6 互联网组成"></a>1.4.6 互联网组成</h2><p>  从互联网的工作方式上看，可以划分为两大块边缘部分和核心部分。</p><h3 id="1-4-6-1-边缘部分"><a href="#1-4-6-1-边缘部分" class="headerlink" title="1.4.6.1 边缘部分"></a>1.4.6.1 边缘部分</h3><p>​     由所有连接在互联网上的主机组成。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享。<br>  我们经常说的主机A与主机B进行通信，实际上指的是主机A的某个进程和主机B的另一个进程进行通信。而这种网络边缘的端系统之间的通信方式通常可以划分为两类：客户机-服务器C/S方式(客户机是服务请求方，服务器是服务提供方)和对等P2P(即Peer-to-Peer 方式，不区分哪个是服务方哪个是客户请求方 )点对点通信方式(比如常见的迅雷、快播、BT下载应用软件)</p><h3 id="1-4-6-2-核心部分"><a href="#1-4-6-2-核心部分" class="headerlink" title="1.4.6.2 核心部分"></a>1.4.6.2 核心部分</h3><p>网络核心部分是互联网中最复杂的部分，由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。</p><h2 id="1-4-7-典型的交换技术"><a href="#1-4-7-典型的交换技术" class="headerlink" title="1.4.7 典型的交换技术"></a>1.4.7 典型的交换技术</h2><ul><li><p>电路交换:  电路交换必定是面向连接的。</p><p> 5部电话机两两直接相连,需10对电线。耗材，如果计算机数据用电路交换，单向通信，线路的传输速率很低。<br> N部电话机两两直接相连，需 N(N –1)/2对电线。这种直接连接方法所需要的电线对的数量与电话机数量的平方成正比。当电话机的数量多的时候，就要使用交换机来完成全网的连接。</p><p> 电路交换分为三个阶段：</p><p> 1). 建立连接：建立一条专用的物理通路，以保证双方通话时所需的通信资源在通信时不会被其他用户占用；<br> 2). 通信：主叫和被叫双方就能互相通电话；<br> 3). 释放连接：释放刚才使用的这条专用的物理通路（释放刚才占用的所有通信资源）。</p><p> 电路交换特点:</p><p> 1). 计算机数据具有突发性。<br> 2). 这导致在传送计算机数据时，通信线路的利用率很低(用来传送数据的时间往往不到10%甚至不到1% )。</p></li><li><p>分组交换: 采用存储转发技术，将报文划分为几个分组然后再传送，互联网的核心部分采用了分组交换技术。</p><p>分组交换特点:</p><p>1). 分组交换则采用存储转发技术。<br>2). 在发送端，先把较长的报文划分成较短的、固定长度的数据段。</p><p>分组交换的传输单元:</p><p>1). 每一个分组的首部都含有地址（诸如目的地址和源地址）等控制信息。<br>2). 分组交换网中的结点交换机根据收到的分组首部中的地址信息，把分组转发到下一个结点交换机。<br>3). 每个分组在互联网中独立地选择传输路径。<br>4). 用这样的存储转发方式，最后分组就能到达最终目的地。</p><p>| 优点 |                         所采用的手段                         |<br>| :–: | :———————————————————-: |<br>| 高效 |   在分组传输的过程中动态分配传输带宽，对通信链路是逐段占用   |<br>| 灵活 |            为每一个分组独立地选择最合适的转发路由            |<br>| 迅速 |  以分组作为传送单位，可以不先建立连接就能向其他主机发送分组  |<br>| 可靠 | 保证可靠的网络协议；分布式多路由的分组交换网，使网络有很好的生存性 |</p></li><li><p>报文交换</p><p> <img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191221001/baowen.png" alt=""></p></li></ul><p>路由器处理分组的过程是：<br>  1). 把收到的分组先放入缓存（暂时存储）；<br>  2). 查找转发表，找出到某个目的地址应从哪个端口转发；<br>  3). 把分组送到适当的端口转发出去。</p><p>三种交换方式的主要特点：</p><p>电路交换：整个报文的比特流连续的从源点直达终点。</p><p>报文交换：整个报文先传送到相邻结点，全部存储下来后查找转发表，转发到下一个结点。</p><p>分组交换： 单个分组（这只是报文的一部分）传送到相邻结点，存储下来后查找转发表，转发到下一个结点。</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191221001/jiaohuan.png" alt="三种交换方式"></p><p>从上图可看出，若要连续传送大量的数据，且其传送的时间远大于连接建立的时间，则电路交换的传输速率较快。报文交换和分组交换不需要预先分配传输带宽，在传送突发数据时可提高整个网络的信道利用率。由于一个分组交换的长度往往小于整个报文的长度，因此分组交换比报文交换的时延小，同时也具有更好的灵活性。</p><h1 id="1-5-计算机网络的类别"><a href="#1-5-计算机网络的类别" class="headerlink" title="1.5 计算机网络的类别"></a>1.5 计算机网络的类别</h1><h2 id="1-5-1-按照网络的作用范围进行分类"><a href="#1-5-1-按照网络的作用范围进行分类" class="headerlink" title="1.5.1 按照网络的作用范围进行分类"></a>1.5.1 按照网络的作用范围进行分类</h2><ul><li>广域网 WAN (Wide Area Network)：作用范围通常为几十到几千公里。</li><li>城域网 MAN (Metropolitan Area Network)：作用距离约为 5~50 公里。</li><li>局域网 LAN (Local Area Network) ：局限在较小的范围，比如如1公里左右。</li><li>个人区域网 PAN (Personal Area Network) ：范围很小，大约在10米左右。</li></ul><h2 id="1-5-2-按照网络的使用者进行分类"><a href="#1-5-2-按照网络的使用者进行分类" class="headerlink" title="1.5.2 按照网络的使用者进行分类"></a>1.5.2 按照网络的使用者进行分类</h2><ul><li>公用网 (public network) ：按规定交纳费用的人都可以使用的网络。因此也可称为公众网。</li><li>专用网 (private network) ：为特殊业务工作的需要而建造的网络。</li></ul><h2 id="1-5-3-用来把用户接入到互联网的网络"><a href="#1-5-3-用来把用户接入到互联网的网络" class="headerlink" title="1.5.3 用来把用户接入到互联网的网络"></a>1.5.3 用来把用户接入到互联网的网络</h2><ul><li>接入网AN (Access Network)，它又称为本地接入网或居民接入网。</li><li>接入网是一类比较特殊的计算机网络，用于将用户接入互联网。</li><li>接入网本身既不属于互联网的核心部分，也不属于互联网的边缘部分。</li><li>接入网是从某个用户端系统到互联网中的第一个路由器（也称为边缘路由器）之间的一种网络。</li><li>从覆盖的范围看，很多接入网还是属于局域网。</li><li>从作用上看，接入网只是起到让用户能够与互联网连接的“桥梁”作用。</li></ul><h1 id="1-6-计算机的网络性能"><a href="#1-6-计算机的网络性能" class="headerlink" title="1.6 计算机的网络性能"></a>1.6 计算机的网络性能</h1><h2 id="1-6-1-计算机网络性能指标"><a href="#1-6-1-计算机网络性能指标" class="headerlink" title="1.6.1 计算机网络性能指标"></a>1.6.1 计算机网络性能指标</h2><p>计算机网络的性能一般是指它的几个重要的性能指标，主要包括：</p><h3 id="1-6-1-1-速率"><a href="#1-6-1-1-速率" class="headerlink" title="1.6.1.1 速率"></a>1.6.1.1 速率</h3><ul><li>比特（bit）是计算机中数据量的单位，也是信息论中使用的信息量的单位。</li><li>比特（bit）来源于 binary digit，意思是一个“二进制数字”，因此一个比特就是二进制数字中的一个 1 或 0。</li><li>速率是计算机网络中最重要的一个性能指标，指的是数据的传送速率，它也称为数据率 (data rate) 或比特率 (bit rate)。</li><li>速率的单位是 bit/s，或 kbit/s、Mbit/s、 Gbit/s等。例如4 * 1010  bit/s 的数据率就记为 40 Gbit/s。</li><li>速率往往是指额定速率或标称速率，非实际运行速率。  </li></ul><h3 id="1-6-1-2-带宽"><a href="#1-6-1-2-带宽" class="headerlink" title="1.6.1.2 带宽"></a>1.6.1.2 带宽</h3><p>两种不同意义：</p><ul><li>“带宽”(bandwidth) 本来是指信号具有的频带宽度，其单位是赫（或千赫、兆赫、吉赫等）。</li><li>在计算机网络中，带宽用来表示网络中某通道传送数据的能力。表示在单位时间内网络中的某信道所能通过的“最高数据率”。单位是 bit/s，即 “比特每秒”。   </li></ul><p>我们经常说的百兆宽带，其实并不是每秒100MBit/s的宽带速率。实际的带宽没有这么大。</p><p>实际宽带速度的计算公式： 服务商承诺给你提供的带宽×1024÷8=你每秒钟实际可用的网络速度</p><p>比如我现在的网络带宽是百兆带宽，实际网速为：100 Mbps/s * 1024 / 8 =12800KB/s = 12.5MB/s ,当然实际不可能完全准确，基本是小于12.5MB/s。下图我是用电脑管家测试的网速：</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191221001/test.png" alt="实际网速"></p><p>Mbps、MB/s、Mb/s的区别:</p><p>Mbps表示兆比特</p><p>MB/s 的含义是兆字节每秒：是指每秒传输的字节数量，一个字节为8 bit。</p><p>Mb/s的含义是兆比特每秒：是指每秒传输的比特位数</p><h3 id="1-6-1-3-吞吐率"><a href="#1-6-1-3-吞吐率" class="headerlink" title="1.6.1.3 吞吐率"></a>1.6.1.3 吞吐率</h3><ul><li>吞吐量 (throughput) 表示在单位时间内通过某个网络（或信道、接口）的数据量。</li><li>吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。</li><li>吞吐量受网络的带宽或网络的额定速率的限制。</li></ul><h3 id="1-6-1-4-时延"><a href="#1-6-1-4-时延" class="headerlink" title="1.6.1.4 时延"></a>1.6.1.4 时延</h3><p>时延 (delay 或 latency) 是指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。<br>有时也称为延迟或迟延。</p><p>网络中的时延由以下几个不同的部分组成：<br>   1). 发送时延,也称为传输时延。发送时延=数据帧长度(bit) / 发送速率<br>     a. 发送数据时，数据帧从结点进入到传输媒体所需要的时间。<br>     b. 也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。<br>   2). 传播时延,传播时延=信道长度（米）/ 信号在信道上的传播速率（米/秒）<br>     a.电磁波在信道中需要传播一定的距离而花费的时间。<br>     b.发送时延与传播时延有本质上的不同。<br>     c.信号发送速率和信号在信道上的传播速率是完全不同的概念。<br>   3).处理时延<br>     主机或路由器在收到分组时，为处理分组（例如分析首部、提取数据、差错检验或查找路由）所花费的时间。<br>   4).排队时延<br>     分组在路由器输入输出队列中排队等待处理所经历的时延。排队时延的长短往往取决于网络中当时的通信量。</p><p>数据在网络中经历的总时延就是发送时延、传播时延、处理时延和排队时延之和。必须指出，在总时延中，究竟是哪一种时延占主导地位，必须具体分析。</p><p>容易产生的错误概念:</p><ul><li>对于高速网络链路，我们提高的仅仅是数据的发送速率而不是比特在链路上的传播速率。 </li><li>提高链路带宽减小了数据的发送时延。</li></ul><p>以下说法是错误的：<br>“在高速链路（或高带宽链路）上，比特会传送得更快些”</p><h3 id="1-6-1-5-时延带宽积"><a href="#1-6-1-5-时延带宽积" class="headerlink" title="1.6.1.5 时延带宽积"></a>1.6.1.5 时延带宽积</h3><p>链路的时延带宽积又称为以比特为单位的链路长度。时延带宽积 = 传播时延*带宽</p><h3 id="1-6-1-6-往返时间-RTT"><a href="#1-6-1-6-往返时间-RTT" class="headerlink" title="1.6.1.6 往返时间 RTT"></a>1.6.1.6 往返时间 RTT</h3><ul><li>互联网上的信息不仅仅单方向传输，而是双向交互的。因此，有时很需要知道双向交互一次所需的时间。</li><li>往返时间 RTT (round-trip time) 表示从发送方发送数据开始，到发送方收到来自接收方的确认，总共经历的时间。</li><li>在互联网中，往返时间还包括各中间结点的处理时延、排队时延以及转发数据时的发送时延。</li><li>当使用卫星通信时，往返时间 RTT 相对较长，是很重要的一个性能指标。</li></ul><h3 id="1-6-1-7-利用率"><a href="#1-6-1-7-利用率" class="headerlink" title="1.6.1.7 利用率"></a>1.6.1.7 利用率</h3><ul><li>分为信道利用率和网络利用率。</li><li>信道利用率指出某信道有百分之几的时间是被利用的（有数据通过）。</li><li>完全空闲的信道的利用率是零。</li><li>网络利用率则是全网络的信道利用率的加权平均值。</li><li>信道利用率并非越高越好。当某信道的利用率增大时，该信道引起的时延也就迅速增加。</li></ul><p>时延与网络利用率的关系</p><p>根据排队论的理论，当某信道的利用率增大时，该信道引起的时延也就迅速增加。<br>若令 D0 表示网络空闲时的时延，D 表示网络当前的时延，则在适当的假定条件下，可以用下面的简单公式表示 D 和 D0 之间的关系：D = D0 / 1 - U，其中U 是网络的利用率，数值在 0 到 1 之间。</p><p>当信道的利用率增大时，该信道引起的时延迅速增加。</p><h2 id="1-6-2-计算机网络的非性能特征"><a href="#1-6-2-计算机网络的非性能特征" class="headerlink" title="1.6.2  计算机网络的非性能特征"></a>1.6.2  计算机网络的非性能特征</h2><p>费用、质量、标准化、可靠性、可扩展性和可升级性 、易于管理和维护 。</p><h1 id="1-7-计算机网络的体系结构"><a href="#1-7-计算机网络的体系结构" class="headerlink" title="1.7 计算机网络的体系结构"></a>1.7 计算机网络的体系结构</h1><h2 id="1-7-1-计算机网络体系结构的形成"><a href="#1-7-1-计算机网络体系结构的形成" class="headerlink" title="1.7.1  计算机网络体系结构的形成"></a>1.7.1  计算机网络体系结构的形成</h2><ul><li><p>计算机网络是个非常复杂的系统。</p></li><li><p>相互通信的两个计算机系统必须高度协调工作才行，而这种“协调”是相当复杂的。 </p></li><li><p>“分层”可将庞大而复杂的问题，转化为若干较小的局部问题，而这些较小的局部问题就比较易于研究和处理。 </p></li><li><p>1974 年，美国的 IBM 公司宣布了系统网络体系结构SNA (System Network Architecture)。这个著名的网络标准就是按照分层的方法制定的。</p></li><li><p>不久后，其他一些公司也相继推出自己公司的具有不同名称的体系结构。</p></li><li><p>由于网络体系结构的不同，不同公司的设备很难互相连通。为了使不同体系结构的计算机网络都能互连，国际标准化组织 ISO 于 1977 年成立了专门机构研究该问题。他们提出了一个试图使各种计算机在世界范围内互连成网的标准框架，即著名的开放系统互连基本参考模型 OSI/RM (Open Systems Interconnection Reference Model)，简称为 OSI。只要遵循 OSI 标准，一个系统就可以和位于世界上任何地方的、也遵循这同一标准的其他任何系统进行通信。</p></li></ul><p>OSI 只获得了一些理论研究的成果，在市场化方面却失败了。原因包括：<br>  OSI 的专家们在完成 OSI 标准时没有商业驱动力；<br>  OSI 的协议实现起来过分复杂，且运行效率很低；<br>  OSI 标准的制定周期太长，因而使得按 OSI 标准生产的设备无法及时进入市场；<br>  OSI 的层次划分也不太合理，有些功能在多个层次中重复出现。</p><p>  最终的结果可想而知，法律上的 (de jure) 国际标准 OSI 并没有得到市场的认可。而非国际标准 TCP/IP 却获得了最广泛的应用。TCP/IP 常被称为事实上的 (de facto) 国际标准。</p><h2 id="1-7-2-协议与划分层次"><a href="#1-7-2-协议与划分层次" class="headerlink" title="1.7.2 协议与划分层次"></a>1.7.2 协议与划分层次</h2><ul><li>计算机网络中的数据交换必须遵守事先约定好的规则。 </li><li>这些规则明确规定了所交换的数据的格式以及有关的同步问题（同步含有时序的意思）。</li><li>网络协议 (network protocol)，简称为协议，是为进行网络中的数据交换而建立的规则、标准或约定。 主要由语法(数据与控制信息的结构或格式)、语义(需要发出何种控制信息，完成何种动作以及做出何种响应)、同步(事件实现顺序的详细说明)三个要素组成。</li></ul><p>由此可见，网络协议是计算机网络的不可缺少的组成部分。</p><p>层次式协议结构：ARPANET 的研制经验表明，对于非常复杂的计算机网络协议，<br>其结构应该是层次式的。</p><p>分层的优缺点：</p><table><thead><tr><th style="text-align:center">优点</th><th style="text-align:center">缺点</th></tr></thead><tbody><tr><td style="text-align:center">各层之间是独立的</td><td style="text-align:center">降低效率</td></tr><tr><td style="text-align:center">灵活性好</td><td style="text-align:center">有些功能会在不同的层次中重复出现，因而产生了额外开销</td></tr><tr><td style="text-align:center">结构上可分割开</td><td style="text-align:center">层数太少，就会使每一层的协议太复杂</td></tr><tr><td style="text-align:center">易于实现和维护</td><td style="text-align:center">层数太多，又会在描述和综合各层功能的系统工程任务时遇到较多的困难</td></tr><tr><td style="text-align:center">能促进标准化工作</td></tr></tbody></table><h2 id="1-7-3-具有五层协议的体系结构"><a href="#1-7-3-具有五层协议的体系结构" class="headerlink" title="1.7.3  具有五层协议的体系结构"></a>1.7.3  具有五层协议的体系结构</h2><ul><li>OSI(开发互连系统) 的七层协议体系结构的概念清楚，理论也较完整，但它既复杂又不实用。</li><li>TCP/IP 是四层体系结构：应用层、运输层、网际层和网络接口层。</li><li>但最下面的网络接口层并没有具体内容。</li><li>因此往往采取折中的办法，即综合 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构 。</li></ul><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191221001/moxing.png" alt="网络体系"></p><p>OSI七层模型简述：</p><ol><li>应用层：能够产生网络流量和用户交互的应用程序，日常使用各种应用软件</li><li>表示层：加密、压缩，针对软件开发人员，比如程序的编解码、解压缩、加解密</li><li>会话层：服务器端客户端建立额会话，关于进程以及端口</li><li>传输层：可靠传输建立会话(TCP三次握手机制)、不可靠传输协议(UDP)会话，可以做流量控制</li><li>网络层：IP地址编址，选择最佳路径，路由器在这一层工作，该层的数据传输单位为数据报。</li><li>数据链路层: 添加物理层MAC地址，交换机在这一层工作，该层的数据传输单位为帧。</li><li>物理层： 电压、接口标准(USB、以太网网卡接口)、传输介质(同轴电缆、双绞线、光纤)，该层的数据传输单位为比特流。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="计算机网络" scheme="http://ltyeamin.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper集群搭建</title>
    <link href="http://ltyeamin.github.io/2019/11/27/Zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://ltyeamin.github.io/2019/11/27/Zookeeper集群搭建/</id>
    <published>2019-11-27T14:10:14.000Z</published>
    <updated>2019-12-20T12:20:28.492Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><ol><li>安装JDK</li><li>Zookeeper<a href="https://archive.apache.org/dist/zookeeper/" target="_blank" rel="noopener">安装包下载</a>，这里我选择3.5.6进行下载</li><li>准备三台机器，分别是192.168.5.1,192.168.5.100,192.168.5.101</li><li>将zookeeper的安装包上传到这三台机器相同的目录上(方便管理)</li></ol><h2 id="2-开始搭建"><a href="#2-开始搭建" class="headerlink" title="2. 开始搭建"></a>2. 开始搭建</h2><h4 id="1）配置集群"><a href="#1）配置集群" class="headerlink" title="1）配置集群"></a>1）配置集群</h4><p>   在三台机器依次进行如下操作：</p><ol><li><p>解压Zookeeper，并创建data目录，另外将conf下的zoo_sample.cfg文件复制并改名为zoo.cfg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf apache-zookeeper-3.5.6-bin.tar.gz</span><br><span class="line">cd apache-zookeeper-3.5.6-bin/</span><br><span class="line">mkdir data</span><br><span class="line">cp conf/zoo_sample.cfg conf/zoo.cfg</span><br></pre></td></tr></table></figure></li><li><p>在三台机器上配置zoo.cfg集群环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi conf/zoo.cf</span><br></pre></td></tr></table></figure><p>修改如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> The number of milliseconds of each tick</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="meta">#</span><span class="bash"> The number of ticks that the initial </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> synchronization phase can take</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="meta">#</span><span class="bash"> The number of ticks that can pass between </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sending a request and getting an acknowledgement</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="meta">#</span><span class="bash"> the directory <span class="built_in">where</span> the snapshot is stored.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">do</span> not use /tmp <span class="keyword">for</span> storage, /tmp here is just </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> example sakes.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里改成data目录，用于存放数据，用相对路径</span></span><br><span class="line">dataDir=../data</span><br><span class="line"><span class="meta">#</span><span class="bash"> the port at <span class="built_in">which</span> the clients will connect</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认端口为2181可以不改，如果在一台机器搭建伪集群则需要修改</span></span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="meta">#</span><span class="bash"> the maximum number of client connections.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> increase this <span class="keyword">if</span> you need to handle more clients</span></span><br><span class="line"><span class="meta">#</span><span class="bash">maxClientCnxns=60</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Be sure to <span class="built_in">read</span> the maintenance section of the </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> administrator guide before turning on autopurge.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> http://zookeeper.apache.org/doc/current/zookeeperAdmin.html<span class="comment">#sc_maintenance</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The number of snapshots to retain <span class="keyword">in</span> dataDir</span></span><br><span class="line"><span class="meta">#</span><span class="bash">autopurge.snapRetainCount=3</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Purge task interval <span class="keyword">in</span> hours</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set to <span class="string">"0"</span> to <span class="built_in">disable</span> auto purge feature</span></span><br><span class="line"><span class="meta">#</span><span class="bash">autopurge.purgeInterval=1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在每一个 zookeeper的zoo.cfg配置客户端访问端口（clientPort）和集群服务器IP列表。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释：server.服务器ID=服务器 IP 地址：服务器之间通信端口：服务器之间投票选举端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 集群服务器IP列表如下</span></span><br><span class="line">server.1=192.168.5.100:2881:3881</span><br><span class="line">server.2=192.168.5.101:2881:3881</span><br><span class="line">server.3=192.168.5.1:2881:3881</span><br></pre></td></tr></table></figure></li><li><p>根据上述的配置，在每个 zookeeper的data 目录下创建一个 myid 文件，内容分别是 1、2、3 。这个文件就是记录每个服务器的 ID。比如这里服务1、2、3分别代表192.168.5.100、192.168.5.101、192.168.5.1这三台机器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在192.168.5.100执行</span></span><br><span class="line">touch data/myid &amp;&amp; echo 1 &gt; data/myid</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在192.168.5.101执行</span></span><br><span class="line">touch data/myid &amp;&amp; echo 2 &gt; data/myid</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在192.168.5.1执行</span></span><br><span class="line">touch data/myid &amp;&amp; echo 3 &gt; data/myid</span><br></pre></td></tr></table></figure></li></ol><h4 id="2）启动集群"><a href="#2）启动集群" class="headerlink" title="2）启动集群"></a>2）启动集群</h4><p>启动集群就是分别启动每个实例,即在三台启动Zookeeper：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/zkServer.sh start</span><br></pre></td></tr></table></figure><p>启动成功后会显示STARTED，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[litong@localhost apache-zookeeper-3.5.6-bin]# ./bin/zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/bin/apache-zookeeper-3.5.6-bin/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure><h4 id="3）集群验证"><a href="#3）集群验证" class="headerlink" title="3）集群验证"></a>3）集群验证</h4><p>启动成功后，我们可以在三台机器上输入以下命令即可查询集群状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/zkServer.sh status</span><br></pre></td></tr></table></figure><p>192.168.5.100机器的输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost apache-zookeeper-3.5.6-bin]# ./bin/zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/bin/apache-zookeeper-3.5.6-bin/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost.</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><p>192.168.5.101机器的输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost apache-zookeeper-3.5.6-bin]# ./bin/zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/bin/apache-zookeeper-3.5.6-bin/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost.</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></figure><p>192.168.5.1机器的输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">litong@LT:/media/litong/软件/programs/tools/apache-zookeeper-3.5.6-bin/bin$ ./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /media/litong/软件/programs/tools/apache-zookeeper-3.5.6-bin/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost.</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><p>从三台机器的状态可以查看，192.168.5.101机器上显示Mode: leader，是主节点(master)，其他两台机器上显示Mode: follower，则是两个slave。</p><h2 id="3-参考文档"><a href="#3-参考文档" class="headerlink" title="3. 参考文档"></a>3. 参考文档</h2><p>​    1. <a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">Zookeeper主页</a></p><p>​    2. <a href="https://zookeeper.apache.org/doc/r3.5.6/" target="_blank" rel="noopener">Zookeeper文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="Zookeeper" scheme="http://ltyeamin.github.io/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础-SSH免密登录</title>
    <link href="http://ltyeamin.github.io/2019/11/23/Linux%E5%9F%BA%E7%A1%80-SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
    <id>http://ltyeamin.github.io/2019/11/23/Linux基础-SSH免密登录/</id>
    <published>2019-11-23T05:01:17.000Z</published>
    <updated>2019-11-23T05:32:34.209Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Linux SSH登录由两种方式:</p><ol><li><p>账户密码登录</p></li><li><p>密钥登录</p></li></ol><p>我有两台主机，ip分别为192.168.5.1和192.168.5.100，我要从前者远程登录到后者主机上，下面我分别来演示一下两种方式:</p><h2 id="账号密码登录"><a href="#账号密码登录" class="headerlink" title="账号密码登录"></a>账号密码登录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.5.100</span><br></pre></td></tr></table></figure><p>注意： 默认端口号是22,如果不是22需要加入-p+端口号进行登录，比如远程登录示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">litong@LT:~$ ssh -p22 root@192.168.5.100</span><br><span class="line">root@192.168.5.100<span class="string">'s password: </span></span><br><span class="line"><span class="string">Last login: Sat Nov 23 18:34:53 2019 from 192.168.5.1</span></span><br><span class="line"><span class="string">[root@localhost ~]# ifconfig ens33</span></span><br><span class="line"><span class="string">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span></span><br><span class="line"><span class="string">        inet 192.168.5.100  netmask 255.255.255.0  broadcast 192.168.5.255</span></span><br><span class="line"><span class="string">        inet6 fe80::79ad:6fa6:c473:3647  prefixlen 64  scopeid 0x20&lt;link&gt;</span></span><br><span class="line"><span class="string">        ether 00:0c:29:b3:a4:0f  txqueuelen 1000  (Ethernet)</span></span><br><span class="line"><span class="string">        RX packets 281  bytes 40054 (39.1 KiB)</span></span><br><span class="line"><span class="string">        RX errors 0  dropped 0  overruns 0  frame 0</span></span><br><span class="line"><span class="string">        TX packets 211  bytes 37007 (36.1 KiB)</span></span><br><span class="line"><span class="string">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span></span><br></pre></td></tr></table></figure><h2 id="公钥免密登录"><a href="#公钥免密登录" class="headerlink" title="公钥免密登录"></a>公钥免密登录</h2><ol><li><p>先在192.168.5.1这太机器上生成公钥；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>执行上述命令后，敲三次回车即可生成，生成后会在当前账号的home的.ssh目录中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">litong@LT:~$ ssh-keygen -t rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/litong/.ssh/id_rsa): </span><br><span class="line">/home/litong/.ssh/id_rsa already exists.</span><br><span class="line">Overwrite (y/n)? </span><br><span class="line">litong@LT:~$ ls -l ~/.ssh/</span><br><span class="line">总用量 12</span><br><span class="line">-rw------- 1 litong litong 1675 9月  10 22:03 id_rsa</span><br><span class="line">-rw-r--r-- 1 litong litong  400 9月  10 22:03 id_rsa.pub</span><br><span class="line">-rw-r--r-- 1 litong litong 2214 11月 20 21:54 known_hosts</span><br></pre></td></tr></table></figure><p>​       authorized_keys:存放远程免密登录的公钥,主要通过这个文件记录多台机器的公钥,这个文件可以没有；</p><p>　　id_rsa : 生成的私钥文件；</p><p>　　id_rsa.pub ： 生成的公钥文件；</p><p>　　know_hosts : 已知的主机公钥清单。</p><p>注意:</p><p>​     1).  <strong>ssh目录的权限必须是700</strong> </p><p>​     2). <strong>.ssh/authorized_keys文件权限必须是600</strong></p></li><li><p>确认公钥文件id_rsa.pub是否存在，并把公钥文件上传到远程登录的机器上。</p><p>复制文件有多种方式：</p><ol><li><p>通过ssh-copy-id的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssh-copy-id -i ~/.ssh/id_rsa.pub 192.168.5.100</span><br></pre></td></tr></table></figure></li><li><p>通过scp将内容写到对方的文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -p ~/.ssh/id_rsa.pub root@192.168.5.100:/root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li></ol></li><li><p>上传成功后，查看远程主机~/.ssh/authorized_keys文件的内容，其中内容包含要远程主机的公钥则说吗配置完成</p><h3 id="192-168-5-1机器公钥"><a href="#192-168-5-1机器公钥" class="headerlink" title="192.168.5.1机器公钥"></a>192.168.5.1机器公钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">litong@LT:~/.ssh$ cat id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDEeCQP2arzLybGinLvKEgN6cJtINUhDL8uLIwaCJdsv7FbYrBK9R2I01F+pftjiiILCrg0GgwSThAJ7cCxbmriw+D1ZoZdC+MJPONiv4PF9KBWNTGdZ1fLjpEifUI3Aax23TdQqkHs+4+T8zOK2v4MsDgit4nqJheV2I+cXuumPlCONndfr43KxPsGJqAtb8yzkMA20/r8fnnOMbfblDnsAOTGWjC+ond2Eph5AlY2tW+s9JiFBHVawalheqYBVmKlNT3vqVp5IKrnJrIVagN59FKqSOAYTFc/7eR61npGtf0+Ftew137FICGp7F6v4JxjqNuSkxsXsH6+2Z071A3X ltyeamin@gmail.com</span><br></pre></td></tr></table></figure><h3 id="192-168-5-100远程机器免密登录公钥"><a href="#192-168-5-100远程机器免密登录公钥" class="headerlink" title="192.168.5.100远程机器免密登录公钥"></a>192.168.5.100远程机器免密登录公钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@localhost .ssh]<span class="comment"># cat authorized_keys </span></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDEeCQP2arzLybGinLvKEgN6cJtINUhDL8uLIwaCJdsv7FbYrBK9R2I01F+pftjiiILCrg0GgwSThAJ7cCxbmriw+D1ZoZdC+MJPONiv4PF9KBWNTGdZ1fLjpEifUI3Aax23TdQqkHs+4+T8zOK2v4MsDgit4nqJheV2I+cXuumPlCONndfr43KxPsGJqAtb8yzkMA20/r8fnnOMbfblDnsAOTGWjC+ond2Eph5AlY2tW+s9JiFBHVawalheqYBVmKlNT3vqVp5IKrnJrIVagN59FKqSOAYTFc/7eR61npGtf0+Ftew137FICGp7F6v4JxjqNuSkxsXsH6+2Z071A3X ltyeamin@gmail.com</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>尝试免密登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">litong@LT:~/.ssh$ ssh root@192.168.5.100</span><br><span class="line">Last login: Sat Nov 23 19:07:01 2019 from 192.168.5.1</span><br></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  日常工作中，免密登录用处特别多，项目部署的时候上传时候需要免密登录，不可能将密码原文设置到配置文件中，这样特别不安全。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="Linux" scheme="http://ltyeamin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ消息发送样例</title>
    <link href="http://ltyeamin.github.io/2019/11/20/RocketMQ%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E6%A0%B7%E4%BE%8B/"/>
    <id>http://ltyeamin.github.io/2019/11/20/RocketMQ消息发送样例/</id>
    <published>2019-11-20T02:19:23.000Z</published>
    <updated>2020-01-08T13:33:44.407Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="1-消息发送样例"><a href="#1-消息发送样例" class="headerlink" title="1. 消息发送样例"></a>1. 消息发送样例</h1><ul><li><p>导入MQ客户端依赖</p><ol><li><p>maven pom.xml文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意版本，版本必须和server端保持一致--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Gradle build.gradle文件配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile(<span class="string">'org.apache.rocketmq:rocketmq-client:4.5.2'</span>)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>消息发送者步骤分析</p></li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.创建消息生产者producer，并制定生产者组名</span><br><span class="line">2.指定Nameserver地址</span><br><span class="line">3.启动producer</span><br><span class="line">4.创建消息对象，指定主题Topic、Tag和消息体</span><br><span class="line">5.发送消息</span><br><span class="line">6.关闭生产者producer</span><br></pre></td></tr></table></figure><ul><li>消息消费者步骤分析</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.创建消费者Consumer，制定消费者组名</span><br><span class="line">2.指定Nameserver地址</span><br><span class="line">3.订阅主题Topic和Tag</span><br><span class="line">4.设置回调函数，处理消息</span><br><span class="line">5.启动消费者consumer</span><br></pre></td></tr></table></figure><h2 id="1-1-基本样例"><a href="#1-1-基本样例" class="headerlink" title="1.1 基本样例"></a>1.1 基本样例</h2><h3 id="1-1-1-消息发送"><a href="#1-1-1-消息发送" class="headerlink" title="1.1.1 消息发送"></a>1.1.1 消息发送</h3><h4 id="1）发送同步消息"><a href="#1）发送同步消息" class="headerlink" title="1）发送同步消息"></a>1）发送同步消息</h4><p>这种可靠性同步地发送方式使用的比较广泛，比如：重要的消息通知，短信通知。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncProducer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 实例化消息生产者Producer</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"please_rename_unique_group_name"</span>);</span><br><span class="line">    <span class="comment">// 设置NameServer的地址</span></span><br><span class="line">    producer.setNamesrvAddr(<span class="string">"localhost:9876"</span>);</span><br><span class="line">    <span class="comment">// 启动Producer实例</span></span><br><span class="line">        producer.start();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 创建消息，并指定Topic，Tag和消息体</span></span><br><span class="line">        Message msg = <span class="keyword">new</span> Message(<span class="string">"TopicTest"</span> <span class="comment">/* Topic */</span>,</span><br><span class="line">        <span class="string">"TagA"</span> <span class="comment">/* Tag */</span>,</span><br><span class="line">        (<span class="string">"Hello RocketMQ "</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class="comment">/* Message body */</span></span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 发送消息到一个Broker</span></span><br><span class="line">            SendResult sendResult = producer.send(msg);</span><br><span class="line">            <span class="comment">// 通过sendResult返回消息是否成功送达</span></span><br><span class="line">            System.out.printf(<span class="string">"%s%n"</span>, sendResult);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果不再发送消息，关闭Producer实例。</span></span><br><span class="line">    producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）发送异步消息"><a href="#2）发送异步消息" class="headerlink" title="2）发送异步消息"></a>2）发送异步消息</h4><p>异步消息通常用在对响应时间敏感的业务场景，即发送端不能容忍长时间地等待Broker的响应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncProducer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 实例化消息生产者Producer</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"please_rename_unique_group_name"</span>);</span><br><span class="line">    <span class="comment">// 设置NameServer的地址</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">"localhost:9876"</span>);</span><br><span class="line">    <span class="comment">// 启动Producer实例</span></span><br><span class="line">        producer.start();</span><br><span class="line">        <span class="comment">// 异步发送失败后的重试次数</span></span><br><span class="line">        producer.setRetryTimesWhenSendAsyncFailed(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">            <span class="comment">// 创建消息，并指定Topic，Tag和消息体</span></span><br><span class="line">                Message msg = <span class="keyword">new</span> Message(<span class="string">"TopicTest"</span>,</span><br><span class="line">                    <span class="string">"TagA"</span>,</span><br><span class="line">                    <span class="string">"OrderID199"</span>,</span><br><span class="line">                    <span class="string">"Hello world"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">                <span class="comment">// SendCallback接收异步返回结果的回调</span></span><br><span class="line">                producer.send(msg, <span class="keyword">new</span> SendCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(SendResult sendResult)</span> </span>&#123;</span><br><span class="line">                        System.out.printf(<span class="string">"%-10d OK %s %n"</span>, index,</span><br><span class="line">                            sendResult.getMsgId());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                    System.out.printf(<span class="string">"%-10d Exception %s %n"</span>, index, e);</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果不再发送消息，关闭Producer实例。</span></span><br><span class="line">    producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）单向发送消息"><a href="#3）单向发送消息" class="headerlink" title="3）单向发送消息"></a>3）单向发送消息</h4><p>这种方式主要用在不特别关心发送结果的场景，例如日志发送。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnewayProducer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 实例化消息生产者Producer</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"please_rename_unique_group_name"</span>);</span><br><span class="line">    <span class="comment">// 设置NameServer的地址</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">"localhost:9876"</span>);</span><br><span class="line">    <span class="comment">// 启动Producer实例</span></span><br><span class="line">        producer.start();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 创建消息，并指定Topic，Tag和消息体</span></span><br><span class="line">        Message msg = <span class="keyword">new</span> Message(<span class="string">"TopicTest"</span> <span class="comment">/* Topic */</span>,</span><br><span class="line">                <span class="string">"TagA"</span> <span class="comment">/* Tag */</span>,</span><br><span class="line">                (<span class="string">"Hello RocketMQ "</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class="comment">/* Message body */</span></span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 发送单向消息，没有任何返回结果</span></span><br><span class="line">        producer.sendOneway(msg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果不再发送消息，关闭Producer实例。</span></span><br><span class="line">    producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-消费消息"><a href="#1-1-2-消费消息" class="headerlink" title="1.1.2 消费消息"></a>1.1.2 消费消息</h3><h4 id="1）负载均衡模式"><a href="#1）负载均衡模式" class="headerlink" title="1）负载均衡模式"></a>1）负载均衡模式</h4><p>消费者采用负载均衡方式消费消息，多个消费者共同消费队列消息，每个消费者处理的消息不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 实例化消息生产者,指定组名</span></span><br><span class="line">    DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"group1"</span>);</span><br><span class="line">    <span class="comment">// 指定Namesrv地址信息.</span></span><br><span class="line">    consumer.setNamesrvAddr(<span class="string">"localhost:9876"</span>);</span><br><span class="line">    <span class="comment">// 订阅Topic</span></span><br><span class="line">    consumer.subscribe(<span class="string">"Test"</span>, <span class="string">"*"</span>);</span><br><span class="line">    <span class="comment">//负载均衡模式消费，不指定默认是负载均衡的消息消费模式</span></span><br><span class="line">    consumer.setMessageModel(MessageModel.CLUSTERING);</span><br><span class="line">    <span class="comment">// 注册回调函数，处理消息</span></span><br><span class="line">    consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                        ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">            System.out.printf(<span class="string">"%s Receive New Messages: %s %n"</span>, </span><br><span class="line">                              Thread.currentThread().getName(), msgs);</span><br><span class="line">            <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//启动消息者</span></span><br><span class="line">    consumer.start();</span><br><span class="line">    System.out.printf(<span class="string">"Consumer Started.%n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）广播模式"><a href="#2）广播模式" class="headerlink" title="2）广播模式"></a>2）广播模式</h4><p>消费者采用广播的方式消费消息，每个消费者消费的消息都是相同的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 实例化消息生产者,指定组名</span></span><br><span class="line">    DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"group1"</span>);</span><br><span class="line">    <span class="comment">// 指定Namesrv地址信息.</span></span><br><span class="line">    consumer.setNamesrvAddr(<span class="string">"localhost:9876"</span>);</span><br><span class="line">    <span class="comment">// 订阅Topic</span></span><br><span class="line">    consumer.subscribe(<span class="string">"Test"</span>, <span class="string">"*"</span>);</span><br><span class="line">    <span class="comment">//广播模式消费</span></span><br><span class="line">    consumer.setMessageModel(MessageModel.BROADCASTING);</span><br><span class="line">    <span class="comment">// 注册回调函数，处理消息</span></span><br><span class="line">    consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                        ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">            System.out.printf(<span class="string">"%s Receive New Messages: %s %n"</span>, </span><br><span class="line">                              Thread.currentThread().getName(), msgs);</span><br><span class="line">            <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//启动消息者</span></span><br><span class="line">    consumer.start();</span><br><span class="line">    System.out.printf(<span class="string">"Consumer Started.%n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-顺序消息"><a href="#1-2-顺序消息" class="headerlink" title="1.2 顺序消息"></a>1.2 顺序消息</h2><p>消息有序指的是可以按照消息的发送顺序来消费(FIFO)。RocketMQ可以严格的保证消息有序，可以分为分区有序或者全局有序。</p><p>顺序消费的原理解析，在默认的情况下消息发送会采取Round Robin轮询方式把消息发送到不同的queue(分区队列)；而消费消息的时候从多个queue上拉取消息，这种情况发送和消费是不能保证顺序。但是如果控制发送的顺序消息只依次发送到同一个queue中，消费的时候只从这个queue上依次拉取，则就保证了顺序。当发送和消费参与的queue只有一个，则是全局有序；如果多个queue参与，则为分区有序，即相对每个queue，消息都是有序的。</p><p>下面用订单进行分区有序的示例。一个订单的顺序流程是：创建、付款、推送、完成。订单号相同的消息会被先后发送到同一个队列中，消费时，同一个OrderId获取到的肯定是同一个队列。</p><h3 id="1-2-1-顺序消息生产"><a href="#1-2-1-顺序消息生产" class="headerlink" title="1.2.1 顺序消息生产"></a>1.2.1 顺序消息生产</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Producer，发送顺序消息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"please_rename_unique_group_name"</span>);</span><br><span class="line"></span><br><span class="line">       producer.setNamesrvAddr(<span class="string">"127.0.0.1:9876"</span>);</span><br><span class="line"></span><br><span class="line">       producer.start();</span><br><span class="line"></span><br><span class="line">       String[] tags = <span class="keyword">new</span> String[]&#123;<span class="string">"TagA"</span>, <span class="string">"TagC"</span>, <span class="string">"TagD"</span>&#125;;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 订单列表</span></span><br><span class="line">       List&lt;OrderStep&gt; orderList = <span class="keyword">new</span> Producer().buildOrders();</span><br><span class="line"></span><br><span class="line">       Date date = <span class="keyword">new</span> Date();</span><br><span class="line">       SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">       String dateStr = sdf.format(date);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">           <span class="comment">// 加个时间前缀</span></span><br><span class="line">           String body = dateStr + <span class="string">" Hello RocketMQ "</span> + orderList.get(i);</span><br><span class="line">           Message msg = <span class="keyword">new</span> Message(<span class="string">"TopicTest"</span>, tags[i % tags.length], <span class="string">"KEY"</span> + i, body.getBytes());</span><br><span class="line"></span><br><span class="line">           SendResult sendResult = producer.send(msg, <span class="keyword">new</span> MessageQueueSelector() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> MessageQueue <span class="title">select</span><span class="params">(List&lt;MessageQueue&gt; mqs, Message msg, Object arg)</span> </span>&#123;</span><br><span class="line">                   Long id = (Long) arg;  <span class="comment">//根据订单id选择发送queue</span></span><br><span class="line">                   <span class="keyword">long</span> index = id % mqs.size();  <span class="comment">// 求模确定队列的位置</span></span><br><span class="line">                   <span class="keyword">return</span> mqs.get((<span class="keyword">int</span>) index);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;, orderList.get(i).getOrderId());<span class="comment">//订单id</span></span><br><span class="line"></span><br><span class="line">           System.out.println(String.format(<span class="string">"SendResult status:%s, queueId:%d, body:%s"</span>,</span><br><span class="line">               sendResult.getSendStatus(),</span><br><span class="line">               sendResult.getMessageQueue().getQueueId(),</span><br><span class="line">               body));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       producer.shutdown();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 订单的步骤</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderStep</span> </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">long</span> orderId;</span><br><span class="line">       <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getOrderId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> orderId;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderId</span><span class="params">(<span class="keyword">long</span> orderId)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> desc;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.desc = desc;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"OrderStep&#123;"</span> +</span><br><span class="line">               <span class="string">"orderId="</span> + orderId +</span><br><span class="line">               <span class="string">", desc='"</span> + desc + <span class="string">'\''</span> +</span><br><span class="line">               <span class="string">'&#125;'</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 生成模拟订单数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> List&lt;OrderStep&gt; <span class="title">buildOrders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       List&lt;OrderStep&gt; orderList = <span class="keyword">new</span> ArrayList&lt;OrderStep&gt;();</span><br><span class="line"></span><br><span class="line">       OrderStep orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">       orderDemo.setOrderId(<span class="number">15103111039L</span>);</span><br><span class="line">       orderDemo.setDesc(<span class="string">"创建"</span>);</span><br><span class="line">       orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">       orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">       orderDemo.setOrderId(<span class="number">15103111065L</span>);</span><br><span class="line">       orderDemo.setDesc(<span class="string">"创建"</span>);</span><br><span class="line">       orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">       orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">       orderDemo.setOrderId(<span class="number">15103111039L</span>);</span><br><span class="line">       orderDemo.setDesc(<span class="string">"付款"</span>);</span><br><span class="line">       orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">       orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">       orderDemo.setOrderId(<span class="number">15103117235L</span>);</span><br><span class="line">       orderDemo.setDesc(<span class="string">"创建"</span>);</span><br><span class="line">       orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">       orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">       orderDemo.setOrderId(<span class="number">15103111065L</span>);</span><br><span class="line">       orderDemo.setDesc(<span class="string">"付款"</span>);</span><br><span class="line">       orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">       orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">       orderDemo.setOrderId(<span class="number">15103117235L</span>);</span><br><span class="line">       orderDemo.setDesc(<span class="string">"付款"</span>);</span><br><span class="line">       orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">       orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">       orderDemo.setOrderId(<span class="number">15103111065L</span>);</span><br><span class="line">       orderDemo.setDesc(<span class="string">"完成"</span>);</span><br><span class="line">       orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">       orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">       orderDemo.setOrderId(<span class="number">15103111039L</span>);</span><br><span class="line">       orderDemo.setDesc(<span class="string">"推送"</span>);</span><br><span class="line">       orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">       orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">       orderDemo.setOrderId(<span class="number">15103117235L</span>);</span><br><span class="line">       orderDemo.setDesc(<span class="string">"完成"</span>);</span><br><span class="line">       orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">       orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">       orderDemo.setOrderId(<span class="number">15103111039L</span>);</span><br><span class="line">       orderDemo.setDesc(<span class="string">"完成"</span>);</span><br><span class="line">       orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> orderList;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-顺序消费消息"><a href="#1-2-2-顺序消费消息" class="headerlink" title="1.2.2 顺序消费消息"></a>1.2.2 顺序消费消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 顺序消息消费，带事务方式（应用可控制Offset什么时候提交）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerInOrder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       DefaultMQPushConsumer consumer = <span class="keyword">new</span> </span><br><span class="line">           DefaultMQPushConsumer(<span class="string">"please_rename_unique_group_name_3"</span>);</span><br><span class="line">       consumer.setNamesrvAddr(<span class="string">"127.0.0.1:9876"</span>);</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 设置Consumer第一次启动是从队列头部开始消费还是队列尾部开始消费&lt;br&gt;</span></span><br><span class="line"><span class="comment">        * 如果非第一次启动，那么按照上次消费的位置继续消费</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line"></span><br><span class="line">       consumer.subscribe(<span class="string">"TopicTest"</span>, <span class="string">"TagA || TagC || TagD"</span>);</span><br><span class="line"></span><br><span class="line">       consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerOrderly() &#123;</span><br><span class="line"></span><br><span class="line">           Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> ConsumeOrderlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeOrderlyContext context)</span> </span>&#123;</span><br><span class="line">               context.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">               <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</span><br><span class="line">                   <span class="comment">// 可以看到每个queue有唯一的consume线程来消费, 订单对每个queue(分区)有序</span></span><br><span class="line">                   System.out.println(<span class="string">"consumeThread="</span> + Thread.currentThread().getName() + <span class="string">"queueId="</span> + msg.getQueueId() + <span class="string">", content:"</span> + <span class="keyword">new</span> String(msg.getBody()));</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="comment">//模拟业务逻辑处理中...</span></span><br><span class="line">                   TimeUnit.SECONDS.sleep(random.nextInt(<span class="number">10</span>));</span><br><span class="line">               &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       consumer.start();</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"Consumer Started."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-延时消息"><a href="#1-3-延时消息" class="headerlink" title="1.3 延时消息"></a>1.3 延时消息</h2><p>比如电商里，提交了一个订单就可以发送一个延时消息，1h后去检查这个订单的状态，如果还是未付款就取消订单释放库存。</p><h3 id="1-3-1-启动消息消费者"><a href="#1-3-1-启动消息消费者" class="headerlink" title="1.3.1 启动消息消费者"></a>1.3.1 启动消息消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledMessageConsumer</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 实例化消费者</span></span><br><span class="line">      DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"ExampleConsumer"</span>);</span><br><span class="line">      <span class="comment">// 订阅Topics</span></span><br><span class="line">      consumer.subscribe(<span class="string">"TestTopic"</span>, <span class="string">"*"</span>);</span><br><span class="line">      <span class="comment">// 注册消息监听者</span></span><br><span class="line">      consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; messages, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">for</span> (MessageExt message : messages) &#123;</span><br><span class="line">                  <span class="comment">// Print approximate delay time period</span></span><br><span class="line">                  System.out.println(<span class="string">"Receive message[msgId="</span> + message.getMsgId() + <span class="string">"] "</span> + (System.currentTimeMillis() - message.getStoreTimestamp()) + <span class="string">"ms later"</span>);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 启动消费者</span></span><br><span class="line">      consumer.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-发送延时消息"><a href="#1-3-2-发送延时消息" class="headerlink" title="1.3.2 发送延时消息"></a>1.3.2 发送延时消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledMessageProducer</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 实例化一个生产者来产生延时消息</span></span><br><span class="line">      DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"ExampleProducerGroup"</span>);</span><br><span class="line">      <span class="comment">// 启动生产者</span></span><br><span class="line">      producer.start();</span><br><span class="line">      <span class="keyword">int</span> totalMessagesToSend = <span class="number">100</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalMessagesToSend; i++) &#123;</span><br><span class="line">          Message message = <span class="keyword">new</span> Message(<span class="string">"TestTopic"</span>, (<span class="string">"Hello scheduled message "</span> + i).getBytes());</span><br><span class="line">          <span class="comment">// 设置延时等级3,这个消息将在10s之后发送(现在只支持固定的几个时间,详看delayTimeLevel)</span></span><br><span class="line">          message.setDelayTimeLevel(<span class="number">3</span>);</span><br><span class="line">          <span class="comment">// 发送消息</span></span><br><span class="line">          producer.send(message);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">// 关闭生产者</span></span><br><span class="line">      producer.shutdown();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-验证"><a href="#1-3-3-验证" class="headerlink" title="1.3.3 验证"></a>1.3.3 验证</h3><p>您将会看到消息的消费比存储时间晚10秒</p><h3 id="1-3-4-使用限制"><a href="#1-3-4-使用限制" class="headerlink" title="1.3.4 使用限制"></a>1.3.4 使用限制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org/apache/rocketmq/store/config/MessageStoreConfig.java</span></span><br><span class="line"><span class="keyword">private</span> String messageDelayLevel = <span class="string">"1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h"</span>;</span><br></pre></td></tr></table></figure><p>现在RocketMq并不支持任意时间的延时，需要设置几个固定的延时等级，从1s到2h分别对应着等级1到18</p><h2 id="1-4-批量消息"><a href="#1-4-批量消息" class="headerlink" title="1.4 批量消息"></a>1.4 批量消息</h2><p>批量发送消息能显著提高传递小消息的性能。限制是这些批量消息应该有相同的topic，相同的waitStoreMsgOK，而且不能是延时消息。此外，这一批消息的总大小不应超过4MB。</p><h3 id="1-4-1-发送批量消息"><a href="#1-4-1-发送批量消息" class="headerlink" title="1.4.1 发送批量消息"></a>1.4.1 发送批量消息</h3><p>如果您每次只发送不超过4MB的消息，则很容易使用批处理，样例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String topic = <span class="string">"BatchTest"</span>;</span><br><span class="line">List&lt;Message&gt; messages = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">messages.add(<span class="keyword">new</span> Message(topic, <span class="string">"TagA"</span>, <span class="string">"OrderID001"</span>, <span class="string">"Hello world 0"</span>.getBytes()));</span><br><span class="line">messages.add(<span class="keyword">new</span> Message(topic, <span class="string">"TagA"</span>, <span class="string">"OrderID002"</span>, <span class="string">"Hello world 1"</span>.getBytes()));</span><br><span class="line">messages.add(<span class="keyword">new</span> Message(topic, <span class="string">"TagA"</span>, <span class="string">"OrderID003"</span>, <span class="string">"Hello world 2"</span>.getBytes()));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   producer.send(messages);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">   <span class="comment">//处理error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果消息的总长度可能大于4MB时，这时候最好把消息进行分割</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListSplitter</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">List</span>&lt;<span class="title">Message</span>&gt;&gt; </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE_LIMIT = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">4</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Message&gt; messages;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> currIndex;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ListSplitter</span><span class="params">(List&lt;Message&gt; messages)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.messages = messages;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> currIndex &lt; messages.size();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> nextIndex = currIndex;</span><br><span class="line">       <span class="keyword">int</span> totalSize = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (; nextIndex &lt; messages.size(); nextIndex++) &#123;</span><br><span class="line">           Message message = messages.get(nextIndex);</span><br><span class="line">           <span class="keyword">int</span> tmpSize = message.getTopic().length() + message.getBody().length;</span><br><span class="line">           Map&lt;String, String&gt; properties = message.getProperties();</span><br><span class="line">           <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">               tmpSize += entry.getKey().length() + entry.getValue().length();</span><br><span class="line">           &#125;</span><br><span class="line">           tmpSize = tmpSize + <span class="number">20</span>; <span class="comment">// 增加日志的开销20字节</span></span><br><span class="line">           <span class="keyword">if</span> (tmpSize &gt; SIZE_LIMIT) &#123;</span><br><span class="line">               <span class="comment">//单个消息超过了最大的限制</span></span><br><span class="line">               <span class="comment">//忽略,否则会阻塞分裂的进程</span></span><br><span class="line">               <span class="keyword">if</span> (nextIndex - currIndex == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="comment">//假如下一个子列表没有元素,则添加这个子列表然后退出循环,否则只是退出循环</span></span><br><span class="line">                  nextIndex++;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (tmpSize + totalSize &gt; SIZE_LIMIT) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               totalSize += tmpSize;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;Message&gt; subList = messages.subList(currIndex, nextIndex);</span><br><span class="line">       currIndex = nextIndex;</span><br><span class="line">       <span class="keyword">return</span> subList;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把大的消息分裂成若干个小的消息</span></span><br><span class="line">ListSplitter splitter = <span class="keyword">new</span> ListSplitter(messages);</span><br><span class="line"><span class="keyword">while</span> (splitter.hasNext()) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      List&lt;Message&gt;  listItem = splitter.next();</span><br><span class="line">      producer.send(listItem);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="comment">//处理error</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-过滤消息"><a href="#1-5-过滤消息" class="headerlink" title="1.5 过滤消息"></a>1.5 过滤消息</h2><p>在大多数情况下，TAG是一个简单而有用的设计，其可以来选择您想要的消息。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"CID_EXAMPLE"</span>);</span><br><span class="line">consumer.subscribe(<span class="string">"TOPIC"</span>, <span class="string">"TAGA || TAGB || TAGC"</span>);</span><br></pre></td></tr></table></figure><p>消费者将接收包含TAGA或TAGB或TAGC的消息。但是限制是一个消息只能有一个标签，这对于复杂的场景可能不起作用。在这种情况下，可以使用SQL表达式筛选消息。SQL特性可以通过发送消息时的属性来进行计算。在RocketMQ定义的语法下，可以实现一些简单的逻辑。下面是一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">------------</span><br><span class="line">| message  |</span><br><span class="line">|----------|  a &gt; 5 AND b = &apos;abc&apos;</span><br><span class="line">| a = 10   |  --------------------&gt; Gotten</span><br><span class="line">| b = &apos;abc&apos;|</span><br><span class="line">| c = true |</span><br><span class="line">------------</span><br><span class="line">------------</span><br><span class="line">| message  |</span><br><span class="line">|----------|   a &gt; 5 AND b = &apos;abc&apos;</span><br><span class="line">| a = 1    |  --------------------&gt; Missed</span><br><span class="line">| b = &apos;abc&apos;|</span><br><span class="line">| c = true |</span><br><span class="line">------------</span><br></pre></td></tr></table></figure><h3 id="1-5-1-SQL基本语法"><a href="#1-5-1-SQL基本语法" class="headerlink" title="1.5.1 SQL基本语法"></a>1.5.1 SQL基本语法</h3><p>RocketMQ只定义了一些基本语法来支持这个特性。你也可以很容易地扩展它。</p><ul><li>数值比较，比如：<strong>&gt;，&gt;=，&lt;，&lt;=，BETWEEN，=；</strong></li><li>字符比较，比如：<strong>=，&lt;&gt;，IN；</strong></li><li><strong>IS NULL</strong> 或者 <strong>IS NOT NULL；</strong></li><li>逻辑符号 <strong>AND，OR，NOT；</strong></li></ul><p>常量支持类型为：</p><ul><li>数值，比如：<strong>123，3.1415；</strong></li><li>字符，比如：<strong>‘abc’，必须用单引号包裹起来；</strong></li><li><strong>NULL</strong>，特殊的常量</li><li>布尔值，<strong>TRUE</strong> 或 <strong>FALSE</strong></li></ul><p>只有使用push模式的消费者才能用使用SQL92标准的sql语句，接口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(finalString topic, <span class="keyword">final</span> MessageSelector messageSelector)</span></span></span><br></pre></td></tr></table></figure><h3 id="1-5-2-消息生产者"><a href="#1-5-2-消息生产者" class="headerlink" title="1.5.2 消息生产者"></a>1.5.2 消息生产者</h3><p>发送消息时，你能通过<code>putUserProperty</code>来设置消息的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"please_rename_unique_group_name"</span>);</span><br><span class="line">producer.start();</span><br><span class="line">Message msg = <span class="keyword">new</span> Message(<span class="string">"TopicTest"</span>,</span><br><span class="line">   tag,</span><br><span class="line">   (<span class="string">"Hello RocketMQ "</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 设置一些属性</span></span><br><span class="line">msg.putUserProperty(<span class="string">"a"</span>, String.valueOf(i));</span><br><span class="line">SendResult sendResult = producer.send(msg);</span><br><span class="line"></span><br><span class="line">producer.shutdown();</span><br></pre></td></tr></table></figure><h3 id="1-5-3-消息消费者"><a href="#1-5-3-消息消费者" class="headerlink" title="1.5.3 消息消费者"></a>1.5.3 消息消费者</h3><p>用MessageSelector.bySql来使用sql筛选消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"please_rename_unique_group_name_4"</span>);</span><br><span class="line"><span class="comment">// 只有订阅的消息有这个属性a, a &gt;=0 and a &lt;= 3</span></span><br><span class="line">consumer.subscribe(<span class="string">"TopicTest"</span>, MessageSelector.bySql(<span class="string">"a between 0 and 3"</span>);</span><br><span class="line">consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line">consumer.start();</span><br></pre></td></tr></table></figure><h2 id="1-6-事务消息"><a href="#1-6-事务消息" class="headerlink" title="1.6 事务消息"></a>1.6 事务消息</h2><h3 id="1-6-1-流程分析"><a href="#1-6-1-流程分析" class="headerlink" title="1.6.1 流程分析"></a>1.6.1 流程分析</h3><p><img src="/2019/11/20/RocketMQ消息发送样例/newbooks/RocketMQ/文档/img/事务消息.png" alt=""></p><p>上图说明了事务消息的大致方案，其中分为两个流程：正常事务消息的发送及提交、事务消息的补偿流程。</p><h4 id="1）事务消息发送及提交"><a href="#1）事务消息发送及提交" class="headerlink" title="1）事务消息发送及提交"></a>1）事务消息发送及提交</h4><p>​    (1) 发送消息（half消息）。</p><p>​    (2) 服务端响应消息写入结果。</p><p>​    (3) 根据发送结果执行本地事务（如果写入失败，此时half消息对业务不可见，本地逻辑不执行）。</p><p>​    (4) 根据本地事务状态执行Commit或者Rollback（Commit操作生成消息索引，消息对消费者可见）</p><h4 id="2）事务补偿"><a href="#2）事务补偿" class="headerlink" title="2）事务补偿"></a>2）事务补偿</h4><p>​    (1) 对没有Commit/Rollback的事务消息（pending状态的消息），从服务端发起一次“回查”</p><p>​    (2) Producer收到回查消息，检查回查消息对应的本地事务的状态</p><p>​    (3) 根据本地事务状态，重新Commit或者Rollback</p><p>​    其中，补偿阶段用于解决消息Commit或者Rollback发生超时或者失败的情况。</p><h4 id="3）事务消息状态"><a href="#3）事务消息状态" class="headerlink" title="3）事务消息状态"></a>3）事务消息状态</h4><p>事务消息共有三种状态，提交状态、回滚状态、中间状态：</p><ul><li>TransactionStatus.CommitTransaction: 提交事务，它允许消费者消费此消息。</li><li>TransactionStatus.RollbackTransaction: 回滚事务，它代表该消息将被删除，不允许被消费。</li><li>TransactionStatus.Unknown: 中间状态，它代表需要检查消息队列来确定状态。</li></ul><h3 id="1-6-2-发送事务消息"><a href="#1-6-2-发送事务消息" class="headerlink" title="1.6.2 发送事务消息"></a>1.6.2 发送事务消息</h3><h4 id="1-创建事务性生产者"><a href="#1-创建事务性生产者" class="headerlink" title="1) 创建事务性生产者"></a>1) 创建事务性生产者</h4><p>使用 <code>TransactionMQProducer</code>类创建生产者，并指定唯一的 <code>ProducerGroup</code>，就可以设置自定义线程池来处理这些检查请求。执行本地事务后、需要根据执行结果对消息队列进行回复。回传的事务状态在请参考前一节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//创建事务监听器</span></span><br><span class="line">        TransactionListener transactionListener = <span class="keyword">new</span> TransactionListenerImpl();</span><br><span class="line">        <span class="comment">//创建消息生产者</span></span><br><span class="line">        TransactionMQProducer producer = <span class="keyword">new</span> TransactionMQProducer(<span class="string">"group6"</span>);</span><br><span class="line">        producer.setNamesrvAddr(<span class="string">"192.168.25.135:9876;192.168.25.138:9876"</span>);</span><br><span class="line">        <span class="comment">//生产者这是监听器</span></span><br><span class="line">        producer.setTransactionListener(transactionListener);</span><br><span class="line">        <span class="comment">//启动消息生产者</span></span><br><span class="line">        producer.start();</span><br><span class="line">        String[] tags = <span class="keyword">new</span> String[]&#123;<span class="string">"TagA"</span>, <span class="string">"TagB"</span>, <span class="string">"TagC"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Message msg = <span class="keyword">new</span> Message(<span class="string">"TransactionTopic"</span>, tags[i % tags.length], <span class="string">"KEY"</span> + i,</span><br><span class="line">                        (<span class="string">"Hello RocketMQ "</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">                SendResult sendResult = producer.sendMessageInTransaction(msg, <span class="keyword">null</span>);</span><br><span class="line">                System.out.printf(<span class="string">"%s%n"</span>, sendResult);</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MQClientException | UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//producer.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）实现事务的监听接口"><a href="#2）实现事务的监听接口" class="headerlink" title="2）实现事务的监听接口"></a>2）实现事务的监听接口</h4><p>当发送半消息成功时，我们使用 <code>executeLocalTransaction</code> 方法来执行本地事务。它返回前一节中提到的三个事务状态之一。<code>checkLocalTranscation</code> 方法用于检查本地事务状态，并回应消息队列的检查请求。它也是返回前一节中提到的三个事务状态之一。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionListenerImpl</span> <span class="keyword">implements</span> <span class="title">TransactionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">executeLocalTransaction</span><span class="params">(Message msg, Object arg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行本地事务"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.equals(<span class="string">"TagA"</span>, msg.getTags())) &#123;</span><br><span class="line">            <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.equals(<span class="string">"TagB"</span>, msg.getTags())) &#123;</span><br><span class="line">            <span class="keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> LocalTransactionState.UNKNOW;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">checkLocalTransaction</span><span class="params">(MessageExt msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MQ检查消息Tag【"</span>+msg.getTags()+<span class="string">"】的本地事务执行结果"</span>);</span><br><span class="line">        <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-3-使用限制"><a href="#1-6-3-使用限制" class="headerlink" title="1.6.3 使用限制"></a>1.6.3 使用限制</h3><ol><li>事务消息不支持延时消息和批量消息。</li><li>为了避免单个消息被检查太多次而导致半队列消息累积，我们默认将单个消息的检查次数限制为 15 次，但是用户可以通过 Broker 配置文件的 <code>transactionCheckMax</code>参数来修改此限制。如果已经检查某条消息超过 N 次的话（ N = <code>transactionCheckMax</code> ） 则 Broker 将丢弃此消息，并在默认情况下同时打印错误日志。用户可以通过重写 <code>AbstractTransactionCheckListener</code> 类来修改这个行为。</li><li>事务消息将在 Broker 配置文件中的参数 transactionMsgTimeout 这样的特定时间长度之后被检查。当发送事务消息时，用户还可以通过设置用户属性 CHECK_IMMUNITY_TIME_IN_SECONDS 来改变这个限制，该参数优先于 <code>transactionMsgTimeout</code> 参数。</li><li>事务性消息可能不止一次被检查或消费。</li><li>提交给用户的目标主题消息可能会失败，目前这依日志的记录而定。它的高可用性通过 RocketMQ 本身的高可用性机制来保证，如果希望确保事务消息不丢失、并且事务完整性得到保证，建议使用同步的双重写入机制。</li><li>事务消息的生产者 ID 不能与其他类型消息的生产者 ID 共享。与其他类型的消息不同，事务消息允许反向查询、MQ服务器能通过它们的生产者 ID 查询到消费者。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="backend" scheme="http://ltyeamin.github.io/categories/backend/"/>
    
    
      <category term="RocketMQ" scheme="http://ltyeamin.github.io/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ集群搭建</title>
    <link href="http://ltyeamin.github.io/2019/11/09/RocketMQ%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://ltyeamin.github.io/2019/11/09/RocketMQ集群搭建/</id>
    <published>2019-11-09T02:20:14.000Z</published>
    <updated>2020-01-08T13:06:29.617Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="1-RocketMQ快速入门"><a href="#1-RocketMQ快速入门" class="headerlink" title="1. RocketMQ快速入门"></a>1. RocketMQ快速入门</h1><p>RocketMQ是阿里巴巴2016年MQ中间件，使用Java语言开发，在阿里内部，RocketMQ承接了例如“双11”等高并发场景的消息流转，能够处理万亿级别的消息。</p><h2 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h2><h3 id="1-1-1-下载RocketMQ"><a href="#1-1-1-下载RocketMQ" class="headerlink" title="1.1.1 下载RocketMQ"></a>1.1.1 下载RocketMQ</h3><p>RocketMQ最新版本：4.5.2 Release</p><p><a href="https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip" target="_blank" rel="noopener">下载地址</a></p><h3 id="1-2-2-环境要求"><a href="#1-2-2-环境要求" class="headerlink" title="1.2.2 环境要求"></a>1.2.2 环境要求</h3><ul><li>Linux64位系统</li><li>JDK1.8(64位)</li><li>源码安装需要安装Maven 3.2.x</li></ul><h2 id="1-2-安装RocketMQ"><a href="#1-2-安装RocketMQ" class="headerlink" title="1.2 安装RocketMQ"></a>1.2 安装RocketMQ</h2><h3 id="1-2-1-安装步骤"><a href="#1-2-1-安装步骤" class="headerlink" title="1.2.1 安装步骤"></a>1.2.1 安装步骤</h3><p>本教程以二进制包方式安装</p><ol><li>解压安装包</li><li>进入安装目录</li></ol><h3 id="2-2-2-目录介绍"><a href="#2-2-2-目录介绍" class="headerlink" title="2.2.2 目录介绍"></a>2.2.2 目录介绍</h3><ul><li>bin：启动脚本，包括shell脚本和CMD脚本</li><li>conf：实例配置文件 ，包括broker配置文件、logback配置文件等</li><li>lib：依赖jar包，包括Netty、commons-lang、FastJSON等</li></ul><h2 id="1-3-启动RocketMQ"><a href="#1-3-启动RocketMQ" class="headerlink" title="1.3 启动RocketMQ"></a>1.3 启动RocketMQ</h2><ol><li>启动NameServer</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.启动NameServer</span></span><br><span class="line">nohup sh bin/mqnamesrv &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.查看启动日志</span></span><br><span class="line">tail -f ~/logs/rocketmqlogs/namesrv.log</span><br></pre></td></tr></table></figure><ol start="2"><li>启动Broker</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.启动Broker</span></span><br><span class="line">nohup sh bin/mqbroker -n localhost:9876 &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.查看启动日志</span></span><br><span class="line">tail -f ~/logs/rocketmqlogs/broker.log</span><br></pre></td></tr></table></figure><ul><li><p>问题描述：</p><p>RocketMQ默认的虚拟机内存较大，启动Broker如果因为内存不足失败，需要编辑如下两个配置文件，修改JVM内存大小</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑runbroker.sh和runserver.sh修改默认JVM大小</span></span><br><span class="line">vi runbroker.sh</span><br><span class="line">vi runserver.sh</span><br></pre></td></tr></table></figure></li><li><p>参考设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT="$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m  -XX:MaxMetaspaceSize=320m"</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-4-测试RocketMQ"><a href="#1-4-测试RocketMQ" class="headerlink" title="1.4 测试RocketMQ"></a>1.4 测试RocketMQ</h2><h3 id="1-4-1-发送消息"><a href="#1-4-1-发送消息" class="headerlink" title="1.4.1 发送消息"></a>1.4.1 发送消息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.设置环境变量</span></span><br><span class="line"><span class="built_in">export</span> NAMESRV_ADDR=localhost:9876</span><br><span class="line"><span class="comment"># 2.使用安装包的Demo发送消息</span></span><br><span class="line">sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br></pre></td></tr></table></figure><h3 id="1-4-2-接收消息"><a href="#1-4-2-接收消息" class="headerlink" title="1.4.2 接收消息"></a>1.4.2 接收消息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.设置环境变量</span></span><br><span class="line">export NAMESRV_ADDR=localhost:9876</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.接收消息</span></span><br><span class="line">sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br></pre></td></tr></table></figure><h2 id="1-5-关闭RocketMQ"><a href="#1-5-关闭RocketMQ" class="headerlink" title="1.5 关闭RocketMQ"></a>1.5 关闭RocketMQ</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.关闭NameServer</span></span><br><span class="line">sh bin/mqshutdown namesrv</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.关闭Broker</span></span><br><span class="line">sh bin/mqshutdown broker</span><br></pre></td></tr></table></figure><h1 id="2-RocketMQ集群搭建"><a href="#2-RocketMQ集群搭建" class="headerlink" title="2. RocketMQ集群搭建"></a>2. RocketMQ集群搭建</h1><h2 id="2-1-各角色介绍"><a href="#2-1-各角色介绍" class="headerlink" title="2.1 各角色介绍"></a>2.1 各角色介绍</h2><ul><li>Producer：消息的发送者；举例：发信者</li><li>Consumer：消息接收者；举例：收信者</li><li>Broker：暂存和传输消息；举例：邮局</li><li>NameServer：管理Broker；举例：各个邮局的管理机构</li><li>Topic：区分消息的种类；一个发送者可以发送消息给一个或者多个Topic；一个消息的接收者可以订阅一个或者多个Topic消息</li><li>Message Queue：相当于是Topic的分区；用于并行发送和接收消息</li></ul><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191109001/RocketMQ%E8%A7%92%E8%89%B2.jpg" alt=""></p><h2 id="2-2-集群搭建方式"><a href="#2-2-集群搭建方式" class="headerlink" title="2.2 集群搭建方式"></a>2.2 集群搭建方式</h2><h3 id="2-2-1-集群特点"><a href="#2-2-1-集群特点" class="headerlink" title="2.2.1 集群特点"></a>2.2.1 集群特点</h3><ul><li>NameServer是一个几乎无状态节点，可集群部署，节点之间无任何信息同步。</li><li>Broker部署相对复杂，Broker分为Master与Slave，一个Master可以对应多个Slave，但是一个Slave只能对应一个Master，Master与Slave的对应关系通过指定相同的BrokerName，不同的BrokerId来定义，BrokerId为0表示Master，非0表示Slave。Master也可以部署多个。每个Broker与NameServer集群中的所有节点建立长连接，定时注册Topic信息到所有NameServer。</li><li>Producer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer取Topic路由信息，并向提供Topic服务的Master建立长连接，且定时向Master发送心跳。Producer完全无状态，可集群部署。</li><li>Consumer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer取Topic路由信息，并向提供Topic服务的Master、Slave建立长连接，且定时向Master、Slave发送心跳。Consumer既可以从Master订阅消息，也可以从Slave订阅消息，订阅规则由Broker配置决定。</li></ul><h3 id="2-2-3-集群模式"><a href="#2-2-3-集群模式" class="headerlink" title="2.2.3 集群模式"></a>2.2.3 集群模式</h3><h4 id="1）单Master模式"><a href="#1）单Master模式" class="headerlink" title="1）单Master模式"></a>1）单Master模式</h4><p>这种方式风险较大，一旦Broker重启或者宕机时，会导致整个服务不可用。不建议线上环境使用,可以用于本地测试。</p><h4 id="2）多Master模式"><a href="#2）多Master模式" class="headerlink" title="2）多Master模式"></a>2）多Master模式</h4><p>一个集群无Slave，全是Master，例如2个Master或者3个Master，这种模式的优缺点如下：</p><ul><li>优点：配置简单，单个Master宕机或重启维护对应用无影响，在磁盘配置为RAID10时，即使机器宕机不可恢复情况下，由于RAID10磁盘非常可靠，消息也不会丢（异步刷盘丢失少量消息，同步刷盘一条不丢），性能最高；</li><li>缺点：单台机器宕机期间，这台机器上未被消费的消息在机器恢复之前不可订阅，消息实时性会受到影响。</li></ul><h4 id="3）多Master多Slave模式（异步）"><a href="#3）多Master多Slave模式（异步）" class="headerlink" title="3）多Master多Slave模式（异步）"></a>3）多Master多Slave模式（异步）</h4><p>每个Master配置一个Slave，有多对Master-Slave，HA采用异步复制方式，主备有短暂消息延迟（毫秒级），这种模式的优缺点如下：</p><ul><li>优点：即使磁盘损坏，消息丢失的非常少，且消息实时性不会受影响，同时Master宕机后，消费者仍然可以从Slave消费，而且此过程对应用透明，不需要人工干预，性能同多Master模式几乎一样；</li><li>缺点：Master宕机，磁盘损坏情况下会丢失少量消息。</li></ul><h4 id="4）多Master多Slave模式（同步）"><a href="#4）多Master多Slave模式（同步）" class="headerlink" title="4）多Master多Slave模式（同步）"></a>4）多Master多Slave模式（同步）</h4><p>每个Master配置一个Slave，有多对Master-Slave，HA采用同步双写方式，即只有主备都写成功，才向应用返回成功，这种模式的优缺点如下：</p><ul><li>优点：数据与服务都无单点故障，Master宕机情况下，消息无延迟，服务可用性与数据可用性都非常高；</li><li>缺点：性能比异步复制模式略低（大约低10%左右），发送单个消息的RT会略高，且目前版本在主节点宕机后，备机不能自动切换为主机。</li></ul><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191109001/RocketMQ%E9%9B%86%E7%BE%A4%E6%AF%94%E8%BE%83.jpg" alt=""></p><h2 id="2-3-双主双从集群搭建"><a href="#2-3-双主双从集群搭建" class="headerlink" title="2.3 双主双从集群搭建"></a>2.3 双主双从集群搭建</h2><h3 id="2-3-1-总体架构"><a href="#2-3-1-总体架构" class="headerlink" title="2.3.1 总体架构"></a>2.3.1 总体架构</h3><p>消息高可用采用2m-2s（同步双写）方式</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191109001/RocketMQ%E9%9B%86%E7%BE%A4.png" alt=""></p><h3 id="2-3-2-集群工作流程"><a href="#2-3-2-集群工作流程" class="headerlink" title="2.3.2 集群工作流程"></a>2.3.2 集群工作流程</h3><ol><li>启动NameServer，NameServer起来后监听端口，等待Broker、Producer、Consumer连上来，相当于一个路由控制中心。</li><li>Broker启动，跟所有的NameServer保持长连接，定时发送心跳包。心跳包中包含当前Broker信息(IP+端口等)以及存储所有Topic信息。注册成功后，NameServer集群中就有Topic跟Broker的映射关系。</li><li>收发消息前，先创建Topic，创建Topic时需要指定该Topic要存储在哪些Broker上，也可以在发送消息时自动创建Topic。</li><li>Producer发送消息，启动时先跟NameServer集群中的其中一台建立长连接，并从NameServer中获取当前发送的Topic存在哪些Broker上，轮询从队列列表中选择一个队列，然后与队列所在的Broker建立长连接从而向Broker发消息。</li><li>Consumer跟Producer类似，跟其中一台NameServer建立长连接，获取当前订阅Topic存在哪些Broker上，然后直接跟Broker建立连接通道，开始消费消息。</li></ol><h3 id="2-3-3-服务器环境"><a href="#2-3-3-服务器环境" class="headerlink" title="2.3.3 服务器环境"></a>2.3.3 服务器环境</h3><table><thead><tr><th><strong>序号</strong></th><th><strong>IP</strong></th><th><strong>角色</strong></th><th><strong>架构模式</strong></th></tr></thead><tbody><tr><td>1</td><td>192.168.5.100</td><td>nameserver、brokerserver</td><td>Master1、Slave2</td></tr><tr><td>2</td><td>192.168.5.101</td><td>nameserver、brokerserver</td><td>Master2、Slave1</td></tr></tbody></table><h3 id="2-3-4-Host添加信息"><a href="#2-3-4-Host添加信息" class="headerlink" title="2.3.4 Host添加信息"></a>2.3.4 Host添加信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>配置如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nameserver</span></span><br><span class="line">192.168.5.100 rocketmq-nameserver1</span><br><span class="line">192.168.5.101 rocketmq-nameserver2</span><br><span class="line"><span class="comment"># broker</span></span><br><span class="line">192.168.5.100 rocketmq-master1</span><br><span class="line">192.168.5.100 rocketmq-slave2</span><br><span class="line">192.168.5.101 rocketmq-master2</span><br><span class="line">192.168.5.101 rocketmq-slave1</span><br></pre></td></tr></table></figure><p>配置完成后, 重启网卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><h3 id="2-3-5-防火墙配置"><a href="#2-3-5-防火墙配置" class="headerlink" title="2.3.5 防火墙配置"></a>2.3.5 防火墙配置</h3><p>宿主机需要远程访问虚拟机的rocketmq服务和web服务，需要开放相关的端口号，简单粗暴的方式是直接关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service </span><br><span class="line"><span class="comment"># 查看防火墙的状态</span></span><br><span class="line">firewall-cmd --state </span><br><span class="line"><span class="comment"># 禁止firewall开机启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><p>或者为了安全，只开放特定的端口号，RocketMQ默认使用3个端口：9876 、10911 、11011 。如果防火墙没有关闭的话，那么防火墙就必须开放这些端口：</p><ul><li><code>nameserver</code> 默认使用 9876 端口</li><li><code>master</code> 默认使用 10911 端口</li><li><code>slave</code> 默认使用11011 端口</li></ul><p>执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开放name server默认端口</span></span><br><span class="line">firewall-cmd --remove-port=9876/tcp --permanent</span><br><span class="line"><span class="comment"># 开放master默认端口</span></span><br><span class="line">firewall-cmd --remove-port=10911/tcp --permanent</span><br><span class="line"><span class="comment"># 开放slave默认端口 (当前集群模式可不开启)</span></span><br><span class="line">firewall-cmd --remove-port=11011/tcp --permanent </span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="2-3-6-环境变量配置"><a href="#2-3-6-环境变量配置" class="headerlink" title="2.3.6 环境变量配置"></a>2.3.6 环境变量配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>在profile文件的末尾加入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set rocketmq</span></span><br><span class="line">ROCKETMQ_HOME=/usr/<span class="built_in">local</span>/bin/rocketmq-all-4.5.2-bin-release</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$ROCKETMQ_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> ROCKETMQ_HOME PATH</span><br></pre></td></tr></table></figure><p>输入:wq! 保存并退出， 并使得配置立刻生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="2-3-7-创建消息存储路径"><a href="#2-3-7-创建消息存储路径" class="headerlink" title="2.3.7 创建消息存储路径"></a>2.3.7 创建消息存储路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="variable">$ROCKETMQ_HOME</span>/store</span><br><span class="line">mkdir <span class="variable">$ROCKETMQ_HOME</span>/store/commitlog</span><br><span class="line">mkdir <span class="variable">$ROCKETMQ_HOME</span>/store/consumequeue</span><br><span class="line">mkdir <span class="variable">$ROCKETMQ_HOME</span>/store/index</span><br><span class="line">mkdir <span class="variable">$ROCKETMQ_HOME</span>/store/abort</span><br><span class="line">mkdir <span class="variable">$ROCKETMQ_HOMEcheckpoint</span></span><br><span class="line">cp -r <span class="variable">$ROCKETMQ_HOME</span>/store/ <span class="variable">$ROCKETMQ_HOME</span>/slave-store</span><br></pre></td></tr></table></figure><h3 id="2-3-8-broker配置文件"><a href="#2-3-8-broker配置文件" class="headerlink" title="2.3.8 broker配置文件"></a>2.3.8 broker配置文件</h3><h4 id="1）master1"><a href="#1）master1" class="headerlink" title="1）master1"></a>1）master1</h4><p>服务器：192.168.5.100</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="variable">$ROCKETMQ_HOME</span>/conf/2m-2s-sync/broker-a.properties</span><br></pre></td></tr></table></figure><p>修改配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#所属集群名字</span></span><br><span class="line">brokerClusterName=rocketmq-cluster</span><br><span class="line"><span class="comment">#broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line">brokerName=broker<span class="_">-a</span></span><br><span class="line"><span class="comment">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line">brokerId=0</span><br><span class="line"><span class="comment">#nameServer地址，分号分割，注意这里一下由个坑，就是;后面要有空格</span></span><br><span class="line">namesrvAddr=rocketmq-nameserver1:9876; rocketmq-nameserver2:9876</span><br><span class="line"><span class="comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line">listenPort=10911</span><br><span class="line"><span class="comment">#删除文件时间点，默认凌晨 4点</span></span><br><span class="line">deleteWhen=04</span><br><span class="line"><span class="comment">#文件保留时间，默认 48 小时</span></span><br><span class="line">fileReservedTime=120</span><br><span class="line"><span class="comment">#commitLog每个文件的大小默认1G</span></span><br><span class="line">mappedFileSizeCommitLog=1073741824</span><br><span class="line"><span class="comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line">mappedFileSizeConsumeQueue=300000</span><br><span class="line"><span class="comment">#destroyMappedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment">#redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment">#检测物理文件磁盘空间</span></span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line">storePathRootDir=<span class="variable">$ROCKETMQ_HOME</span>/store</span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line">storePathCommitLog=<span class="variable">$ROCKETMQ_HOME</span>/store/commitlog</span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line">storePathConsumeQueue=<span class="variable">$ROCKETMQ_HOME</span>/store/consumequeue</span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line">storePathIndex=<span class="variable">$ROCKETMQ_HOME</span>/store/index</span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line">storeCheckpoint=<span class="variable">$ROCKETMQ_HOME</span>/store/checkpoint</span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line">abortFile=<span class="variable">$ROCKETMQ_HOME</span>/store/abort</span><br><span class="line"><span class="comment">#限制的消息大小</span></span><br><span class="line">maxMessageSize=65536</span><br><span class="line"><span class="comment">#flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment">#flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment">#flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment">#flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="comment">#Broker 的角色</span></span><br><span class="line"><span class="comment">#- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment">#- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment">#- SLAVE</span></span><br><span class="line">brokerRole=SYNC_MASTER</span><br><span class="line"><span class="comment">#刷盘方式</span></span><br><span class="line"><span class="comment">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment">#- SYNC_FLUSH 同步刷盘</span></span><br><span class="line">flushDiskType=SYNC_FLUSH</span><br><span class="line"><span class="comment">#checkTransactionMessageEnable=false</span></span><br><span class="line"><span class="comment">#发消息线程池数量</span></span><br><span class="line"><span class="comment">#sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#拉消息线程池数量</span></span><br><span class="line"><span class="comment">#pullMessageThreadPoolNums=128</span></span><br></pre></td></tr></table></figure><h4 id="2）slave2"><a href="#2）slave2" class="headerlink" title="2）slave2"></a>2）slave2</h4><p>服务器：192.168.5.100</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="variable">$ROCKETMQ_HOME</span>/conf/2m-2s-sync/broker-b-s.properties</span><br></pre></td></tr></table></figure><p>修改配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#所属集群名字</span></span><br><span class="line">brokerClusterName=rocketmq-cluster</span><br><span class="line"><span class="comment">#broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line">brokerName=broker-b</span><br><span class="line"><span class="comment">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line">brokerId=1</span><br><span class="line"><span class="comment">#nameServer地址，分号分割，注意这里一下由个坑，就是;后面要有空格</span></span><br><span class="line">namesrvAddr=rocketmq-nameserver1:9876; rocketmq-nameserver2:9876</span><br><span class="line"><span class="comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line">listenPort=11011</span><br><span class="line"><span class="comment">#删除文件时间点，默认凌晨 4点</span></span><br><span class="line">deleteWhen=04</span><br><span class="line"><span class="comment">#文件保留时间，默认 48 小时</span></span><br><span class="line">fileReservedTime=120</span><br><span class="line"><span class="comment">#commitLog每个文件的大小默认1G</span></span><br><span class="line">mappedFileSizeCommitLog=1073741824</span><br><span class="line"><span class="comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line"><span class="comment"># mapedFileSizeConsumeQueue=300000 这个配置在4.5.2版本没用，版本升级带来的配置编号</span></span><br><span class="line">mappedFileSizeConsumeQueue=300000</span><br><span class="line"><span class="comment">#destroyMappedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment">#redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment">#检测物理文件磁盘空间</span></span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line">storePathRootDir=<span class="variable">$ROCKETMQ_HOME</span>/slave-store</span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line">storePathCommitLog=<span class="variable">$ROCKETMQ_HOME</span>/slave-store/commitlog</span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line">storePathConsumeQueue=<span class="variable">$ROCKETMQ_HOME</span>/slave-store/consumequeue</span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line">storePathIndex=<span class="variable">$ROCKETMQ_HOME</span>/slave-store/index</span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line">storeCheckpoint=<span class="variable">$ROCKETMQ_HOME</span>/slave-store/checkpoint</span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line">abortFile=<span class="variable">$ROCKETMQ_HOME</span>/slave-store/abort</span><br><span class="line"><span class="comment">#限制的消息大小</span></span><br><span class="line">maxMessageSize=65536</span><br><span class="line"><span class="comment">#flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment">#flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment">#flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment">#flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="comment">#Broker 的角色</span></span><br><span class="line"><span class="comment">#- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment">#- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment">#- SLAVE</span></span><br><span class="line">brokerRole=SLAVE</span><br><span class="line"><span class="comment">#刷盘方式</span></span><br><span class="line"><span class="comment">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment">#- SYNC_FLUSH 同步刷盘</span></span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br><span class="line"><span class="comment">#checkTransactionMessageEnable=false</span></span><br><span class="line"><span class="comment">#发消息线程池数量</span></span><br><span class="line"><span class="comment">#sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#拉消息线程池数量</span></span><br><span class="line"><span class="comment">#pullMessageThreadPoolNums=128</span></span><br></pre></td></tr></table></figure><h4 id="3）master2"><a href="#3）master2" class="headerlink" title="3）master2"></a>3）master2</h4><p>服务器：192.168.5.101</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="variable">$ROCKETMQ_HOME</span>/conf/2m-2s-sync/broker-b.properties</span><br></pre></td></tr></table></figure><p>修改配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#所属集群名字</span></span><br><span class="line">brokerClusterName=rocketmq-cluster</span><br><span class="line"><span class="comment">#broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line">brokerName=broker-b</span><br><span class="line"><span class="comment">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line">brokerId=0</span><br><span class="line"><span class="comment">#nameServer地址，分号分割，注意这里一下由个坑，就是;后面要有空格</span></span><br><span class="line">namesrvAddr=rocketmq-nameserver1:9876; rocketmq-nameserver2:9876</span><br><span class="line"><span class="comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line">listenPort=10911</span><br><span class="line"><span class="comment">#删除文件时间点，默认凌晨 4点</span></span><br><span class="line">deleteWhen=04</span><br><span class="line"><span class="comment">#文件保留时间，默认 48 小时</span></span><br><span class="line">fileReservedTime=120</span><br><span class="line"><span class="comment">#commitLog每个文件的大小默认1G</span></span><br><span class="line">mappedFileSizeCommitLog=1073741824</span><br><span class="line"><span class="comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line">mappedFileSizeConsumeQueue=300000</span><br><span class="line"><span class="comment">#destroyMappedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment">#redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment">#检测物理文件磁盘空间</span></span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line">storePathRootDir=<span class="variable">$ROCKETMQ_HOME</span>/store</span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line">storePathCommitLog=<span class="variable">$ROCKETMQ_HOME</span>/store/commitlog</span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line">storePathConsumeQueue=<span class="variable">$ROCKETMQ_HOME</span>/store/consumequeue</span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line">storePathIndex=<span class="variable">$ROCKETMQ_HOME</span>/store/index</span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line">storeCheckpoint=<span class="variable">$ROCKETMQ_HOME</span>/store/checkpoint</span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line">abortFile=<span class="variable">$ROCKETMQ_HOME</span>/store/abort</span><br><span class="line"><span class="comment">#限制的消息大小</span></span><br><span class="line">maxMessageSize=65536</span><br><span class="line"><span class="comment">#flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment">#flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment">#flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment">#flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="comment">#Broker 的角色</span></span><br><span class="line"><span class="comment">#- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment">#- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment">#- SLAVE</span></span><br><span class="line">brokerRole=SYNC_MASTER</span><br><span class="line"><span class="comment">#刷盘方式</span></span><br><span class="line"><span class="comment">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment">#- SYNC_FLUSH 同步刷盘</span></span><br><span class="line">flushDiskType=SYNC_FLUSH</span><br><span class="line"><span class="comment">#checkTransactionMessageEnable=false</span></span><br><span class="line"><span class="comment">#发消息线程池数量</span></span><br><span class="line"><span class="comment">#sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#拉消息线程池数量</span></span><br><span class="line"><span class="comment">#pullMessageThreadPoolNums=128</span></span><br></pre></td></tr></table></figure><h4 id="4）slave1"><a href="#4）slave1" class="headerlink" title="4）slave1"></a>4）slave1</h4><p>服务器：192.168.5.101</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="variable">$ROCKETMQ_HOME</span>/conf/2m-2s-sync/broker<span class="_">-a</span>-s.properties</span><br></pre></td></tr></table></figure><p>修改配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#所属集群名字</span></span><br><span class="line">brokerClusterName=rocketmq-cluster</span><br><span class="line"><span class="comment">#broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line">brokerName=broker<span class="_">-a</span></span><br><span class="line"><span class="comment">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line">brokerId=1</span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line">namesrvAddr=rocketmq-nameserver1:9876; rocketmq-nameserver2:9876</span><br><span class="line"><span class="comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line">listenPort=11011</span><br><span class="line"><span class="comment">#删除文件时间点，默认凌晨 4点</span></span><br><span class="line">deleteWhen=04</span><br><span class="line"><span class="comment">#文件保留时间，默认 48 小时</span></span><br><span class="line">fileReservedTime=120</span><br><span class="line"><span class="comment">#commitLog每个文件的大小默认1G</span></span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line"><span class="comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line">mappedFileSizeConsumeQueue=300000</span><br><span class="line"><span class="comment">#destroyMappedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment">#redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment">#检测物理文件磁盘空间</span></span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line">storePathRootDir=<span class="variable">$ROCKETMQ_HOME</span>/slave-store</span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line">storePathCommitLog=<span class="variable">$ROCKETMQ_HOME</span>/slave-store/commitlog</span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line">storePathConsumeQueue=<span class="variable">$ROCKETMQ_HOME</span>/slave-store/consumequeue</span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line">storePathIndex=<span class="variable">$ROCKETMQ_HOME</span>/slave-store/index</span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line">storeCheckpoint=<span class="variable">$ROCKETMQ_HOME</span>/checkpoint</span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line">abortFile=/<span class="variable">$ROCKETMQ_HOME</span>/slave-store/abort</span><br><span class="line"><span class="comment">#限制的消息大小</span></span><br><span class="line">maxMessageSize=65536</span><br><span class="line"><span class="comment">#flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment">#flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment">#flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment">#flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="comment">#Broker 的角色</span></span><br><span class="line"><span class="comment">#- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment">#- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment">#- SLAVE</span></span><br><span class="line">brokerRole=SLAVE</span><br><span class="line"><span class="comment">#刷盘方式</span></span><br><span class="line"><span class="comment">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment">#- SYNC_FLUSH 同步刷盘</span></span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br><span class="line"><span class="comment">#checkTransactionMessageEnable=false</span></span><br><span class="line"><span class="comment">#发消息线程池数量</span></span><br><span class="line"><span class="comment">#sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#拉消息线程池数量</span></span><br><span class="line"><span class="comment">#pullMessageThreadPoolNums=128</span></span><br></pre></td></tr></table></figure><h3 id="2-3-9-修改启动脚本文件"><a href="#2-3-9-修改启动脚本文件" class="headerlink" title="2.3.9 修改启动脚本文件"></a>2.3.9 修改启动脚本文件</h3><h4 id="1）runbroker-sh"><a href="#1）runbroker-sh" class="headerlink" title="1）runbroker.sh"></a>1）runbroker.sh</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="variable">$ROCKETMQ_HOME</span>/bin/runbroker.sh</span><br></pre></td></tr></table></figure><p>需要根据内存大小进行适当的对JVM参数进行调整：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#===================================================</span></span><br><span class="line"><span class="comment"># 开发环境配置 JVM Configuration</span></span><br><span class="line">JAVA_OPT=<span class="string">"<span class="variable">$&#123;JAVA_OPT&#125;</span> -server -Xms256m -Xmx256m -Xmn128m"</span></span><br></pre></td></tr></table></figure><h4 id="2）runserver-sh"><a href="#2）runserver-sh" class="headerlink" title="2）runserver.sh"></a>2）runserver.sh</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="variable">$ROCKETMQ_HOME</span>/bin/runserver.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT=<span class="string">"<span class="variable">$&#123;JAVA_OPT&#125;</span> -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</span></span><br></pre></td></tr></table></figure><h3 id="3-3-10-服务启动"><a href="#3-3-10-服务启动" class="headerlink" title="3.3.10 服务启动"></a>3.3.10 服务启动</h3><h4 id="1）启动NameServe集群"><a href="#1）启动NameServe集群" class="headerlink" title="1）启动NameServe集群"></a>1）启动NameServe集群</h4><p>分别在192.168.5.100和192.168.5.101启动NameServer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$ROCKETMQ_HOME</span>/bin</span><br><span class="line">nohup sh mqnamesrv &amp;</span><br></pre></td></tr></table></figure><h4 id="2）启动Broker集群"><a href="#2）启动Broker集群" class="headerlink" title="2）启动Broker集群"></a>2）启动Broker集群</h4><ul><li>在192.168.5.100上启动master1和slave2</li></ul><p>master1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sh mqbroker -c <span class="variable">$ROCKETMQ_HOME</span>/conf/2m-2s-sync/broker-a.properties &amp;</span><br></pre></td></tr></table></figure><p>slave2：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sh mqbroker -c <span class="variable">$ROCKETMQ_HOME</span>/conf/2m-2s-sync/broker-b-s.properties &amp;</span><br></pre></td></tr></table></figure><ul><li>在192.168.5.101上启动master2和slave2</li></ul><p>master2</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin/rocketmq-all-4.5.2-bin-release/bin</span><br><span class="line">nohup sh mqbroker -c <span class="variable">$ROCKETMQ_HOME</span>/conf/2m-2s-sync/broker-b.properties &amp;</span><br></pre></td></tr></table></figure><p>slave1</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin/rocketmq-all-4.5.2-bin-release/bin</span><br><span class="line">nohup sh mqbroker -c <span class="variable">$ROCKETMQ_HOME</span>/conf/2m-2s-sync/broker<span class="_">-a</span>-s.properties &amp;</span><br></pre></td></tr></table></figure><h3 id="2-3-11-查看进程状态"><a href="#2-3-11-查看进程状态" class="headerlink" title="2.3.11 查看进程状态"></a>2.3.11 查看进程状态</h3><p>启动后通过JPS查看启动进程</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191109001/jps1.png" alt=""></p><h3 id="2-3-12-查看日志"><a href="#2-3-12-查看日志" class="headerlink" title="2.3.12 查看日志"></a>2.3.12 查看日志</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看nameServer日志</span></span><br><span class="line">tail -500f ~/logs/rocketmqlogs/namesrv.log</span><br><span class="line"><span class="comment"># 查看broker日志</span></span><br><span class="line">tail -500f ~/logs/rocketmqlogs/broker.log</span><br></pre></td></tr></table></figure><h2 id="3-参考文档"><a href="#3-参考文档" class="headerlink" title="3. 参考文档"></a>3. 参考文档</h2><ul><li><a href="https://github.com/apache/rocketmq/issues/1560" target="_blank" rel="noopener">RocketMQ升级Bug</a></li><li><a href="https://github.com/apache/rocketmq/blob/master/docs/cn/operation.md" target="_blank" rel="noopener">RocketMQ集群搭建</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="RocketMQ" scheme="http://ltyeamin.github.io/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ概述</title>
    <link href="http://ltyeamin.github.io/2019/11/08/RocketMQ%E6%A6%82%E8%BF%B0/"/>
    <id>http://ltyeamin.github.io/2019/11/08/RocketMQ概述/</id>
    <published>2019-11-08T14:15:16.000Z</published>
    <updated>2020-01-08T13:06:36.791Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="1-MQ介绍"><a href="#1-MQ介绍" class="headerlink" title="1. MQ介绍"></a>1. MQ介绍</h1><h2 id="1-1-为什么要用MQ"><a href="#1-1-为什么要用MQ" class="headerlink" title="1.1 为什么要用MQ"></a>1.1 为什么要用MQ</h2><p>消息队列是一种“先进先出”的数据结构</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191109001/queue1.png" alt=""></p><p>其应用场景主要包含以下3个方面</p><ul><li>应用解耦</li></ul><p>系统的耦合性越高，容错性就越低。以电商应用为例，用户创建订单后，如果耦合调用库存系统、物流系统、支付系统，任何一个子系统出了故障或者因为升级等原因暂时不可用，都会造成下单操作异常，影响用户使用体验。</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191109001/解耦1.png" alt=""></p><p>使用消息队列解耦合，系统的耦合性就会提高了。比如物流系统发生故障，需要几分钟才能来修复，在这段时间内，物流系统要处理的数据被缓存到消息队列中，用户的下单操作正常完成。当物流系统回复后，补充处理存在消息队列中的订单消息即可，终端系统感知不到物流系统发生过几分钟故障。</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191109001/解耦2.png" alt=""></p><ul><li>流量削峰</li></ul><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191109001/mq-5.png" alt=""></p><p>应用系统如果遇到系统请求流量的瞬间猛增，有可能会将系统压垮。有了消息队列可以将大量请求缓存起来，分散到很长一段时间处理，这样可以大大提到系统的稳定性和用户体验。</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191109001/mq-6.png" alt=""></p><p>一般情况，为了保证系统的稳定性，如果系统负载超过阈值，就会阻止用户请求，这会影响用户体验，而如果使用消息队列将请求缓存起来，等待系统处理完毕后通知用户下单完毕，这样总不能下单体验要好。</p><p><u>处于经济考量目的：</u></p><p>业务系统正常时段的QPS如果是1000，流量最高峰是10000，为了应对流量高峰配置高性能的服务器显然不划算，这时可以使用消息队列对峰值流量削峰</p><ul><li>数据分发</li></ul><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191109001/mq-1.png" alt=""></p><p>通过消息队列可以让数据在多个系统更加之间进行流通。数据的产生方不需要关心谁来使用数据，只需要将数据发送到消息队列，数据使用方直接在消息队列中直接获取数据即可</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191109001/mq-2.png" alt=""></p><h2 id="1-2-MQ的优点和缺点"><a href="#1-2-MQ的优点和缺点" class="headerlink" title="1.2 MQ的优点和缺点"></a>1.2 MQ的优点和缺点</h2><p>优点：解耦、削峰、数据分发</p><p>缺点包含以下几点：</p><ul><li><p>系统可用性降低</p><p>系统引入的外部依赖越多，系统稳定性越差。一旦MQ宕机，就会对业务造成影响。</p><p>如何保证MQ的高可用？</p></li><li><p>系统复杂度提高</p><p>MQ的加入大大增加了系统的复杂度，以前系统间是同步的远程调用，现在是通过MQ进行异步调用。</p><p>如何保证消息没有被重复消费？怎么处理消息丢失情况？那么保证消息传递的顺序性？</p></li><li><p>一致性问题</p><p>A系统处理完业务，通过MQ给B、C、D三个系统发消息数据，如果B系统、C系统处理成功，D系统处理失败。</p><p>如何保证消息数据处理的一致性？</p></li></ul><h2 id="1-3-RocetMQ历史及其特征"><a href="#1-3-RocetMQ历史及其特征" class="headerlink" title="1.3 RocetMQ历史及其特征"></a>1.3 RocetMQ历史及其特征</h2><p>​      阿里的消息中间件有很长的历史，从2007年的Notify到2010年的Napoli, 2011年升级后改为MetaQ，然后到2012年开始做RocketMQ, RocketMQ使用Java语言开发，于2016年开源。第一代的Notify主要使用了推模型，解决了事务消息；第二代的MetaQ主要使用了拉模型，解决了顺序消息和海量堆积的问题。RocketMQ基于长轮询的拉取方式，兼有两者的优点。<br>​      每一次产品迭代，都吸取了之前的经验教训，目前RocketMQ已经成为Apache顶级项目。在阿里内部，RocketMQ很好地服务了集团大大小小上千个应用，在每年的双十一当天，更有不可思议的万亿级消息通过RocketMQ流转（在2017年的双十一当天，整个阿里巴巴集团通过RocketMQ流转的线上消息达到了万亿级，峰值TPS达到5600万），在阿里大中台策略上发挥着举足轻重的作用。<br>此外，RocketMQ是使用Java语言开发的，比起Kafka的Scala语言和RabbitMQ的Erlang语言，更容易找到技术人员进行定制开发。</p><p>从RocketMQ Github主页上可以找到如下表述。</p><blockquote><p><strong>Apache RocketMQ is a distributed messaging and streaming platform with low latency, high performance and reliability, trillion-level capacity and flexible scalability.</strong></p><p>It offers a variety of features:</p><ul><li>Pub/Sub messaging model</li><li>Financial grade transactional message</li><li>A variety of cross language clients, such as Java, C/C++, Python, Go</li><li>Pluggable transport protocols, such as TCP, SSL, AIO</li><li>Inbuilt message tracing capability, also support opentracing</li><li>Versatile big-data and streaming ecosytem integration</li><li>Message retroactivity by time or offset</li><li>Reliable FIFO and strict ordered messaging in the same queue</li><li>Efficient pull&amp;push consumption model</li><li>Million-level message accumulation capacity in a single queue</li><li>Multiple messaging protocols like JMS and OpenMessaging</li><li>Flexible distributed scale-out deployment architecture</li><li>Lightning-fast batch message exchange system</li><li>Various message filter mechanics such as SQL and Tag</li><li>Docker images for isolated testing and cloud isolated clusters</li><li>Feature-rich administrative dashboard for configuration, metrics and monitoring</li><li>Authentication and authorisation</li></ul></blockquote><p>大概意思我在这里翻译一下:</p><p>​    Apache RocketMQ是一个分布式消息传递和流媒体平台，具有低延迟，高性能和可靠性，万亿级容量和灵活的可伸缩性。</p><p>它具有多种功能：</p><ul><li>发布/订阅消息传递模型</li><li>金融级交易消息</li><li>各种跨语言客户端，例如Java，C / C ++，Python，Go</li><li>可插拔的传输协议，例如TCP，SSL，AIO</li><li>内置的消息跟踪功能，还支持开放式跟踪</li><li>多功能的大数据和流生态系统集成</li><li>按时间或偏移量追溯消息</li><li>可靠的FIFO和严格的有序消息传递在同一队列中</li><li>高效的推拉消费模型</li><li>单个队列中的百万级消息累积容量</li><li>多种消息传递协议，例如JMS和OpenMessaging</li><li>灵活的分布式横向扩展部署架构</li><li>快如闪电的批量消息交换系统</li><li>如SQL和Tag各种消息过滤器机制</li><li>用于隔离测试和云隔离群集的Docker映像</li><li>功能丰富的管理仪表板，用于配置，指标和监视</li><li>认证与授权管理</li></ul><h2 id="1-4-各种MQ产品的比较"><a href="#1-4-各种MQ产品的比较" class="headerlink" title="1.4 各种MQ产品的比较"></a>1.4 各种MQ产品的比较</h2><p>常见的MQ产品包括Kafka、ActiveMQ、RabbitMQ、RocketMQ。 </p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191109001/MQ%E6%AF%94%E8%BE%83.png" alt="主流MQ对比1"></p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20191109001/mq-pk.png" alt="主流MQ对比2"></p><h1 id="2-总结"><a href="#2-总结" class="headerlink" title="2.  总结"></a>2.  总结</h1><p>​    RocketMQ基于Java开发的，完全的分布式架构，API相对比较简单(相比RabbitMQ)，容易掌握，并在阿里巴巴集团内部经过了大量(双11)的实践，分性能强悍。唯一不足的一点是文档相对不是很多，若能跟随源码深入了解其内部机制，这也不算缺点。</p><h1 id="3-参考文档"><a href="#3-参考文档" class="headerlink" title="3. 参考文档"></a>3. 参考文档</h1><ul><li><a href="http://rocketmq.apache.org/" target="_blank" rel="noopener">RocketMQ主页</a></li><li><a href="http://rocketmq.apache.org/docs/motivation/" target="_blank" rel="noopener">为什么选择RocketMQ</a></li><li><p><a href="https://github.com/apache/rocketmq/" target="_blank" rel="noopener">RocketMQ Github</a></p></li><li><p><a href="http://www.itmuch.com/other/mq-pk/" target="_blank" rel="noopener">常见MQ产品对比</a></p></li><li><a href="https://mp.weixin.qq.com/s/yLbj1sKwGv1pOxv8RtcBhw" target="_blank" rel="noopener">17个方面对比主流MQ差异</a></li><li><a href="https://item.jd.com/12501140.html" target="_blank" rel="noopener">Rocket技术内幕</a></li><li><a href="https://item.jd.com/12380430.html" target="_blank" rel="noopener">Rocket实战与原理</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="backend" scheme="http://ltyeamin.github.io/categories/backend/"/>
    
    
      <category term="RocketMQ" scheme="http://ltyeamin.github.io/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>七牛云对象存储空间迁移脚本</title>
    <link href="http://ltyeamin.github.io/2019/11/02/%E4%B8%83%E7%89%9B%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E8%BF%81%E7%A7%BB%E8%84%9A%E6%9C%AC/"/>
    <id>http://ltyeamin.github.io/2019/11/02/七牛云对象存储空间迁移脚本/</id>
    <published>2019-11-02T10:15:00.000Z</published>
    <updated>2019-12-20T12:20:19.299Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在博客的图片都放在<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a>对象存储上面，个人用户有免费10GB的存储空间。</p><p>因为每一个的bucket空间分配一个七牛云的空间域名，如下示例：</p><blockquote><p>S3 域名</p><p>Endpoint(区域节点)： s3-cn-east-1.qiniucs.com</p><p>空间域名： 20191119.s3-cn-east-1.qiniucs.com</p><p>融合 CDN 测试域名</p><p> 七牛融合 CDN 测试域名（以 clouddn.com/qiniucdn.com/qiniudn.com/qnssl.com/qbox.me 结尾），每个域名每日限总流量 10GB，每个测试域名自创建起 30 个自然日后系统会自动回收，仅供测试使用并且不支持 Https 访问，详情查看 <a href="https://developer.qiniu.com/fusion/kb/1319/test-domain-access-restriction-rules" target="_blank" rel="noopener">七牛测试域名使用规范</a> 。点击域名可查看剩余回收时间。</p><p><a href="https://portal.qiniu.com/cdn/domain/q176n8af9.bkt.clouddn.com" target="_blank" rel="noopener">q176n8af9.bkt.clouddn.com</a></p></blockquote><p>七牛云很坑的一点就是这个测试域名有效期是30天(随口一说，人家免费给你的10G存储已经很不错了)，所以30天以后域名会自动过期，意味着里面存储的图片以及对象都不能访问。</p><p>解决这种问题有两种方法：</p><ol><li><p>绑定一个备案的域名(非常建议)；</p><p>优点：快速好管理，只有域名不过期，终身享受；</p><p>缺点：条件限制比较大，域名要备案。</p></li><li><p>切换bucket空间，即新建一个新的bucket，然后将旧的bucket迁移过去。</p><p>优点：免费</p><p>缺点：麻烦，每隔30天迁移一次</p></li></ol><h3 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h3><p>我只有国内的域名：<a href="http://yeamin.top" target="_blank" rel="noopener">http://yeamin.top</a> 。</p><p>我的Blog域名是<a href="http://blog.yeamin.top" target="_blank" rel="noopener">http://blog.yeamin.top</a> 。</p><p>因为我个人没有服务器，主域名都没有在国内备案，在我这里选择了第二种方式：迁移空间换取新的bucket和域名。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>打开七牛云官网，登录进入到管理控制台，左侧选择对象存储</p><ol><li>找到要迁移的bucket,即源存储；</li><li>新建一个bucket，即便目标存储空间；</li><li>下载并解压七牛云官方提供的同步迁移工具：<a href="http://developer.qiniu.com/docs/v6/tools/qshell.html；" target="_blank" rel="noopener">http://developer.qiniu.com/docs/v6/tools/qshell.html；</a></li><li>在右上角找到我的图像悬浮出来菜单后，选择秘钥管理，准备好AK和SK(AccessKey/SecretKey)。</li></ol><p>具体迁移可以参照七牛云的迁移文档可完成迁移工作，但是我觉得每次都这样一个一个这样迁移很麻烦，所以我今天抽空写了一段脚本去处理迁移工作。</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># author: tong.li</span></span><br><span class="line"><span class="comment"># description: qshell bucket transfer</span></span><br><span class="line"><span class="comment"># date: 2019-11-02 14:45:22</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#准备配置环境</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Prepare Environment..."</span></span><br><span class="line"><span class="keyword">if</span> [ ! -x <span class="string">'./qshell-windows-x64-v2.4.0'</span> ]</span><br><span class="line"> <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"qshell script file not exist"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ !<span class="string">"<span class="variable">$1</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"please input account:"</span></span><br><span class="line"><span class="built_in">read</span> account</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">'please input your AK:'</span></span><br><span class="line"><span class="built_in">read</span> AK</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">'please input your SK:'</span></span><br><span class="line"><span class="built_in">read</span> SK</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ ! <span class="string">"<span class="variable">$AK</span>"</span> || ! <span class="string">"<span class="variable">$SK</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"AK OR SK is null, please try again"</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 已有账户列表</span></span><br><span class="line">rs=`./qshell-windows-x64-v2.4.0 user ls |  awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$rs</span>=~<span class="variable">$AK</span> &amp;&amp; <span class="variable">$rs</span>=~<span class="variable">$SK</span> &amp;&amp; <span class="variable">$rs</span>=~<span class="variable">$account</span> ]]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"Config OK..."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Starting AK、SK Config..."</span></span><br><span class="line">./qshell-windows-x64-v2.4.0 account ak sk name</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"account: <span class="variable">$account</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"AK is : <span class="variable">$AK</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"SK is: <span class="variable">$SK</span>"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ !<span class="string">"<span class="variable">$sourcebucket</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"please input sourcebucket:"</span></span><br><span class="line"><span class="built_in">read</span> sourcebucket</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [[ !<span class="string">"<span class="variable">$desbucket</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"please input desbucket:"</span></span><br><span class="line"><span class="built_in">read</span> desbucket</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列举当前需要复制bucket数据</span></span><br><span class="line">./qshell-windows-x64-v2.4.0 listbucket <span class="variable">$sourcebucket</span> -o cp.txt</span><br><span class="line"><span class="comment"># 生成文件列表</span></span><br><span class="line">cat cp.txt | awk <span class="string">'&#123;print $1&#125;'</span> &gt; cpp.txt</span><br><span class="line"></span><br><span class="line">size=$(du -sb cpp.txt|cut -f1)</span><br><span class="line"><span class="keyword">if</span> [[ size &lt;=0 ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">"cpp.txt size is 0KB"</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始批量迁移</span></span><br><span class="line">./qshell-windows-x64-v2.4.0 batchcopy <span class="variable">$sourcebucket</span> <span class="variable">$desbucket</span> -i cpp.txt</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"==============transfer bucket From <span class="variable">$sourcebucket</span> to <span class="variable">$desbucket</span> success=============================="</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"=============================transfer bucket failed,please try again=================================="</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="执行迁移"><a href="#执行迁移" class="headerlink" title="执行迁移"></a>执行迁移</h3><ol><li>将上述代码保存batchcopy.sh，并赋予可执行权限；</li><li>执行./batchcopy.sh  你的七牛云账户名</li><li>之后按输入提示输入AK、SK、源bucket、目标bucket即可完成迁移操作。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​       经常看别人的shell脚本，自己从来也没写过，这是是第一次写脚本，多少可能有些bug。后续发现了会及时更正他。总之还是多学多实践一下没坏处。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://developer.qiniu.com/kodo/tools/1302/qshell" target="_blank" rel="noopener">七牛云对象存储迁移文档</a></li><li><a href="https://blog.csdn.net/netdxy/article/details/50506741" target="_blank" rel="noopener">七牛云对象存储空间迁移详解</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="实用工具及技巧" scheme="http://ltyeamin.github.io/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>跨平台办公利器-uTools</title>
    <link href="http://ltyeamin.github.io/2019/10/12/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%8A%9E%E5%85%AC%E5%88%A9%E5%99%A8-uTools/"/>
    <id>http://ltyeamin.github.io/2019/10/12/跨平台办公利器-uTools/</id>
    <published>2019-10-12T14:40:10.000Z</published>
    <updated>2019-11-09T03:44:53.969Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>之前习惯了Mac Pro 的Spotlight模式进行检索应用和文件，在前段日子中，我成功的找到了一款Windows上类似的软件Everything+Wox，仍在使用Windows的朋友有兴趣可以看我阅读这边<a href="http://blog.yeamin.top/2019/06/03/Windows%E6%90%9C%E7%B4%A2%E5%88%A9%E5%99%A8/" target="_blank" rel="noopener">文章</a>进行操作体验。</p><p>言归正传，我在家使用的电脑系统是Deepin Linux,曾经也想找到这种款速检索工具，但是找了很长时间却没有找到。</p><p>今天我偶尔在深度应用商店发现一款名叫utools的软件，类似于Spotlight模式。</p><p>于是我打开官网，官网是这样介绍的：</p><blockquote><p>你的生产力工具集<br>uTools是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。<br>当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。</p></blockquote><p>uTools是跨平台的软件,同时支持Windows、Mac、Linux等平台，不同平台稍微有些差别。Linux平台没有文件检索，这点是很遗憾的，但是笔者相信开发者后续会慢慢完善。</p><h2 id="utools常用体验"><a href="#utools常用体验" class="headerlink" title="utools常用体验"></a>utools常用体验</h2><h3 id="插件中心"><a href="#插件中心" class="headerlink" title="插件中心"></a>插件中心</h3><p><img src="https://www.u.tools/assets/img/section/1.png" alt="插件中心"></p><h3 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h3><p><img src="https://www.u.tools/assets/img/section/2.png" alt="快速启动"></p><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>注意：仅支持Windows和Mac平台，Linux平台下会很快开发</p><p>  图略</p><h3 id="自动识别"><a href="#自动识别" class="headerlink" title="自动识别"></a>自动识别</h3><p><img src="https://www.u.tools/assets/img/section/3.png" alt="自动识别"></p><h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><p><img src="https://www.u.tools/assets/img/section/4.png" alt="数据同步"></p><h3 id="Http抓包"><a href="#Http抓包" class="headerlink" title="Http抓包"></a>Http抓包</h3><p>  图略</p><h3 id="剪贴板"><a href="#剪贴板" class="headerlink" title="剪贴板"></a>剪贴板</h3><p>  图略</p><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><p>  图略</p><h3 id="hosts切换"><a href="#hosts切换" class="headerlink" title="hosts切换"></a>hosts切换</h3><p>  图略</p><h3 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h3><p>  图略</p><h3 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h3><p>  图略</p><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>  图略</p><h2 id="相关站点"><a href="#相关站点" class="headerlink" title="相关站点"></a>相关站点</h2><ul><li>官网地址：<a href="https://www.u.tools/" target="_blank" rel="noopener">https://www.u.tools/</a></li><li>官网下载地址：<a href="https://www.u.tools/download.html" target="_blank" rel="noopener">https://www.u.tools/download.html</a></li><li>使用文档地址:  <a href="https://www.u.tools/docs/guide/about-uTools.html" target="_blank" rel="noopener">https://www.u.tools/docs/guide/about-uTools.html</a></li><li>讨论社区:  <a href="https://yuanliao.info/" target="_blank" rel="noopener">https://yuanliao.info/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="实用工具及技巧" scheme="http://ltyeamin.github.io/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>【Python爬虫】使用Requests库爬取猫眼电影TOP100数据</title>
    <link href="http://ltyeamin.github.io/2019/10/12/%E3%80%90Python%E7%88%AC%E8%99%AB%E3%80%91%E4%BD%BF%E7%94%A8Requests%E5%BA%93%E7%88%AC%E5%8F%96%E7%8C%AB%E7%9C%BC%E7%94%B5%E5%BD%B1TOP100%E6%95%B0%E6%8D%AE/"/>
    <id>http://ltyeamin.github.io/2019/10/12/【Python爬虫】使用Requests库爬取猫眼电影TOP100数据/</id>
    <published>2019-10-12T12:23:11.000Z</published>
    <updated>2019-11-09T03:25:49.482Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="爬虫分析"><a href="#爬虫分析" class="headerlink" title="爬虫分析"></a>爬虫分析</h2><h3 id="爬虫需求"><a href="#爬虫需求" class="headerlink" title="爬虫需求"></a>爬虫需求</h3><p>描述: 爬取猫眼电影TOP100的电影名称、时间、评分、海报图片等信息</p><p>站点:  <a href="https://maoyan.com/board/4" target="_blank" rel="noopener">https://maoyan.com/board/4</a></p><p>分析: 打开站点即是猫眼电影TOP100的第一页,点击下一页，我们观察地址栏URL后边追加了?offset=10的参数，显然offset参数代表偏移量，offset=10表示第一页，offset=20表示第二页，由此可推，若偏移量未n，则电影序号就是n+1到n+10，每页显示10个。因此，想要获取TOP100，要分开请求10次，而10次的offset参数值分别设置为0、10、20…90即可，这样获取不同的页面之后，再通过任意一个的解析器提取相关的数据即可完成。</p><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><h3 id="利用正则进行解析"><a href="#利用正则进行解析" class="headerlink" title="利用正则进行解析"></a>利用正则进行解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin python3.6</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@File    : __init__.py.py</span></span><br><span class="line"><span class="string">@Description : 利用requests库和lxml解析库爬取猫眼电影TOP100数据</span></span><br><span class="line"><span class="string">@Author  : tong.li</span></span><br><span class="line"><span class="string">@Email   : lt_alex@163.com</span></span><br><span class="line"><span class="string">@Blog    : http://blog.yeamin.top</span></span><br><span class="line"><span class="string">@Time    : 2019/10/12 下午8:31</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 设置请求头</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span> : <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            text = response.text</span><br><span class="line">            <span class="comment"># 获取电影排名、海报、名称、主演、发布时间、评分</span></span><br><span class="line">            regx = re.compile(<span class="string">'&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src="(.*?)".*?name.*?a.*?&gt;(.*?)&lt;/a&gt;'</span></span><br><span class="line">                              <span class="string">'.*?star.*?&gt;.*?：(.*?)\s*&lt;/p&gt;.*?releasetime.*?&gt;.*?：(.*?)&lt;/p&gt;.*?integer.*?&gt;(.*?)&lt;/i&gt;'</span></span><br><span class="line">                              <span class="string">'.*?fraction.*?&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;'</span>, re.S)</span><br><span class="line">            items = re.findall(regx, text)</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">                <span class="keyword">yield</span> &#123;</span><br><span class="line">                    <span class="string">'index'</span>: item[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">'name'</span>: item[<span class="number">2</span>],</span><br><span class="line">                    <span class="string">'actor'</span>: item[<span class="number">3</span>],</span><br><span class="line">                    <span class="string">'post_img'</span>: item[<span class="number">1</span>],</span><br><span class="line">                    <span class="string">'time'</span>: item[<span class="number">4</span>],</span><br><span class="line">                    <span class="string">'score'</span>: item[<span class="number">5</span>]+item[<span class="number">6</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">return</span> items</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储:文件/数据库</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store</span><span class="params">(text,filename)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(str(text) + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getData</span><span class="params">(url)</span>:</span></span><br><span class="line">    datas = request_page(url)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">        <span class="comment"># 控制台打印数据</span></span><br><span class="line">        print(data)</span><br><span class="line">        <span class="comment"># 将数据写入txt纯文本文件中</span></span><br><span class="line">        store(data,<span class="string">'result.txt'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 猫眼电影TOP100榜单</span></span><br><span class="line">    url = <span class="string">'https://maoyan.com/board/4?offset='</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        getData(url + str(i * <span class="number">10</span>))</span><br><span class="line">        <span class="comment"># 猫眼电影有反爬虫限制,爬的太多会有IP或验证码限制,等待0.5毫秒再次请求</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h3 id="利用xlml及Xpath解析"><a href="#利用xlml及Xpath解析" class="headerlink" title="利用xlml及Xpath解析"></a>利用xlml及Xpath解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin python3.6</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@File    : __init__.py.py</span></span><br><span class="line"><span class="string">@Description : 利用requests库和lxml解析库爬取猫眼电影TOP100数据</span></span><br><span class="line"><span class="string">@Author  : tong.li</span></span><br><span class="line"><span class="string">@Email   : lt_alex@163.com</span></span><br><span class="line"><span class="string">@Blog    : http://blog.yeamin.top</span></span><br><span class="line"><span class="string">@Time    : 2019/10/12 下午8:31</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 设置请求头</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            text = response.text</span><br><span class="line">            <span class="keyword">return</span> text</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dealData</span><span class="params">(items)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'index'</span>: item[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'name'</span>: item[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'actor'</span>: item[<span class="number">2</span>].strip(),</span><br><span class="line">            <span class="string">'time'</span>: item[<span class="number">3</span>][<span class="number">5</span>:],</span><br><span class="line">            <span class="string">'score'</span>: item[<span class="number">4</span>] + item[<span class="number">5</span>],</span><br><span class="line">            <span class="string">'post_img'</span>: item[<span class="number">6</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> items</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="comment"># 猫眼电影TOP100榜单</span></span><br><span class="line">        url = <span class="string">'https://maoyan.com/board/4?offset='</span>+ str(i * <span class="number">10</span>)</span><br><span class="line">        html = etree.HTML(request_page(url))</span><br><span class="line">        indexs = html.xpath(<span class="string">'//*[@id="app"]/div/div/div[1]/dl/dd/i/text()'</span>)</span><br><span class="line">        name = html.xpath(<span class="string">'//*[@id="app"]/div/div/div[1]/dl/dd/div/div/div[1]/p[1]/a/text()'</span>)</span><br><span class="line">        actor = html.xpath(<span class="string">'//*[@id="app"]/div/div/div[1]/dl/dd/div/div/div[1]/p[2]/text()'</span>)</span><br><span class="line">        times = html.xpath(<span class="string">'//*[@id="app"]/div/div/div[1]/dl/dd/div/div/div[1]/p[3]/text()'</span>)</span><br><span class="line">        score1 = html.xpath(<span class="string">'//*[@id="app"]/div/div/div[1]/dl/dd/div/div/div[2]/p/i[1]/text()'</span>)</span><br><span class="line">        score2 = html.xpath(<span class="string">'//*[@id="app"]/div/div/div[1]/dl/dd/div/div/div[2]/p/i[2]/text()'</span>)</span><br><span class="line">        <span class="comment"># 取图片地址的时候发现问题,打开浏览器F12控制台,在Element看到的img标签图片地址属性名为src,</span></span><br><span class="line">        <span class="comment"># 但是在Source下看到的属性名是data-src,原因可能是浏览器对JavaScript代码进行了渲染</span></span><br><span class="line">        images = html.xpath(<span class="string">'//*[@class="board-img"]/@data-src'</span>)</span><br><span class="line">        datas = zip(indexs,name,actor,times,score1,score2,images)</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> dealData(datas):</span><br><span class="line">            print(data)</span><br><span class="line">        <span class="comment"># 猫眼电影有反爬虫限制,爬的太多会有IP或验证码限制,等待0.5毫秒再次请求</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h2 id="爬取结果"><a href="#爬取结果" class="headerlink" title="爬取结果"></a>爬取结果</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">&#123;'index': '1', 'name': '霸王别姬', 'actor': '主演：张国荣,张丰毅,巩俐', 'time': '1993-07-26', 'score': '9.5', 'post_img': 'https://p1.meituan.net/movie/20803f59291c47e1e116c11963ce019e68711.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '2', 'name': '肖申克的救赎', 'actor': '主演：蒂姆·罗宾斯,摩根·弗里曼,鲍勃·冈顿', 'time': '1994-09-10(加拿大)', 'score': '9.5', 'post_img': 'https://p0.meituan.net/movie/283292171619cdfd5b240c8fd093f1eb255670.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '3', 'name': '罗马假日', 'actor': '主演：格利高里·派克,奥黛丽·赫本,埃迪·艾伯特', 'time': '1953-09-02(美国)', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/289f98ceaa8a0ae737d3dc01cd05ab052213631.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '4', 'name': '这个杀手不太冷', 'actor': '主演：让·雷诺,加里·奥德曼,娜塔莉·波特曼', 'time': '1994-09-14(法国)', 'score': '9.5', 'post_img': 'https://p1.meituan.net/movie/6bea9af4524dfbd0b668eaa7e187c3df767253.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '5', 'name': '泰坦尼克号', 'actor': '主演：莱昂纳多·迪卡普里奥,凯特·温丝莱特,比利·赞恩', 'time': '1998-04-03', 'score': '9.5', 'post_img': 'https://p1.meituan.net/movie/b607fba7513e7f15eab170aac1e1400d878112.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '6', 'name': '唐伯虎点秋香', 'actor': '主演：周星驰,巩俐,郑佩佩', 'time': '1993-07-01(中国香港)', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/da64660f82b98cdc1b8a3804e69609e041108.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '7', 'name': '魂断蓝桥', 'actor': '主演：费雯·丽,罗伯特·泰勒,露塞尔·沃特森', 'time': '1940-05-17(美国)', 'score': '9.2', 'post_img': 'https://p0.meituan.net/movie/46c29a8b8d8424bdda7715e6fd779c66235684.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '8', 'name': '乱世佳人', 'actor': '主演：费雯·丽,克拉克·盖博,奥利维娅·德哈维兰', 'time': '1939-12-15(美国)', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/223c3e186db3ab4ea3bb14508c709400427933.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '9', 'name': '天空之城', 'actor': '主演：寺田农,鹫尾真知子,龟山助清', 'time': '1992-05-01', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/ba1ed511668402605ed369350ab779d6319397.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '10', 'name': '辛德勒的名单', 'actor': '主演：连姆·尼森,拉尔夫·费因斯,本·金斯利', 'time': '1993-12-15(美国)', 'score': '9.2', 'post_img': 'https://p0.meituan.net/movie/b0d986a8bf89278afbb19f6abaef70f31206570.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '11', 'name': '音乐之声', 'actor': '主演：朱莉·安德鲁斯,克里斯托弗·普卢默,埃琳诺·帕克', 'time': '1965-03-02(美国)', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/6bc004d57358ee6875faa5e9a1239140128550.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '12', 'name': '喜剧之王', 'actor': '主演：周星驰,莫文蔚,张柏芝', 'time': '1999-02-13(中国香港)', 'score': '9.1', 'post_img': 'https://p1.meituan.net/movie/18e3191039d5e71562477659301f04aa61905.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '13', 'name': '大闹天宫', 'actor': '主演：邱岳峰,毕克,富润生', 'time': '1965-12-31', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/14a7b337e8063e3ce05a5993ed80176b74208.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '14', 'name': '春光乍泄', 'actor': '主演：张国荣,梁朝伟,张震', 'time': '1997-05-30(中国香港)', 'score': '9.2', 'post_img': 'https://p0.meituan.net/movie/ae7245920d95c03765fe1615f3a1fe3865785.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '15', 'name': '剪刀手爱德华', 'actor': '主演：约翰尼·德普,薇诺娜·瑞德,黛安·韦斯特', 'time': '1990-12-06(美国)', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/6a964e9cee699267053bd6a4bf6f2671195394.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '16', 'name': '美丽人生', 'actor': '主演：罗伯托·贝尼尼,尼可莱塔·布拉斯基,乔治·坎塔里尼', 'time': '1997-12-20(意大利)', 'score': '9.3', 'post_img': 'https://p0.meituan.net/movie/43d259ecbcd53e8bbe902632772281d6327525.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '17', 'name': '黑客帝国', 'actor': '主演：基努·里维斯,凯瑞-安·莫斯,劳伦斯·菲什伯恩', 'time': '2000-01-14', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/ad974d3527879f00be2eec29135118163728582.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '18', 'name': '哈利·波特与魔法石', 'actor': '主演：丹尼尔·雷德克里夫,鲁伯特·格林特,艾玛·沃特森', 'time': '2002-01-26', 'score': '9.1', 'post_img': 'https://p1.meituan.net/movie/aacb9ed2a6601bfe515ef0970add1715623792.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '19', 'name': '指环王3：王者无敌', 'actor': '主演：伊莱贾·伍德,伊恩·麦克莱恩,丽芙·泰勒', 'time': '2004-03-15', 'score': '9.2', 'post_img': 'https://p0.meituan.net/movie/932bdfbef5be3543e6b136246aeb99b8123736.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '20', 'name': '无间道', 'actor': '主演：刘德华,梁朝伟,黄秋生', 'time': '2003-09-05', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/606de8f394d40dbcbb9b87943fec71a2130408.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '21', 'name': '蝙蝠侠：黑暗骑士', 'actor': '主演：克里斯蒂安·贝尔,希斯·莱杰,阿伦·伊克哈特', 'time': '2008-07-18(美国)', 'score': '9.3', 'post_img': 'https://p0.meituan.net/movie/09658109acfea0e248a63932337d8e6a4268980.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '22', 'name': '楚门的世界', 'actor': '主演：金·凯瑞,劳拉·琳妮,诺亚·艾默里奇', 'time': '1998-06-01(美国)', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/8959888ee0c399b0fe53a714bc8a5a17460048.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '23', 'name': '加勒比海盗', 'actor': '主演：约翰尼·德普,凯拉·奈特莉,奥兰多·布鲁姆', 'time': '2003-11-21', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/b05b94b28eca53f325ae8d807fcd4ce01798036.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '24', 'name': '教父2', 'actor': '主演：阿尔·帕西诺,罗伯特·德尼罗,黛安·基顿', 'time': '1974-12-12(美国)', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/bb1dee5e0b25889a2410211c1d5010ae190824.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '25', 'name': '射雕英雄传之东成西就', 'actor': '主演：张国荣,梁朝伟,张学友', 'time': '1993-02-05(中国香港)', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/53b6f0b66882a53b08896c92076515a8236400.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '26', 'name': '机器人总动员', 'actor': '主演：本·贝尔特,艾丽莎·奈特,杰夫·格尔林', 'time': '2008-06-27(美国)', 'score': '9.3', 'post_img': 'https://p0.meituan.net/movie/267dd2483f0fb57081474c00fbea38451415571.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '27', 'name': '指环王1：护戒使者', 'actor': '主演：伊莱贾·伍德,伊恩·麦克莱恩,丽芙·泰勒', 'time': '2002-04-04', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/dd08154878aac7c8c649fe3eeb8ccd0a2498277.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '28', 'name': '指环王2：双塔奇兵', 'actor': '主演：伊莱贾·伍德,伊恩·麦克莱恩,丽芙·泰勒', 'time': '2003-04-25', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/02bb9fd161c05bad6089133098efcdb5546589.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '29', 'name': '狮子王', 'actor': '主演：马修·布罗德里克,尼基塔·卡兰姆,詹姆斯·厄尔·琼斯', 'time': '1995-07-15', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/27b76fe6cf3903f3d74963f70786001e1438406.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '30', 'name': '活着', 'actor': '主演：葛优,巩俐,牛犇', 'time': '1994-05-18(法国)', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/4c41068ef7608c1d4fbfbe6016e589f7204391.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '31', 'name': '拯救大兵瑞恩', 'actor': '主演：汤姆·汉克斯,马特·达蒙,汤姆·塞兹摩尔', 'time': '1998-11-13', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/a2a287c77415dc1f85b04d288f7d63ab1089754.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '32', 'name': '盗梦空间', 'actor': '主演：莱昂纳多·迪卡普里奥,渡边谦,约瑟夫·高登-莱维特', 'time': '2010-09-01', 'score': '9.2', 'post_img': 'https://p1.meituan.net/movie/2f344a9f9575edbcae9f0abe0578bc90339773.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '33', 'name': '哈尔的移动城堡', 'actor': '主演：倍赏千惠子,木村拓哉,美轮明宏', 'time': '2004-11-20(日本)', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/0127b451d5b8f0679c6f81c8ed414bb2432442.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '34', 'name': '忠犬八公的故事', 'actor': '主演：Forest,理查·基尔,琼·艾伦', 'time': '2010-03-12(英国)', 'score': '9.3', 'post_img': 'https://p0.meituan.net/movie/7787c10ad5e95b03cf83ef9473500d8e282796.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '35', 'name': '疯狂原始人', 'actor': '主演：尼古拉斯·凯奇,艾玛·斯通,瑞安·雷诺兹', 'time': '2013-04-20', 'score': '9.5', 'post_img': 'https://p1.meituan.net/movie/bc022b86345c643ca21d759166f77a553679589.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '36', 'name': '搏击俱乐部', 'actor': '主演：爱德华·哈里森·诺顿,布拉德·皮特,海伦娜·伯翰·卡特', 'time': '1999-10-15(美国)', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/b3defc07dfaa1b6f5b74852ce38a3f8f242792.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '37', 'name': '东邪西毒', 'actor': '主演：张国荣,梁朝伟,刘嘉玲', 'time': '1994-09-17', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/7e471a9171a410ebc9413b2f1de67afc130067.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '38', 'name': '幽灵公主', 'actor': '主演：松田洋治,石田百合子,田中裕子', 'time': '1998-05-01', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/a08f65e6cb50fab32df5da69ff116f593095363.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '39', 'name': '阿凡达', 'actor': '主演：萨姆·沃辛顿,佐伊·索尔达娜,米歇尔·罗德里格兹', 'time': '2010-01-04', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/91f575ec93f019f428d1f33e3ceca7c5115495.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '40', 'name': '风之谷', 'actor': '主演：岛本须美,永井一郎,坂本千夏', 'time': '1992', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/4f9638ba234c3fb673f23a09968db875371576.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '41', 'name': '十二怒汉', 'actor': '主演：亨利·方达,李·科布,马丁·鲍尔萨姆', 'time': '1957-04-13(美国)', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/df15efd261060d3094a73ef679888d4f238149.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '42', 'name': '大话西游之月光宝盒', 'actor': '主演：周星驰,莫文蔚,吴孟达', 'time': '2014-10-24', 'score': '9.6', 'post_img': 'https://p0.meituan.net/movie/92eb862c42c49f8e41e459c369c4512b226610.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '43', 'name': 'V字仇杀队', 'actor': '主演：娜塔莉·波特曼,雨果·维文,斯蒂芬·瑞', 'time': '2006-03-17(美国)', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/06ec3c1c647942b1e40bca84036014e9490863.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '44', 'name': '放牛班的春天', 'actor': '主演：热拉尔·朱尼奥,让-巴蒂斯特·莫尼耶,玛丽·布奈尔', 'time': '2004-10-16', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/70de97ebb6b5251ecb7c3f6d7a782a7f189340.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '45', 'name': '当幸福来敲门', 'actor': '主演：威尔·史密斯,贾登·史密斯,坦迪·牛顿', 'time': '2008-01-17', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/5896de3c1474277730e321c9b1db04a9205644.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '46', 'name': '速度与激情5', 'actor': '主演：范·迪塞尔,保罗·沃克,道恩·强森', 'time': '2011-05-12', 'score': '9.2', 'post_img': 'https://p0.meituan.net/movie/845ce32778a1b3f258de089f91a3979b5766154.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '47', 'name': '驯龙高手', 'actor': '主演：杰伊·巴鲁切尔,杰拉德·巴特勒,亚美莉卡·费雷拉', 'time': '2010-05-14', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/b0d97e4158b47d653d7a81d66f7dd3092146907.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '48', 'name': '勇敢的心', 'actor': '主演：梅尔·吉布森,苏菲·玛索,帕特里克·麦高汉', 'time': '1995-05-24(美国)', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/f8e9d5a90224746d15dfdbd53d4fae3d209420.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '49', 'name': '闻香识女人', 'actor': '主演：阿尔·帕西诺,克里斯·奥唐纳,加布里埃尔·安瓦尔', 'time': '1992-12-23(美国)', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/8d7b0b902afd4ec1a3dd7a9c6149463c187734.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '50', 'name': '神偷奶爸', 'actor': '主演：史蒂夫·卡瑞尔,杰森·席格尔,拉塞尔·布兰德', 'time': '2010-07-09(美国)', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/85c2bfba6025bfbfb53291ae5924c215308805.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '51', 'name': '黑客帝国3：矩阵革命', 'actor': '主演：基努·里维斯,雨果·维文,凯瑞-安·莫斯', 'time': '2003-11-05', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/2e383b5f5f306f10f9f26d9f1c28cf1d825537.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '52', 'name': '飞屋环游记', 'actor': '主演：爱德华·阿斯纳,乔丹·长井,鲍勃·彼德森', 'time': '2009-08-04', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/47dd790e19dad72b50580641de5608c5199014.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '53', 'name': '断背山', 'actor': '主演：希斯·莱杰,杰克·吉伦哈尔,米歇尔·威廉姆斯', 'time': '2006-01-13(美国)', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/e71affe126eeb4f8bfcc738cbddeebc8288766.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '54', 'name': '怦然心动', 'actor': '主演：玛德琳·卡罗尔,卡兰·麦克奥利菲,艾丹·奎因', 'time': '2010-08-06(美国)', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/15f1ac49b6d1ff7b71207672993ed6901536456.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '55', 'name': '三傻大闹宝莱坞', 'actor': '主演：阿米尔·汗,黄渤,卡琳娜·卡普', 'time': '2011-12-08', 'score': '9.1', 'post_img': 'https://p1.meituan.net/movie/ca4a128a5a54d5b5e35ceba622636c831810197.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '56', 'name': '末代皇帝', 'actor': '主演：尊龙,陈冲,彼得·奥图尔', 'time': '1987-10-23', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/21b9211eb1094af360842472018db634286646.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '57', 'name': '无敌破坏王', 'actor': '主演：约翰·C·赖利,萨拉·西尔弗曼,简·林奇', 'time': '2012-11-06', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/fcc17667b8343131101eeb4c67d90bf9150883.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '58', 'name': '致命魔术', 'actor': '主演：休·杰克曼,克里斯蒂安·贝尔,迈克尔·凯恩', 'time': '2006-10-20(美国)', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/75c0d3eb584be030a01f2e26741a8f41251454.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '59', 'name': '少年派的奇幻漂流', 'actor': '主演：苏拉·沙玛,伊尔凡·可汗,塔布', 'time': '2012-11-22', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/34998e31c6d07475f1add6b8b16fd21d192579.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '60', 'name': '鬼子来了', 'actor': '主演：姜文,姜宏波,陈强', 'time': '2000-05-12(法国戛纳)', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/0b507aa44c4dfbbcc91949b69b1b39a168922.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '61', 'name': '蝙蝠侠：黑暗骑士崛起', 'actor': '主演：克里斯蒂安·贝尔,迈克尔·凯恩,加里·奥德曼', 'time': '2012-08-27', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/96bb58f3e9d213fb0438987d16d27561379209.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '62', 'name': '美丽心灵', 'actor': '主演：罗素·克洛,詹妮弗·康纳利,艾德·哈里斯', 'time': '2001-12-21(美国)', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/7b7d1f8aa36d7a15463ce6942708a1a7265296.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '63', 'name': '哈利·波特与死亡圣器（下）', 'actor': '主演：丹尼尔·雷德克里夫,鲁伯特·格林特,艾玛·沃特森', 'time': '2011-08-04', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/bb0eca029cd25329776a4549b3fbe262924727.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '64', 'name': '倩女幽魂', 'actor': '主演：张国荣,王祖贤,午马', 'time': '2011-04-30', 'score': '9.2', 'post_img': 'https://p1.meituan.net/movie/96d98200d2afb4b87ff189f9c15b6545568339.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '65', 'name': '夜访吸血鬼', 'actor': '主演：汤姆·克鲁斯,布拉德·皮特,克尔斯滕·邓斯特', 'time': '1994-11-11(美国)', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/7ec873ba943f13e3c63789d899bd0e23256871.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '66', 'name': '钢琴家', 'actor': '主演：艾德里安·布洛迪,艾米莉娅·福克斯,米哈乌·热布罗夫斯基', 'time': '2002-09-25(法国)', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/484171372de45945e8bbbcc97db57e09136701.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '67', 'name': '触不可及', 'actor': '主演：弗朗索瓦·克鲁塞,奥玛·希,安娜·勒尼', 'time': '2011-11-02(法国)', 'score': '9.1', 'post_img': 'https://p1.meituan.net/movie/1e700e53e4fe29dd5942381bb353c8532239179.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '68', 'name': '本杰明·巴顿奇事', 'actor': '主演：布拉德·皮特,凯特·布兰切特,塔拉吉·P·汉森', 'time': '2008-12-25(美国)', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/2526f77c650bf7cf3d5ee2dccdeac332244951.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '69', 'name': '甜蜜蜜', 'actor': '主演：黎明,张曼玉,曾志伟', 'time': '2015-02-13', 'score': '9.2', 'post_img': 'https://p1.meituan.net/movie/0b0d45b58946078dd24d4945dd6be3b51329411.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '70', 'name': '大话西游之大圣娶亲', 'actor': '主演：周星驰,朱茵,莫文蔚', 'time': '2014-10-24', 'score': '8.8', 'post_img': 'https://p1.meituan.net/moviemachine/508056769092059fe43a611b949f27d14863831.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '71', 'name': '初恋这件小事', 'actor': '主演：马里奥·毛瑞尔,平采娜·乐维瑟派布恩,阿查拉那·阿瑞亚卫考', 'time': '2012-06-05', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/7ed07b8ea8c0e0d0c7b685d20e3ec64e232004.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '72', 'name': '熔炉', 'actor': '主演：孔刘,郑有美,金智英', 'time': '2011-09-22(韩国)', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/2a0783b4fd95566568f24adfad2181bb5392280.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '73', 'name': '新龙门客栈', 'actor': '主演：张曼玉,梁家辉,甄子丹', 'time': '2012-02-24', 'score': '8.8', 'post_img': 'https://p1.meituan.net/movie/7833126c8c21a11571bb52fbdece0acb811449.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '74', 'name': '素媛', 'actor': '主演：李来,薛耿求,严志媛', 'time': '2013-10-02(韩国)', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/19653e8af59cf473cd40f9ccc0658d93692304.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '75', 'name': '小鞋子', 'actor': '主演：默罕默德·阿米尔·纳吉,Kamal Mirkarimi,Behzad Rafi', 'time': '1999-01-22(美国)', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/135c612860fae899df2220149664d97a173555.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '76', 'name': '萤火之森', 'actor': '主演：内山昂辉,佐仓绫音,后藤弘树', 'time': '2011-09-17(日本)', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/5420be40e3b755ffe04779b9b199e935256906.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '77', 'name': '教父', 'actor': '主演：马龙·白兰度,阿尔·帕西诺,詹姆斯·肯恩', 'time': '2015-04-18', 'score': '9.3', 'post_img': 'https://p0.meituan.net/movie/1199dc6273680f175fd9b06c9c36d08a219658.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '78', 'name': '穿条纹睡衣的男孩', 'actor': '主演：阿沙·巴特菲尔德,维拉·法梅加,大卫·休里斯', 'time': '2008-09-12(英国)', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/d5970e36c8868a4b746c80f3b3f8a404174615.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '79', 'name': '时空恋旅人', 'actor': '主演：瑞秋·麦克亚当斯,多姆纳尔·格里森,比尔·奈伊', 'time': '2013-09-04(英国)', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/4abc8c932cfacfc0089e2883765d02d1295222.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '80', 'name': '窃听风暴', 'actor': '主演：乌尔里希·穆埃,塞巴斯蒂安·科赫,马蒂娜·格德克', 'time': '2006-03-23(德国)', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/3985eaf3858bea0f2a3d966bf7ee2103178217.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '81', 'name': '7号房的礼物', 'actor': '主演：柳承龙,郑镇荣,朴信惠', 'time': '2013-01-23(韩国)', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/6a6e74b2c289f9fa4433dd2dc04a7741331638.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '82', 'name': '恐怖直播', 'actor': '主演：河正宇,李璟荣,李大为', 'time': '2013-07-31(韩国)', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/b5ff0216e689b3fcc065590c48cd5105255305.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '83', 'name': '海豚湾', 'actor': '主演：里克·奥巴瑞,路易·西霍尤斯,哈迪·琼斯', 'time': '2009-07-31(美国)', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/7373dbba07b50ce6f24336edb96b2ea4271536.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '84', 'name': '忠犬八公物语', 'actor': '主演：仲代达矢,春川真澄,井川比佐志', 'time': '1987-08-01(日本)', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/c835b3588d0061ed3b992388a0a96f15160913.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '85', 'name': '上帝之城', 'actor': '主演：亚历桑德雷·罗德里格斯,艾莉丝·布拉加,莱安德鲁·菲尔米诺', 'time': '2002-08-30(巴西)', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/b553d13f30100db731ab6cf45668e52d94703.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '86', 'name': '辩护人', 'actor': '主演：宋康昊,郭度沅,吴达洙', 'time': '2013-12-18(韩国)', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/8fabf3894b7d12d3d2f6e66404813670265761.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '87', 'name': '美国往事', 'actor': '主演：罗伯特·德尼罗,詹姆斯·伍兹,伊丽莎白·麦戈文', 'time': '2015-04-23', 'score': '9.1', 'post_img': 'https://p1.meituan.net/movie/92198a6fc8c3f5d13aa1bdf203572c0f99438.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '88', 'name': '完美的世界', 'actor': '主演：凯文·科斯特纳,克林特·伊斯特伍德,T·J·劳瑟', 'time': '1993-11-24(美国)', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/30310858fdab34c7a17cfd7ec8ad8bfc112201.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '89', 'name': '七武士', 'actor': '主演：三船敏郎,志村乔,千秋实', 'time': '1954-04-26(日本)', 'score': '9.1', 'post_img': 'https://p1.meituan.net/movie/4ffca83fd972f71e291f8ea8d78a4b58594878.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '90', 'name': '一一', 'actor': '主演：吴念真,金燕玲,李凯莉', 'time': '2000-09-20(法国)', 'score': '8.9', 'post_img': 'https://p1.meituan.net/movie/2c0a5fedf4b43d142121b91c6ccabe1b59051.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '91', 'name': '英雄本色', 'actor': '主演：狄龙,张国荣,周润发', 'time': '2017-11-17', 'score': '9.2', 'post_img': 'https://p0.meituan.net/movie/3e5f5f3aa4b7e5576521e26c2c7c894d253975.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '92', 'name': '阿飞正传', 'actor': '主演：张国荣,张曼玉,刘德华', 'time': '2018-06-25', 'score': '8.8', 'post_img': 'https://p0.meituan.net/movie/885fc379c614a2b4175587b95ac98eb95045650.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '93', 'name': '爱·回家', 'actor': '主演：俞承豪,金艺芬,童孝熙', 'time': '2002-04-05(韩国)', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/36a893c53a13f9bb934071b86ae3b5c492427.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '94', 'name': '海洋', 'actor': '主演：雅克·贝汉,姜文,兰斯洛特·佩林', 'time': '2011-08-12', 'score': '9.0', 'post_img': 'https://p0.meituan.net/movie/0018b57299d0d4540330a31244c880a9112971.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '95', 'name': '我爱你', 'actor': '主演：宋在浩,李顺才,尹秀晶', 'time': '2011-02-17(韩国)', 'score': '9.0', 'post_img': 'https://p1.meituan.net/movie/ed50b58bf636d207c56989872a91f4cf305138.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '96', 'name': '黄金三镖客', 'actor': '主演：克林特·伊斯特伍德,李·范·克里夫,埃里·瓦拉赫', 'time': '1966-12-23(意大利)', 'score': '8.9', 'post_img': 'https://p0.meituan.net/movie/cd18ed2c5cda9e71e17e5e6ef61ced172912303.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '97', 'name': '迁徙的鸟', 'actor': '主演：雅克·贝汉,Philippe Labro', 'time': '2001-12-12(法国)', 'score': '9.1', 'post_img': 'https://p1.meituan.net/movie/a1634f4e49c8517ae0a3e4adcac6b0dc43994.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '98', 'name': '千与千寻', 'actor': '主演：柊瑠美,周冬雨,入野自由', 'time': '2019-06-21', 'score': '9.3', 'post_img': 'https://p0.meituan.net/movie/30b20139e68c46d02e0893277d633b701292458.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '99', 'name': '天堂电影院', 'actor': '主演：菲利浦·诺瓦雷,赛尔乔·卡斯特利托,蒂兹亚娜·罗达托', 'time': '2019-06-15', 'score': '9.2', 'post_img': 'https://p0.meituan.net/movie/76fc92cfa6c8f2959431b8aa604ef7ae126414.jpg@160w_220h_1e_1c'&#125;</span><br><span class="line">&#123;'index': '100', 'name': '龙猫', 'actor': '主演：秦岚,糸井重里,岛本须美', 'time': '2018-12-14', 'score': '9.1', 'post_img': 'https://p0.meituan.net/movie/c304c687e287c7c2f9e22cf78257872d277201.jpg@160w_220h_1e_1c'&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实还可以利用其他解析库进行解析，比如Beautiful Soup 4和PyQuery库,这两个库相比正则和Xpath解析轻巧简单，但是相比之下性能会有所牺牲。</p><p> Beautiful Soup 4 解析库对XMl文档的宽容度不好，在当下的互联网环境下，网站结构开发、升级和维护变的很复杂，对于一些不规范的网站而言，解析会有问题，而lxml解决了该问题。另外， Beautiful Soup 4 解析时候会将所有的XMl节点加载到内存中形成DOM树，性能相比正则下降了很多。</p><p>PyQuery解析库，其实语法结构其实就是由JavaScript的JQuery库演变而来的，该库CSS选择器支持性特别好，熟练使用JQuery的朋友也必定会使用该会。</p><p>因为我本人不喜欢用这个Beautiful Soup 4 库，所以不打算深入研究，另外,PyQuery和JQuery操作类似，我在本文也不做累述。若有读者对该库感兴趣可自行研究。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="backend" scheme="http://ltyeamin.github.io/categories/backend/"/>
    
    
      <category term="Python" scheme="http://ltyeamin.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Nginx设置黑白名单</title>
    <link href="http://ltyeamin.github.io/2019/09/02/Nginx%E8%AE%BE%E7%BD%AE%E9%BB%91%E7%99%BD%E5%90%8D%E5%8D%95/"/>
    <id>http://ltyeamin.github.io/2019/09/02/Nginx设置黑白名单/</id>
    <published>2019-09-02T10:15:00.000Z</published>
    <updated>2020-01-08T13:06:29.422Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在日常运维工作中，会碰到这样的需求，对于一些http请求只对某些ip开发，其他的ip的客户端都不能访问。</p><p>在测试之前我列一下本次测试的终端IP。</p><p>宿主机Deepin Linux ： 192.168.1.106</p><p>虚拟机Windows 10 :   192.168.1.107</p><p>移动Android终端机 MIUI10: 192.168.1.100</p><p>Nginx是在Deepin部署的，现在我们启动Nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>1启动后，在宿主机随便访问一个请求(这里是我之前<a href="http://blog.yeamin.top/2018/06/18/%E5%B1%80%E5%9F%9F%E7%BD%91%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E4%B8%8E%E4%B8%8B%E8%BD%BD%E6%9C%8D%E5%8A%A1%E6%96%B0%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener">文章配置</a>的静态图片资源的转发)，比如<a href="http://127.0.0.1或http://192.168.1.106" target="_blank" rel="noopener">http://127.0.0.1或http://192.168.1.106</a></p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20180618001/nginx.png" alt="图片列表"></p><p>此外，我们用Android手机和Windows 10虚拟机同样访问<a href="http://192.168.1.106也能访问到，手机和宿主机是同一个路由器，而虚拟机网络是桥接模式。所以是在同一局域网都能够互通。" target="_blank" rel="noopener">http://192.168.1.106也能访问到，手机和宿主机是同一个路由器，而虚拟机网络是桥接模式。所以是在同一局域网都能够互通。</a></p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20190902001/Android.jpg" alt="Android显示效果"></p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20190902001/Windows10.png" alt="Windows 10 虚拟机效果显示"></p><p>我们让手机无法访问，让虚拟机可以通过。</p><h2 id="利用allow、deny参数进行访问限制"><a href="#利用allow、deny参数进行访问限制" class="headerlink" title="利用allow、deny参数进行访问限制"></a>利用allow、deny参数进行访问限制</h2><ol><li><p>更改nginx.conf。</p> <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">deny</span> <span class="number">192.168.1.100</span>;  <span class="comment">#禁止IP为192.168.1.100访问</span></span><br><span class="line">    <span class="attribute">allow</span> all; <span class="comment"># 除过上述黑名单的限制外，允许其他IP访问</span></span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;             <span class="comment">#开启索引功能  </span></span><br><span class="line">    <span class="attribute">autoindex_exact_size</span> <span class="literal">off</span>; <span class="comment"># 关闭计算文件确切大小（单位bytes），只显示大概大小（单位kb、mb、gb） </span></span><br><span class="line">    <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;   <span class="comment"># 显示本机时间而非 GMT 时间  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>重新加载配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>黑名单限制效果。</p></li></ol><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20190902001/deny.jpg" alt="Android限制访问效果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="Nginx" scheme="http://ltyeamin.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Deepin Linux安装Docker</title>
    <link href="http://ltyeamin.github.io/2019/09/01/Deepin%20Linux%E5%AE%89%E8%A3%85Docker/"/>
    <id>http://ltyeamin.github.io/2019/09/01/Deepin Linux安装Docker/</id>
    <published>2019-09-01T04:45:00.000Z</published>
    <updated>2019-09-13T02:55:05.743Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="普通安装"><a href="#普通安装" class="headerlink" title="普通安装"></a>普通安装</h2><p>一般的Linux(Debian、Unbantu)发行版可以执行以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure><p>但是在Deepin执行这命令会安装失败。</p><p>查阅资料可以找到docker支持的Linux发行版。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">x86_64-centos-7</span><br><span class="line">x86_64-fedora-28</span><br><span class="line">x86_64-fedora-29</span><br><span class="line">x86_64-debian-jessie</span><br><span class="line">x86_64-debian-stretch</span><br><span class="line">x86_64-debian-buster</span><br><span class="line">x86_64-ubuntu-trusty</span><br><span class="line">x86_64-ubuntu-xenial</span><br><span class="line">x86_64-ubuntu-bionic</span><br><span class="line">x86_64-ubuntu-cosmic</span><br><span class="line">s390x-ubuntu-xenial</span><br><span class="line">s390x-ubuntu-bionic</span><br><span class="line">s390x-ubuntu-cosmic</span><br><span class="line">ppc64le-ubuntu-xenial</span><br><span class="line">ppc64le-ubuntu-bionic</span><br><span class="line">ppc64le-ubuntu-cosmic</span><br><span class="line">aarch64-ubuntu-xenial</span><br><span class="line">aarch64-ubuntu-bionic</span><br><span class="line">aarch64-ubuntu-cosmic</span><br><span class="line">aarch64-debian-jessie</span><br><span class="line">aarch64-debian-stretch</span><br><span class="line">aarch64-debian-buster</span><br><span class="line">aarch64-fedora-28</span><br><span class="line">aarch64-fedora-29</span><br><span class="line">aarch64-centos-7</span><br><span class="line">armv6l-raspbian-jessie</span><br><span class="line">armv7l-raspbian-jessie</span><br><span class="line">armv6l-raspbian-stretch</span><br><span class="line">armv7l-raspbian-stretch</span><br><span class="line">armv7l-debian-jessie</span><br><span class="line">armv7l-debian-stretch</span><br><span class="line">armv7l-debian-buster</span><br><span class="line">armv7l-ubuntu-trusty</span><br><span class="line">armv7l-ubuntu-xenial</span><br><span class="line">armv7l-ubuntu-bionic</span><br><span class="line">armv7l-ubuntu-cosmic</span><br></pre></td></tr></table></figure><p>查看了我的系统的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">litong@LT:~$ cat /etc/issue</span><br><span class="line">Deepin GNU/Linux 15.10.2 \n \l</span><br><span class="line">litong@LT:~$ cat /etc/debian_version </span><br><span class="line">9.0</span><br><span class="line">litong@LT:~$ uname -r</span><br><span class="line">4.15.0-29deepin-generic</span><br></pre></td></tr></table></figure><p>这里我的系统是Deepin 15.10.2，而我的Deepin Linux是基于Debian 9.0，即上述的版本x86_64-debian-stretch进行的深度开发，我系统Debian 9.0是sid版的，并不是release版本，所以不是docker官方认证的stable版本，故不支持Deepin Linux。</p><h2 id="Deepin上安装Docker"><a href="#Deepin上安装Docker" class="headerlink" title="Deepin上安装Docker"></a>Deepin上安装Docker</h2><ol><li><p>若以前安装过旧版本则先卸载旧版本，如没有安装过，则跳过；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker.io docker-engine</span><br></pre></td></tr></table></figure></li><li><p>安装docker-ce与密钥管理与下载相关依赖工具；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl python-software-properties software-properties-common</span><br></pre></td></tr></table></figure></li><li><p>下载并安装密匙并验证秘钥，若成功则返回OK；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>如果不成功（docker官方在墙外，需科学上网），则使用国内镜像源将上述命令换成 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/debian/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure></li><li><p>验证秘钥是否安装成功；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">litong@LT:~$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">[sudo] litong 的密码：</span><br><span class="line">pub   rsa4096 2017-02-22 [SCEA]</span><br><span class="line">      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88</span><br><span class="line">uid           [ 未知 ] Docker Release (CE deb) &lt;docker@docker.com&gt;</span><br><span class="line">sub   rsa4096 2017-02-22 [S]</span><br></pre></td></tr></table></figure></li><li><p>安装docker-ce组件；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure></li><li><p>测试是否安装成功；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">litong@LT:~$ docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.2</span><br><span class="line"> API version:       1.40</span><br><span class="line"> Go version:        go1.12.8</span><br><span class="line"> Git commit:        6a30dfca03</span><br><span class="line"> Built:             Thu Aug 29 05:29:49 2019</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          19.03.2</span><br><span class="line">  API version:      1.40 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.12.8</span><br><span class="line">  Git commit:       6a30dfca03</span><br><span class="line">  Built:            Thu Aug 29 05:28:23 2019</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.2.6</span><br><span class="line">  GitCommit:        894b81a4b802e4eb2a91d1ce216b8817763c29fb</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc8</span><br><span class="line">  GitCommit:        425e105d5a03fabd737a126ad93d62a9eeede87f</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.18.0</span><br><span class="line">  GitCommit:        fec3683</span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>普通用户运行docker</p><p>安装docker完成后，普通用户执行docker命令时候，有可能会出现错误提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Got permission denied <span class="keyword">while</span> trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.26/images/json: dial unix /var/run/docker.sock: connect: permission denied</span><br></pre></td></tr></table></figure><p>通过查阅资料，在docker mannual找到解决思路：</p><blockquote><p>Manage Docker as a non-root user<br>The docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root and other users can only access it using sudo. The docker daemon always runs as the root user.<br>If you don’t want to use sudo when you use the docker command, create a Unix group called docker and add users to it. When the docker daemon starts, it makes the ownership of the Unix socket read/writable by the docker group.</p></blockquote><p>大概翻译了一下，意思是：Docker进程使用Unix Socket而不是TCP端口。而默认情况下，Unix socket属于root用户，需要root权限才能访问。</p><p>解决方案：</p><p>docker守护进程启动的时候，会默认赋予名字为docker的用户组读写Unix socket的权限，因此只要创建docker用户组，并将当前用户加入到docker用户组中，那么当前用户就有权限访问Unix socket了，进而也就可以执行docker相关命令。</p><ol><li><p>添加docker用户组，若已由docker组则跳过；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br></pre></td></tr></table></figure></li><li><p>将登陆用户加入到docker用户组中；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -a <span class="variable">$USER</span> docker</span><br></pre></td></tr></table></figure></li><li><p>更新用户组；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newgrp docker</span><br></pre></td></tr></table></figure></li><li><p>测试docker命令是否可以使用sudo正常使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="8"><li><p>使用阿里云docker镜像加速</p><ol><li><p>进入<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/repositories" target="_blank" rel="noopener">阿里云控制台</a>，选择容器镜像服务，左边菜单最下方的镜像中心-镜像加速器；</p></li><li><p>根据阿里云操作文档选择不同系统的镜像加速命令；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"替换你的加速器地址"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="Docker" scheme="http://ltyeamin.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>百度网盘破速解决</title>
    <link href="http://ltyeamin.github.io/2019/08/11/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%A0%B4%E9%80%9F%E8%A7%A3%E5%86%B3/"/>
    <id>http://ltyeamin.github.io/2019/08/11/百度网盘破速解决/</id>
    <published>2019-08-11T14:22:13.000Z</published>
    <updated>2020-01-08T13:06:40.580Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天在家下载一个别人给我的百度网盘资料，资料大小差不多2个G,但是打开浏览器发现有一件是非常烦躁的事情:小文件可以直接在浏览器端进行下载,但是大文件必须下载百度网盘客户端进行下载.</p><p>没办法,我只好去应用商店去下载百度网盘客户端,在深度应用商店还好找到了<a href="https://dstore-appstore.deepin.cn/china/category/internet/baidunetdisk" target="_blank" rel="noopener">百度网盘</a>的客户端(国产Deepin系统第三方软件源还是比较给力)。紧接着我就在客户端端登录下载,如下图:</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20190811001/web.png" alt="百度网盘客户端"></p><p>用了客户端之后发现,下载速度特别慢,于是在网上找到一些解决方案:浏览器插件+第三方网络下载工具(Motrix/Aria2)进行下载.我这里采用Motrix方式,Aria2的方式读者可自行研究安装与使用。</p><h2 id="安装与设置"><a href="#安装与设置" class="headerlink" title="安装与设置"></a>安装与设置</h2><ol><li>安装浏览器插件<ol><li>Motrix:在Chrome浏览器应用商店搜索百度网盘助手并下载安装。</li><li>Aria2: 在Chrome浏览器应用商店搜索YAAW for Chrome并下载安装。</li></ol></li><li>网络下载工具安装<ol><li>Motrix: <a href="https://motrix.app/" target="_blank" rel="noopener">下载地址</a></li><li>Aria2:<a href="https://aria2.github.io/" target="_blank" rel="noopener">下载地址</a></li></ol></li></ol><h2 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h2><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20190811001/01.png" alt="百度网盘Web网页"></p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20190811001/motrix.png" alt="Motrix下载"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由上可知,百度云网盘确实做了网速限制。虽然通过第三方下载工具提升了一些下载速度,但是下载还是有点慢，这个其实可以理解的，因为当下的网络是长城宽带，慢也是正常的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="实用工具及技巧" scheme="http://ltyeamin.github.io/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>魔都上海</title>
    <link href="http://ltyeamin.github.io/2019/06/09/%E9%AD%94%E9%83%BD%E4%B8%8A%E6%B5%B7/"/>
    <id>http://ltyeamin.github.io/2019/06/09/魔都上海/</id>
    <published>2019-06-09T04:57:10.000Z</published>
    <updated>2020-01-08T13:06:39.889Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="上海宣传片"><a href="#上海宣传片" class="headerlink" title="上海宣传片"></a>上海宣传片</h2><p><link class="dplayer-css" rel="stylesheet" href="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.css"></p><script src="https://www.zhyong.cn/assets/js/DPlayer.min.js"></script><div id="dplayer0"></div><br><br><br><div id="dplayer1"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script><script>const dp0 = new DPlayer({    container: document.getElementById('dplayer0'),    screenshot: true,    video: {        url: 'http://q3j85ddid.bkt.clouddn.com/videos/lvyou/shanghai2.mp4'    },    subtitle: {        url: 'webvtt.vtt'    },    danmaku: {        id: 'demo',        api: 'https://api.prprpr.me/dplayer/'    }});const dp1 = new DPlayer({    container: document.getElementById('dplayer1'),    screenshot: true,    video: {        url: 'http://q3j85ddid.bkt.clouddn.com/videos/lvyou/shanghai1.mp4'    },    subtitle: {        url: 'webvtt.vtt'    },    danmaku: {        id: 'demo',        api: 'https://api.prprpr.me/dplayer/'    }});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="others" scheme="http://ltyeamin.github.io/categories/others/"/>
    
    
      <category term="自媒体" scheme="http://ltyeamin.github.io/tags/%E8%87%AA%E5%AA%92%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>Samba服务器搭建</title>
    <link href="http://ltyeamin.github.io/2019/06/08/Samba%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <id>http://ltyeamin.github.io/2019/06/08/Samba服务器搭建/</id>
    <published>2019-06-08T07:17:23.000Z</published>
    <updated>2020-01-08T13:06:37.355Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><br><br>    <iframe src="http://q3j85ddid.bkt.clouddn.com/pdfs/doc/20190608001/samba%E6%95%99%E7%A8%8B.pdf" style="width:100%;height:1050px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen> </iframe> <div style="margin-bottom:5px"><br><br></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="Samba" scheme="http://ltyeamin.github.io/tags/Samba/"/>
    
  </entry>
  
  <entry>
    <title>记录一次Maven中配置文件尾回车换行引发的问题</title>
    <link href="http://ltyeamin.github.io/2019/06/04/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Maven%E4%B8%AD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B0%BE%E5%9B%9E%E8%BD%A6%E6%8D%A2%E8%A1%8C%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://ltyeamin.github.io/2019/06/04/记录一次Maven中配置文件尾回车换行引发的问题/</id>
    <published>2019-06-04T14:22:13.000Z</published>
    <updated>2020-01-08T13:06:42.163Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>今天打开IDEA加载项目时，发现一个很诡异的问题：项目依赖及代码没任何问题，Maven依赖检测红色波浪线依旧存在。虽说项目依旧能跑起来不影响开发，但是maven命令操作用不了。</p><p>遇到问题后，我大吃一惊。昨天看项目还好好的，今天就报出某个项目一个依赖包找不到。可实际上。该依赖包在本地库是存在的。于是，我删掉了依赖包，重新远程仓库下载。</p><p>私服和中央仓库切换好几次，重新下载的依赖包都是完整没问题的。同样Maven的Clean或Install搭配使用多次，这让我更加郁闷，寻找着解决方案。</p><h2 id="问题排查与解决"><a href="#问题排查与解决" class="headerlink" title="问题排查与解决"></a>问题排查与解决</h2><h3 id="解决一"><a href="#解决一" class="headerlink" title="解决一"></a>解决一</h3><p>在项目中的pom.xml文件里把红色波浪线的依赖线注释掉，然后重新加载之后，就不会出现。</p><p>然后撤销注释，然后加载就OK了，网上上说这是IDEA开发工具的BUG，这谁晓得，先这样干吧。</p><h3 id="解决二"><a href="#解决二" class="headerlink" title="解决二"></a>解决二</h3><p>解决一虽然解决了依赖找不到红色波浪线问题，但还是预留一些问题，那就是Maven的基本命令操作用不了。比如我使用了mvn clean进行操作，控制台则报出一段日志:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\applications\develop\JDK8\bin\java.exe -Dmaven.multiModuleProjectDirectory=E:\work\code\cashloan-api -Dmaven.home=D:\applications\develop\apache-maven-3.6.1 -Dclassworlds.conf=D:\applications\develop\apache-maven-3.6.1\bin\m2.conf <span class="string">"-javaagent:D:\applications\develop\IntelliJ IDEA 2019.1.3\lib\idea_rt.jar=57134:D:\applications\develop\IntelliJ IDEA 2019.1.3\bin"</span> -Dfile.encoding=UTF-8 -classpath D:\applications\develop\apache-maven-3.6.1\boot\plexus-classworlds-2.6.0.jar org.codehaus.classworlds.Launcher -Didea.version2019.1.3 -s D:\applications\develop\apache-maven-3.6.1\conf\settings.xml -Dmaven.repo.local=D:\applications\develop\apache-maven-3.6.1\repo install</span><br><span class="line">[ERROR] Error executing Maven.</span><br><span class="line">[ERROR] 2 problems were encountered <span class="keyword">while</span> building the effective settings</span><br><span class="line">[FATAL] Non-parseable settings D:\applications\develop\apache-maven-3.6.1\conf\settings.xml: <span class="keyword">in</span> epilog non whitespace content is not allowed but got j (position: END_TAG seen ...&lt;/settings&gt;\n\nj... @300:2)  @ D:\applications\develop\apache-maven-3.6.1\conf\settings.xml, line 300, column 2</span><br><span class="line">[FATAL] Non-parseable settings D:\applications\develop\apache-maven-3.6.1\conf\settings.xml: <span class="keyword">in</span> epilog non whitespace content is not allowed but got j (position: END_TAG seen ...&lt;/settings&gt;\n\nj... @300:2)  @ D:\applications\develop\apache-maven-3.6.1\conf\settings.xml, line 300, column 2</span><br></pre></td></tr></table></figure><p>通过日志我觉得Maven的配置文件settings.xml有问题，第300行第2列有疑惑。</p><p>我打开settings.xmls文件，没有300行，查看好像并没有什么问题，但是仔细阅读日志END_TAG seen …\n\nj… @300:2，这个让我有所启示，猜测是换行的问题。</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20190604001/logs.png" alt="clean后的报错日志"></p><p>What？xml文件尾不能有回车换行，我不信这个邪，我就去试试。</p><p>试了以后，才知道真的是这个问题。该死，想了一下，自己今天早上改动过配置文件，可能在保存之前敲了回车，真是该死！！！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有坑不重要，重要的是如何去填坑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="backend" scheme="http://ltyeamin.github.io/categories/backend/"/>
    
    
      <category term="Maven" scheme="http://ltyeamin.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Windows搜索利器</title>
    <link href="http://ltyeamin.github.io/2019/06/03/Windows%E6%90%9C%E7%B4%A2%E5%88%A9%E5%99%A8/"/>
    <id>http://ltyeamin.github.io/2019/06/03/Windows搜索利器/</id>
    <published>2019-06-03T14:22:13.000Z</published>
    <updated>2020-01-08T13:06:41.517Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>前几周忙于换工作，博客没有太多的更新。今天刚好入职新公司的第一天，办公电脑是台式DELL+Intel i5七代(四核四线程，主频3.1HZ，睿频3.6HZ)+8G DDR4。笔者前公司办公环境是Mac Pro + Mac OS X 10，家里日常环境是联想Lenovo+Deepin Linux。可以说已经一年多没接触Windows系统了，现在使用起来多少有些不习惯，主要是各个操作系统操作理念不同。</p><p>我几乎每天都在使用计算机进行工作和个人生活，那么我可能会在计算机上拥有大量文件，照片，文件夹，文档和其他数据。如果找到一个特定的文件是非常痛苦的。幸运的是，Mac中的Spotlight模式可让我在Mac上搜索几乎任何内容，从而轻松找到您需要的任何内容。如下图：</p><p><img src="https://support.apple.com/library/content/dam/edam/applecare/images/zh_CN/macos/highsierra/macos-high-sierra-spotlight-search-results-weather.jpg" alt="Spotlight"></p><p>正是因为习惯了在Mac OS X通过Spotlight模式进行搜索应用、文件，所以今天装机的时候找了一下Windows的替代方案。</p><h2 id="文件搜索神器-Everything"><a href="#文件搜索神器-Everything" class="headerlink" title="文件搜索神器-Everything"></a>文件搜索神器-Everything</h2><h3 id="基本简介"><a href="#基本简介" class="headerlink" title="基本简介"></a>基本简介</h3><p>基于名称快速定位文件和文件夹。</p><ul><li>轻量安装文件</li><li>干净简洁的用户界面</li><li>快速文件索引</li><li>快速搜索</li><li>最小资源使用</li><li>便于文件分享</li><li>实时更新</li><li><a href="https://www.voidtools.com/zh-cn/faq" target="_blank" rel="noopener">更多…</a></li></ul><p><a href="https://www.voidtools.com/zh-cn/" target="_blank" rel="noopener">中文官网</a></p><p><a href="https://www.voidtools.com/Everything-1.4.1.935.x64.zip" target="_blank" rel="noopener">下载地址</a></p><p><a href="https://www.voidtools.com/zh-cn/support/everything/" target="_blank" rel="noopener">中文文档</a></p><h3 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h3><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20190603001/everything.png" alt="Everything搜索文件夹或文件"></p><h2 id="Spotlight快速检索替代方案-Wox"><a href="#Spotlight快速检索替代方案-Wox" class="headerlink" title="Spotlight快速检索替代方案-Wox"></a>Spotlight快速检索替代方案-Wox</h2><h3 id="基本简介-1"><a href="#基本简介-1" class="headerlink" title="基本简介"></a>基本简介</h3><p>Wox是一款国产开源免费的软件快捷启动工具，它可以快速搜索并打开你电脑上的程序、文件、查词翻译、网站查找等其他操作，同时还支持插件安装。</p><p>Tips: 如果你需要用到文件的快速搜索、打开功能，需要预先安装<a href="https://www.voidtools.com/Everything-1.4.1.935.x64.zip" target="_blank" rel="noopener">Everything</a>。</p><p><a href="http://www.wox.one/" target="_blank" rel="noopener">官网</a></p><p><a href="https://github.com/Wox-launcher/Wox/releases" target="_blank" rel="noopener">下载地址</a></p><p><a href="http://doc.wox.one/zh/" target="_blank" rel="noopener">中文文档</a></p><p><a href="https://github.com/Wox-launcher/Wox" target="_blank" rel="noopener">Github地址</a></p><h3 id="使用体验-1"><a href="#使用体验-1" class="headerlink" title="使用体验"></a>使用体验</h3><h4 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h4><p>快捷键启动按下【<strong>Alt+Space</strong>】即可，可以在setting里设置。我设置的快捷键设置为【<strong>Ctrl+Space</strong>】,和Mac快捷键保持一致。</p><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>刚刚使用Wox的用户，常常会找不到Wox的设置页面。目前，用户有两种方式打开设置界面：</p><ul><li>通过<code>setting</code>命令（<strong>推荐</strong>）。如下图所示，直接输入<code>setting</code>然后选择第一项；<img src="http://doc.wox.one/zh/basic/images/how_to_open_setting1.png" alt="命令设置"></li><li>通过右键托盘图标。</li></ul><p>在setting里，可以设置主题、窗口设置、快捷键设置、搜索设置、插件设置，读者可根据自身需求进行相应的设置即可。</p><h4 id="应用搜索"><a href="#应用搜索" class="headerlink" title="应用搜索"></a>应用搜索</h4><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20190603001/app.png" alt="应用搜索"></p><h4 id="浏览器搜索"><a href="#浏览器搜索" class="headerlink" title="浏览器搜索"></a>浏览器搜索</h4><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20190603001/google.png" alt="Google Search"></p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20190603001/bd.png" alt="Baidu Search"></p><h4 id="命令终端执行"><a href="#命令终端执行" class="headerlink" title="命令终端执行"></a>命令终端执行</h4><p>替换Windows的命令终端，替换Windows键+R键。</p><p><img src="http://q3j85ddid.bkt.clouddn.com/imgs/doc/20190603001/cmd.png" alt="cmd"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ops" scheme="http://ltyeamin.github.io/categories/ops/"/>
    
    
      <category term="实用工具及技巧" scheme="http://ltyeamin.github.io/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
